<!DOCTYPE html>

<html class="no-js" lang="en" class="js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths">
<head id="ContentPlaceHolderDefault_Head1">
    <meta http-equiv="X-UA-Compatible" content="IE=9,chrome=1" />
    <meta charset=UTF-8" />
    <title>Windows Azure 培训包 - 云服务简介</title>
    <link rel="Stylesheet" type="text/css" media="all" href="styles/master.css" />
</head>
<body id="top" class="page-">
    <div id="page">
        <div id="wrapper" class="landingPage getStartedPage">            
            <div class="header">								
				<img alt="Windows Azure" src="images/azure-logo.png" /> <span class="mainHomepageSubTitle">培训包 - 2012 年 12 月更新</span>								
			</div>			
			<div class="nav-menu-header">
				<nav>
					<ul>
						<li class="MenuLink-Selected">
							<a href="#">内容</a>
						</li>
												<li class="MenuLink">
							<a href="Source">设置</a>
						</li>
											</ul>
				
										
						<span id="github-btn" class="github-btn"> <a id="gh-btn" title="在 GitHub 中复制此存储库的分支" href="https://github.com/WindowsAzure-TrainingKit/HOL-IntroToCloudServices" target="_blank" class="gh-btn"> <span class="gh-ico"></span> <span id="gh-text" class="gh-text">分支</span> </a> </span> <span id="github-btn" class="github-btn github-watchers"> <a id="gh-btn" title="在 GitHub 中关注此存储库" href="https://github.com/WindowsAzure-TrainingKit/HOL-IntroToCloudServices" target="_blank" class="gh-btn"> <span class="gh-ico"></span> <span id="gh-text" class="gh-text">关注</span> </a> </span>
						
									
				</nav>
			</div>	        
		</span>
			<div id="content" class="textpage">
            <section id="content-container">
				<div id="content" class="textpage">
			    <a name="top"></a>
				
				

		<div class="content">
			<?xml version="1.0" encoding="iso-8859-1"?><span><p><a name="Title"></a></p>

<h1 id="Introduction_to_Cloud_Services">云服务简介</h1>

<hr />

<p><a name="Overview"></a></p>

<h2 id="Overview">概述</h2>

<p>当您创建一个应用程序并在 Windows Azure 中运行它时，我们将代码和配置统称为一个 Windows Azure 云服务。通过创建云服务，您可以在 Windows Azure 中部署多层应用程序，定义多个角色来分散处理负载，同时让应用程序可以灵活扩展。</p>

<p>云服务由一个或多个 Web 角色和/或辅助角色组成，每个角色都有自己的应用程序文件和配置。Web 角色提供专门的 Internet Information Services (IIS) Web 服务器，可用于承载您的云服务的 Web 前端。辅助角色承载的应用程序代码可以在后台运行异步、长时间运行或永久任务。</p>

<p>存储设备在云中提供存储，包括用于存储文本和二进制数据的 Blob 服务、实现结构化存储的表服务（可查询）以及可在各服务之间实现稳定可靠消息传递的队列服务。</p>

<p>在此动手实验中，您将创建一个简单的 GuestBook 应用程序（该应用程序演示 Web 和辅助角色、Blob 存储、表存储和队列的许多功能），并藉此了解 Windows Azure 云服务的基本元素。</p>

<p>在 GuestBook 应用程序中，Web 角色提供一个允许用户查看留言簿内容和提交新条目的前端。每个条目都包含一个名称、一条消息和一个相关图片。该应用程序也包含一个可为用户提交的图像生成缩略图的辅助角色。</p>

<p>当用户发布新项目时，Web 角色将图片上载到 Blob 存储，并在表存储中创建一个包含用户所输入信息的条目，以及一个指向包含该图片的 Blob 的链接。该 Web 角色会将此信息显示在浏览器中，以便用户查看留言簿的内容。</p>

<p>在存储图像并创建条目之后，Web 角色将一个工作项发布到队列，以处理该图像。辅助角色从队列中获取该工作项，从 Blob 存储检索图像，并重新设置图像大小以创建缩略图。使用队列来发布工作项在云应用程序中是一种很常见的模式，这样可以将主要进行计算的任务与前端分离。这种方法的好处是前端与后端可以单独扩展。</p>
<blockquote>
<p><strong>注意：</strong>在最新版本的 <a href="http://bit.ly/WindowsAzureTK">Windows Azure 培训包</a>或 <a href="https://github.com/WindowsAzure-TrainingKit/HOL-IntroToCloudServices-VS2012">GitHub</a> 中可以找到此动手实验的 Visual Studio 2012 版本。</p>
</blockquote>
<p><a name="Objectives"></a></p>

<h3 id="Objectives">目标</h3>

<p>在此动手实验中，您将学习如何执行以下操作：</p>

<ul>
<li>在 Windows Azure 中使用 Web 角色和辅助角色创建应用程序</li>
<li>使用存储服务，包括 Blob、队列和表</li>
<li>将应用程序发布到 Windows Azure 云服务</li>
</ul>

<p><a name="Prerequisites"></a></p>

<h3 id="Prerequisites">先决条件</h3>

<p>下面是完成此动手实验需要满足的先决条件：</p>

<ul>
<li>IIS 7（带有 ASP.NET、WCF HTTP 激活）</li>
<li><a href="http://msdn.microsoft.com/vstudio/products/">Microsoft Visual Studio 2010</a></li>
<li><a href="http://www.microsoft.com/windowsazure/sdk/">Windows Azure Tools for Microsoft Visual Studio 1.8</a></li>
<li><a href="http://www.microsoft.com/express/sql/download/">SQL Server 2012 Express Edition（或更高版本）</a></li>
<li>Windows Azure 订阅 - <a href="http://aka.ms/WATK-FreeTrial">注册以免费试用</a></li>
</ul>
<blockquote>
<p><strong>注意：</strong>此实验针对 Windows 7 而设计</p>
</blockquote>
<p><a name="Setup"></a></p>

<h3 id="Setup">设置</h3>

<p>为了执行此动手实验中的各项练习，需要对环境进行设置。</p>

<ol>
<li><p>打开 Windows 资源管理器窗口，浏览到此实验的 <strong>Source</strong> 文件夹。</p></li>
<li><p>使用管理员权限执行 <strong>Setup.cmd</strong> 文件以启动设置过程，该过程将配置您的环境并安装此实验的 Visual Studio 代码段。</p></li>
<li><p>如果显示“用户帐户控制”对话框，请确认操作以继续。</p></li>
</ol>
<blockquote>
<p><strong>注意：</strong>您首次启动 Visual Studio 时，必须选择一个预定义的设置集合。每个预定义的集合在设计上都对应于特定的开发风格，能够确定窗口布局、编辑器行为、IntelliSense 代码段和对话框选项。此实验中的过程介绍了在使用<strong>“常规开发设置”</strong>集合时，在 Visual Studio 中完成指定任务所需的操作。如果您为开发环境选择其他设置集合，需要考虑可能的过程差异。</p>

<p>请务必在运行安装程序前检查此实验的所有依赖项。</p>
</blockquote>
<p><a name="UsingCodeSnippets"></a></p>

<h3 id="Using_the_Code_Snippets">使用代码段</h3>

<p>实验文档将指导您插入代码块。为方便起见，大部分代码是以 Visual Studio 代码段的形式提供的，您可以在 Visual Studio 2010 中使用而不必手动添加。</p>

<hr />

<p><a name="Exercises"></a></p>

<h2 id="Exercises">练习</h2>

<p>此动手实验包括以下练习：</p>

<ol>
<li><p><a href="#Exercise1">构建您的第一个 Windows Azure 应用程序</a></p></li>
<li><p><a href="#Exercise2">使用辅助角色和队列进行后台处理</a></p></li>
<li><p><a href="#Exercise3">发布 Windows Azure 应用程序</a></p></li>
</ol>

<p>完成此实验的估计时间：<strong>120</strong> 分钟。</p>
<blockquote>
<p><strong>注意：</strong>每个练习都附带一个起始解决方案，它位于练习的 Begin 文件夹中，允许您独立执行每个练习。请注意，在练习期间添加的代码段不包含在这些起始解决方案中，在您完成练习前，这些代码段不一定起作用。在练习的源代码内，您还会看到一个 End 文件夹，其中包含在完成相应练习中的步骤之后所生成的 Visual Studio 解决方案代码。如果在进行此动手实验时需要更多帮助，可以使用这些解决方案作为指南。</p>
</blockquote>
<p><a name="Exercise1"></a></p>

<h3 id="Exercise_1_Building_Your_First_Windows_Azure_Application">练习 1：构建您的第一个 Windows Azure 应用程序</h3>

<p>在此练习中，您将创建一个留言簿应用程序，并在本地 Development Fabric 中执行它。为此，您将使用 Windows Azure Tools for Microsoft Visual Studio 基于云服务项目模板创建项目。这些工具扩展了 Visual Studio，以支持创建、构建和运行 Windows Azure 服务。您将在此练习的其余步骤中继续处理此项目。</p>
<blockquote>
<p><strong>注意：</strong>要减少键入操作，可以右键单击要插入源代码的位置，依次选择“插入代码段”和“我的代码段”，然后选择与当前练习步骤对应的条目。</p>
</blockquote>
<p><a name="Ex1Task1"></a></p>

<h4 id="Task_1_-_Creating_the_Visual_Studio_Project">任务 1 - 创建 Visual Studio 项目</h4>

<p>在此任务中，您将在 Visual Studio 中创建一个新的云服务项目。</p>

<ol>
<li><p>通过从<strong>“开始”|“所有程序”|“Microsoft Visual Studio 2010”</strong>中右键单击 <strong>Microsoft Visual Studio 2010</strong> 快捷方式，然后选择<strong>“以管理员身份运行”</strong>，以管理员身份打开 Visual Studio。</p></li>
<li><p>如果显示<strong>“用户帐户控制”</strong>对话框，请单击<strong>“是”</strong>。</p></li>
<li><p>从<strong>“文件”</strong>菜单中选择<strong>“新建”</strong>，再选择<strong>“项目”</strong>。</p></li>
<li><p>在<strong>“新建项目”</strong>对话框中，展开<strong>“已安装的模板”</strong>列表中的 <strong>Visual C#</strong>，然后选择<strong>“云”</strong>。选择<strong>“Windows Azure 项目”</strong>模板，将该项目的名称设置为 GuestBook，将位置设置为 <strong>\Source\Ex1-BuildingYourFirstWindowsAzureApp</strong>，将解决方案名称更改为 <strong>Begin</strong>，并确保选中了<strong>“创建解决方案的目录”</strong>。单击<strong>“确定”</strong>创建项目。</p>

<p><img src="Images/new-cloud-service-project.png?raw=true" alt="创建新的 Windows Azure 云服务项目" title="创建新的 Windows Azure 云服务项目" />
</p>

<p><em>创建新的 Windows Azure 云服务项目</em></p>
<blockquote>
<p><strong>注意：</strong>Windows Azure 支持 .NET Framework 4.0。如果您使用 Visual Studio 2010 创建该项目，则可为目标框架选择此版本并且利用其新功能。</p>
</blockquote></li>
<li><p>在<strong>“新建 Windows Azure 项目”</strong>对话框中的<strong>“角色”</strong>面板内，展开 <strong>Visual C#</strong> 选项卡。从可用角色列表中选择<strong>“ASP.NET Web 角色”</strong>，然后单击箭头 <strong>(&gt;)</strong> 将此角色的实例添加到解决方案。在关闭对话框前，选择右边面板中的新角色，单击铅笔图标，然后将角色重命名为 <strong>GuestBook_WebRole</strong>。单击<strong>“确定”</strong>以创建云服务解决方案。</p>

<p><img src="Images/assigning-a-webrole-to-a-cloud-service-project.png?raw=true" alt="为云服务项目分配角色" title="为云服务项目分配角色" />
</p>

<p><em>为云服务项目分配角色</em></p></li>
<li><p>在<strong>解决方案资源管理器</strong>中，查看所创建解决方案的结构。</p>

<p><img src="Images/solution-explorer-guestbook.png?raw=true" alt="显示 GuestBook 应用程序的解决方案资源管理器" title="显示 GuestBook 应用程序的解决方案资源管理器" />
</p>

<p><em>显示 GuestBook 应用程序的解决方案资源管理器</em></p>
<blockquote>
<p><strong>注意：</strong>生成的解决方案包含两个不同项目。第一个名为 <strong>GuestBook</strong> 的项目包含构成云应用程序的 Web 角色和辅助角色的配置。它包含服务定义文件 <strong>ServiceDefinition.csdef</strong>，其中包含 Windows Azure 结构了解应用程序需求所需要的元数据，如要使用的角色、它们的信任级别、每个角色公开的端点、本地存储要求以及角色所使用的证书。服务定义还设置特定于应用程序的配置。服务配置文件指定要为每个角色运行的实例数，并设置在服务定义文件中定义的配置设置的值。服务定义和配置互相分隔，允许您通过上载新服务配置文件来更新正在运行的应用程序的设置。</p>

<p>您可以创建很多配置文件，并使每个文件用于特定的场景，如生产、开发或 QA，然后在发布应用程序时选择要使用的配置文件。默认情况下，Visual Studio 会创建两个文件，即 <strong>ServiceConfiguration.Local.cscfg</strong> 和 <strong>ServiceConfiguration.Cloud.cscfg</strong>。</p>

<p>您可以使用云服务项目中的“角色”节点配置服务包括哪些角色（Web 角色和/或辅助角色）以及哪些项目与这些角色相关联。通过“角色”节点添加和配置角色将更新 <strong>ServiceDefinition.csdef</strong> 和 <strong>ServiceConfiguration.cscfg</strong> 文件。</p>

<p>名为 <strong>GuestBook_WebRole</strong> 的第二个项目是针对 Windows Azure 环境将标准 ASP.NET Web 应用程序项目模板修改而得的项目。它另外包含了一个类，该类提供 Web 角色的入口点，并包含用于管理角色初始化、启动和停止的方法。</p>
</blockquote></li>
</ol>

<p><a name="Ex1Task2"></a>  </p>

<h4 id="Task_2_-_Creating_a_Data_Model_for_Entities_in_Table_Storage">任务 2 - 在表存储中创建实体数据模型</h4>

<p>应用程序在表存储中存储留言簿条目。表服务以包含条目集合的表的形式提供半结构化的存储。实体有一个主键和一组属性，属性是名称/类型化值对。</p>

<p>除了模型需要的属性之外，表存储中的每个实体都有两个键属性：<strong>PartitionKey</strong> 和 <strong>RowKey</strong>。这些属性共同构成了表的主键，唯一标识表中的每个实体。实体也有 <strong>Timestamp</strong> 系统属性，服务可通过该属性跟踪实体的上次修改时间。此字段供系统使用，不应由应用程序访问。表存储客户端 API 提供了 <strong>TableServiceEntity</strong> 类，用于定义必需的属性。您可以将 <strong>TableServiceEntity</strong> 类用作实体基本类，但这不是硬性要求。</p>

<p>表服务 API 与 <a href="http://msdn.microsoft.com/zh-CN/library/cc668792.aspx">WCF 数据服务</a>（原来的 ADO.NET Data Services 框架）提供的 REST API 兼容，通过它可以使用 <a href="http://msdn.microsoft.com/zh-CN/library/cc668772.aspx">WCF 数据服务客户端库</a>（以前的 .NET 客户端库）借助 .NET 对象处理表存储中的数据。</p>

<p>表服务不对表强制实施任何架构，因此同一个表中的两个实体可以具有不同的两组属性。但是，GuestBook 应用程序使用固定架构存储其数据。</p>

<p>为了使用 WCF 数据服务客户端库来访问表存储中的数据，您需要创建一个派生自 <strong>TableServiceContext</strong>（它本身又派生自 WCF 数据服务中的 <strong>DataServiceContext</strong>）的上下文类。应用程序可通过表存储 API 创建它们从这些上下文类使用的表。为此，上下文类必须将每个必需的表作为类型 <strong>IQueryable&lt;SchemaClass&gt;</strong> 的属性公开，其中 <strong>SchemaClass</strong> 是为存储在表中的实体建模的类。</p>

<p>在此任务中，您为 GuestBook 应用程序存储的实体的架构建模，并创建一个上下文类来使用 WCF 数据服务访问表存储中的信息。为完成此任务，您将在 ASP.NET 中创建一个可通过数据绑定到数据控件的对象，并实施基本的数据访问操作：读取、更新和删除。</p>

<ol>
<li><p>为架构类创建一个新项目。要创建新项目，请在<strong>“文件”</strong>菜单中，指向<strong>“添加”</strong>，然后选择<strong>“新建项目”</strong>。</p></li>
<li><p>在<strong>“添加新项目”</strong>对话框中，在<strong>“已安装的模板”</strong>树视图下展开所选语言，选择 <strong>Windows</strong> 类别，然后选择<strong>“类库”</strong>项目模板。将名称设置为 <em>GuestBook_Data</em>，保留解决方案文件夹内建议的位置不更改，然后单击<strong>“确定”</strong>。</p>

<p><img src="Images/creating-class-library-guestbook.png?raw=true" alt="为 GuestBook 实体创建类库" title="为 GuestBook 实体创建类库" />
</p>

<p><em>为 GuestBook 实体创建类库</em></p></li>
<li><p>删除类库模板生成的默认类文件。为此，右键单击 <strong>Class1.cs</strong> 并选择<strong>“删除”</strong>。在确认对话框中单击<strong>“确定”</strong>。</p></li>
<li><p>在 <strong>GuestBook_Data 项目</strong>中添加对 WCF 数据服务 .NET 客户端库的引用。在<strong>“解决方案资源管理器”</strong>中，右键单击 <strong>GuestBook_Data</strong> 项目节点，选择<strong>“添加引用”</strong>，单击 <strong>.NET</strong> 选项卡，选择 <strong>System.Data.Services.Client</strong> 组件，然后单击<strong>“确定”</strong>。</p>

<p><img src="Images/adding-reference-systemdataservice.png?raw=true" alt="添加对 System.Data.Service.Client 组件的引用" title="添加对 System.Data.Service.Client 组件的引用" />
</p>

<p><em>添加对 System.Data.Service.Client 组件的引用</em></p></li>
<li><p>重复执行前一步骤以便添加对存储客户端 API 程序集的引用，这次改为选择 <strong>Microsoft.WindowsAzure.StorageClient</strong> 组件。</p></li>
<li><p>首先必须定义实体的架构，然后才能在表中存储实体。为此，在<strong>解决方案资源管理器</strong>中右键单击 <strong>GuestBook_Data</strong>，指向<strong>“添加”</strong>，然后选择<strong>“类”</strong>。在<strong>“添加新项目”</strong>对话框中，将名称设置为 <strong>GuestBookEntry.cs</strong>，然后单击<strong>“添加”</strong>。</p>

<p><img src="Images/adding-guestbookentry-class.png?raw=true" alt="添加 GuestBookEntry 类" title="添加 GuestBookEntry 类" />
</p>

<p><em>添加 GuestBookEntry 类</em></p></li>
<li><p>在文件顶部，插入以下命名空间声明，以导入 <strong>Microsoft.WindowsAzure.StorageClient</strong> 命名空间中包含的类型。</p>

<!-- mark:1 -->

<span class="codelanguage">C#</span><pre><code class="C#"><strong class="markLine"><span style="color:#0000FF">using</span> Microsoft.WindowsAzure.StorageClient;</strong>
</code></pre></li>
<li><p>如果尚未打开 <strong>GuestBookEntry.cs</strong> 文件，则打开该文件，然后更新 <strong>GuestBookEntry</strong> 类的声明，使之成为 public 类并派生自 <strong>TableServiceEntity</strong> 类。</p>

<!-- mark:2 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> GuestBookEntry
<strong class="markLine">    : Microsoft.WindowsAzure.StorageClient.TableServiceEntity</strong>
{ }
</code></pre>
<blockquote>
<p><strong>注意：</strong><strong>TableServiceEntity</strong> 是在 Storage Client API 中的类。此类定义 Windows Azure 表中存储的每个实体需要的 <strong>PartititionKey</strong>、<strong>RowKey</strong> 和 <strong>TimeStamp</strong> 系统属性。</p>

<p><strong>PartitionKey</strong> 和 <strong>RowKey</strong> 共同定义唯一标识表中每个实体的 <strong>DataServiceKey</strong>。</p>
</blockquote></li>
<li><p>将默认构造函数添加到 <strong>GuestBookEntry</strong> 类，用于初始化其 <strong>PartitionKey</strong> 和 RowKey 属性。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 GuestBookEntry constructor</em> - CS）</p>

<!-- mark:1-7 -->

<span class="codelanguage">C#</span><pre><code class="C#"><strong class="markLine"><span style="color:#0000FF">public</span> GuestBookEntry()</strong>
<strong class="markLine">{            </strong>
<strong class="markLine">  PartitionKey = DateTime.UtcNow.ToString(<span style="color:#8B0000">&quot;MMddyyyy&quot;</span>);</strong>
<strong class="markLine"></strong>
<strong class="markLine">  <span style="color:#008000">// Row key allows sorting, so we make sure the rows come back in time order</span></strong>
<strong class="markLine">  RowKey = <span style="color:#0000FF">string</span>.Format(<span style="color:#8B0000">&quot;{0:10}_{1}&quot;</span>, DateTime.MaxValue.Ticks - DateTime.Now.Ticks, Guid.NewGuid());</strong>
<strong class="markLine">}</strong>
</code></pre>
<blockquote>
<p><strong>注意：</strong>为了对数据进行分区，GuestBook 应用程序将输入日期用作 <strong>PartitionKey</strong>，这意味着对于每一天的留言簿条目都有一个单独的分区。一般来说，应选择分区键的值以确保各个存储节点之间的数据负载实现平衡。</p>

<p><strong>RowKey</strong> 是一个逆向 DateTime 字段，其后追加 GUID 以实现唯一性。分区中的表按 RowKey 排序，因此表将按要显示在主页上的正确顺序排序，最新的条目显示在顶部。</p>
</blockquote></li>
<li><p>要完成 <strong>GuestBookEntry</strong> 类的定义，请添加 <strong>Message</strong>、<strong>GuestName</strong>、<strong>PhotoUrl</strong> 和 <strong>ThumbnailUrl</strong> 的属性以存储关于条目的信息。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 Table Schema Properties</em> - CS）</p>

<!-- mark:1-7 -->

<span class="codelanguage">C#</span><pre><code class="C#"><strong class="markLine"><span style="color:#0000FF">public</span> <span style="color:#0000FF">string</span> Message { <span style="color:#0000FF">get</span>; <span style="color:#0000FF">set</span>; }</strong>
<strong class="markLine"></strong>
<strong class="markLine"><span style="color:#0000FF">public</span> <span style="color:#0000FF">string</span> GuestName { <span style="color:#0000FF">get</span>; <span style="color:#0000FF">set</span>; }</strong>
<strong class="markLine"></strong>
<strong class="markLine"><span style="color:#0000FF">public</span> <span style="color:#0000FF">string</span> PhotoUrl { <span style="color:#0000FF">get</span>; <span style="color:#0000FF">set</span>; }</strong>
<strong class="markLine"></strong>
<strong class="markLine"><span style="color:#0000FF">public</span> <span style="color:#0000FF">string</span> ThumbnailUrl { <span style="color:#0000FF">get</span>; <span style="color:#0000FF">set</span>; }</strong>
</code></pre></li>
<li><p>保存 <strong>GuestBookEntry.cs</strong> 文件。</p></li>
<li><p>接下来，需要创建使用 WCF 数据服务访问 <em>GuestBook</em> 表所需的上下文类。为此，在<strong>解决方案资源管理器</strong>中右键单击 <strong>GuestBook_Data</strong> 项目，指向<strong>“添加”</strong>，然后选择<strong>“类”</strong>。在<strong>“添加新项目”</strong>对话框中，将<strong>名称</strong>设置为 <strong>GuestBookDataContext.cs</strong>，然后单击<strong>“添加”</strong>。</p></li>
<li><p>在新类文件中，将新类的声明进行更新，使之成为 public 类，并继承 <strong>TableServiceContext</strong> 类。</p>

<!-- mark:2 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> GuestBookDataContext
<strong class="markLine">    : Microsoft.WindowsAzure.StorageClient.TableServiceContext</strong>
{ }
</code></pre></li>
<li><p>现在，添加一个默认构造函数，以使用存储帐户信息初始化基类。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 GuestBookDataContext Class</em> - CS）</p>

<!-- mark:4-7 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> GuestBookDataContext : Microsoft.WindowsAzure.StorageClient.TableServiceContext {
<strong class="markLine"> <span style="color:#0000FF">public</span> GuestBookDataContext(<span style="color:#0000FF">string</span> baseAddress, Microsoft.WindowsAzure.StorageCredentials credentials) </strong>
<strong class="markLine">    : <span style="color:#0000FF">base</span>(baseAddress, credentials)</strong>
<strong class="markLine">  {</strong>
<strong class="markLine">  }</strong>
}
</code></pre>
<blockquote>
<p><strong>注意：</strong>可以在存储客户端 API 中找到 <strong>TableServiceContext</strong> 类。此类派生自 WCF 数据服务中的 <strong>DataServiceContext</strong>，它管理访问存储帐户所需的凭据，为其操作提供重试策略支持。</p>
</blockquote></li>
<li><p>将一个属性添加到 <strong>GuestBookDataContext</strong> 类以公开 <strong>GuestBookEntry</strong> 表。为此，将以下（突出显示的）代码插入该类。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 GuestBookEntry Property</em> - CS）</p>

<!-- mark:5-11 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> GuestBookDataContext : Microsoft.WindowsAzure.StorageClient.TableServiceContext { ...
<strong class="markLine">  <span style="color:#0000FF">public</span> IQueryable&lt;GuestBookEntry&gt; GuestBookEntry</strong>
<strong class="markLine">  {</strong>
<strong class="markLine">    <span style="color:#0000FF">get</span></strong>
<strong class="markLine">    {</strong>
<strong class="markLine">        <span style="color:#0000FF">return</span> <span style="color:#0000FF">this</span>.CreateQuery&lt;GuestBookEntry&gt;(<span style="color:#8B0000">&quot;GuestBookEntry&quot;</span>);</strong>
<strong class="markLine">    }</strong>
<strong class="markLine">  }</strong>
}
</code></pre>
<blockquote>
<p><strong>注意：</strong>您可以在 <strong>CloudTableClient</strong> 类中使用 <strong>CreateTablesFromModel</strong> 方法来创建应用程序需要的表。为此方法提供 <strong>DataServiceContext</strong>（或 <strong>TableServiceContext</strong>）衍生类时，它会查找返回 <strong>IQueryable&lt;T&gt;</strong>（其中泛型形参 <strong>T</strong> 标识对表架构建模的类）的任何属性，并在存储中创建一个根据属性命名的表。</p>
</blockquote></li>
<li><p>最后，需要实现可绑定到 ASP.NET 中数据控件的对象。在<strong>解决方案资源管理器</strong>中右键单击 <strong>GuestBook_Data</strong>，指向<strong>“添加”</strong>，然后选择<strong>“类”</strong>。在<strong>“添加新项目”</strong>对话框中，将名称设置为 <strong>GuestBookDataSource.cs</strong>，然后单击<strong>“添加”</strong>。</p></li>
<li><p>在新的类文件中，添加以下命名空间声明以导入 <strong>Microsoft.WindowsAzure</strong> 和 <strong>Microsoft.WindowsAzure.StorageClient</strong> 命名空间中包含的类型。</p>

<!-- mark:1-2 -->

<span class="codelanguage">C#</span><pre><code class="C#"><strong class="markLine"><span style="color:#0000FF">using</span> Microsoft.WindowsAzure;</strong>
<strong class="markLine"><span style="color:#0000FF">using</span> Microsoft.WindowsAzure.StorageClient;</strong>
</code></pre></li>
<li><p>在 <strong>GuestBookDataSource</strong> 类中，让该类变成 <strong>public</strong> 类并定义数据上下文和存储帐户信息的成员字段，如下所示。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 GuestBookDataSource Fields</em> - CS）</p>

<!-- mark:3-4 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> GuestBookDataSource {
<strong class="markLine">   <span style="color:#0000FF">private</span> <span style="color:#0000FF">static</span> CloudStorageAccount storageAccount;</strong>
<strong class="markLine">   <span style="color:#0000FF">private</span> GuestBookDataContext context;</strong>
}
</code></pre></li>
<li><p>现在，如下（突出显示）代码所示，将一个静态构造函数添加到数据源类。这段代码基于 <strong>GuestBookDataContext</strong> 类创建表。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 GuestBookDataSource Static Constructor</em> - CS）</p>

<!-- mark:4-12 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> GuestBookDataSource { ...
<strong class="markLine">   <span style="color:#0000FF">static</span> GuestBookDataSource()</strong>
<strong class="markLine">   {</strong>
<strong class="markLine">     storageAccount = CloudStorageAccount.FromConfigurationSetting(<span style="color:#8B0000">&quot;DataConnectionString&quot;</span>);</strong>
<strong class="markLine"></strong>
<strong class="markLine">     CloudTableClient.CreateTablesFromModel(</strong>
<strong class="markLine">     <span style="color:#0000FF">typeof</span>(GuestBookDataContext),</strong>
<strong class="markLine">     storageAccount.TableEndpoint.AbsoluteUri,</strong>
<strong class="markLine">     storageAccount.Credentials);</strong>
<strong class="markLine">  }</strong>
}
</code></pre>
<blockquote>
<p><strong>注意：</strong>该静态构造函数通过从配置中读取其设置来初始化存储帐户，然后使用 <strong>CloudTableClient</strong> 类中的 <strong>CreateTablesFromModel</strong> 方法基于 <strong>GuestBookDataContext</strong> 类定义的模型创建应用程序使用的表。通过使用该静态构造函数，可以确保此初始化任务仅执行一次。</p>
</blockquote></li>
<li><p>向 <strong>GuestBookDataSource</strong> 类添加默认构造函数以初始化用于访问表存储的数据上下文类。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 GuestBookDataSource Constructor</em> - CS）</p>

<!-- mark:4-8 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> GuestBookDataSource { ...
<strong class="markLine">  <span style="color:#0000FF">public</span> GuestBookDataSource()</strong>
<strong class="markLine">  {</strong>
<strong class="markLine">    <span style="color:#0000FF">this</span>.context = <span style="color:#0000FF">new</span> GuestBookDataContext(storageAccount.TableEndpoint.AbsoluteUri, storageAccount.Credentials);</strong>
<strong class="markLine">    <span style="color:#0000FF">this</span>.context.RetryPolicy = RetryPolicies.Retry(3, TimeSpan.FromSeconds(1));</strong>
<strong class="markLine">  }</strong>
}
</code></pre></li>
<li><p>下一步，插入以下方法以返回 <strong>GuestBookEntry</strong> 表的内容。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 GuestBookDataSource Select</em> - CS）</p>

<!-- mark:4-10 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> GuestBookDataSource { ...
<strong class="markLine">   <span style="color:#0000FF">public</span> IEnumerable&lt;GuestBookEntry&gt; GetGuestBookEntries()</strong>
<strong class="markLine">   {</strong>
<strong class="markLine">     <span style="color:#0000FF">var</span> results = from g <span style="color:#0000FF">in</span> <span style="color:#0000FF">this</span>.context.GuestBookEntry</strong>
<strong class="markLine">                   where g.PartitionKey == DateTime.UtcNow.ToString(<span style="color:#8B0000">&quot;MMddyyyy&quot;</span>)</strong>
<strong class="markLine">                   select g;</strong>
<strong class="markLine">     <span style="color:#0000FF">return</span> results;</strong>
<strong class="markLine">   }</strong>
}
</code></pre>
<blockquote>
<p><strong>注意：</strong><strong>GetGuestBookEntries</strong> 方法通过构造一个使用当前日期作为分区键值来筛选检索到的信息的 LINQ 语句，检索今天的留言簿条目。Web 角色使用此方法绑定到数据网格并显示留言簿。</p>
</blockquote></li>
<li><p>现在，添加以下方法以将新条目插入 <strong>GuestBookEntry</strong> 表。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 GuestBookDataSource AddGuestBookEntry</em> - CS）</p>

<!-- mark:4-8 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> GuestBookDataSource { ...
<strong class="markLine">   <span style="color:#0000FF">public</span> <span style="color:#0000FF">void</span> AddGuestBookEntry(GuestBookEntry newItem)</strong>
<strong class="markLine">   {</strong>
<strong class="markLine">     <span style="color:#0000FF">this</span>.context.AddObject(<span style="color:#8B0000">&quot;GuestBookEntry&quot;</span>, newItem);</strong>
<strong class="markLine">     <span style="color:#0000FF">this</span>.context.SaveChanges();</strong>
<strong class="markLine">   }</strong>
}
</code></pre>
<blockquote>
<p><strong>注意：</strong>此方法将一个新的 GuestBookEntry 对象添加到数据上下文，然后调用 SaveChanges 将该实体写入存储。</p>
</blockquote></li>
<li><p>最后，向数据源类中添加一个用于更新条目<strong>缩略图 URL</strong> 属性的方法。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 GuestBookDataSource UpdateImageThumbnail</em> - CS）</p>

<!-- mark:4-14 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> GuestBookDataSource { ...
<strong class="markLine">   <span style="color:#0000FF">public</span> <span style="color:#0000FF">void</span> UpdateImageThumbnail(<span style="color:#0000FF">string</span> partitionKey, <span style="color:#0000FF">string</span> rowKey, <span style="color:#0000FF">string</span> thumbUrl)</strong>
<strong class="markLine">   {</strong>
<strong class="markLine">      <span style="color:#0000FF">var</span> results = from g <span style="color:#0000FF">in</span> <span style="color:#0000FF">this</span>.context.GuestBookEntry</strong>
<strong class="markLine">                  where g.PartitionKey == partitionKey &amp;&amp; g.RowKey == rowKey</strong>
<strong class="markLine">                  select g;</strong>
<strong class="markLine"></strong>
<strong class="markLine">     <span style="color:#0000FF">var</span> entry = results.FirstOrDefault&lt;GuestBookEntry&gt;();</strong>
<strong class="markLine">     entry.ThumbnailUrl = thumbUrl;</strong>
<strong class="markLine">     <span style="color:#0000FF">this</span>.context.UpdateObject(entry);</strong>
<strong class="markLine">     <span style="color:#0000FF">this</span>.context.SaveChanges();</strong>
<strong class="markLine">  } </strong>
}
</code></pre>
<blockquote>
<p><strong>注意：</strong><strong>UpdateImageThumbnail</strong> 方法使用其分区键和行键查找条目；它更新缩略图 URL、通知更新的数据上下文，然后保存更改。</p>
</blockquote></li>
<li><p>保存 <strong>GuestBookDataSource.cs</strong> 文件。</p></li>
</ol>

<p><a name="Ex1Task3"></a></p>

<h4 id="Task_3_-_Creating_a_Web_Role_to_Display_the_Guest_Book_and_Process_User_Input">任务 3 - 创建用于显示留言簿和处理用户输入的 Web 角色</h4>

<p>在此任务中，将更新在任务 1 中创建 Windows Azure 云服务解决方案时生成的 Web 角色项目。这需要更新用户界面以显示留言簿条目列表。为此，将查找具有此练习的 <strong>Assets</strong> 文件夹下必要元素（将添加到项目）的页面。下一步，实现必要的代码，将提交的条目存储在表存储中，将图像存储在 Blob 存储中。要完成此任务，需要配置 Web 角色使用的存储帐户。</p>

<ol>
<li><p>将 Web 角色中的引用添加到 <strong>GuestBook_Data</strong> 项目。在<strong>“解决方案资源管理器”</strong>中，右键单击 <strong>GuestBook_WebRole</strong> 项目节点，选择<strong>“添加引用”</strong>，切换到<strong>“项目”</strong>选项卡，选择 <strong>GuestBook_Data</strong> 项目，然后单击<strong>“确定”</strong>。</p></li>
<li><p>Web 角色模板将生成一个默认页面。您将使用包含留言簿应用程序用户界面的另一个页面来替换它。要删除该页面，请在<strong>解决方案资源管理器</strong>中，右键单击 <strong>GuestBook_WebRole</strong> 项目中的 <strong>Default.aspx</strong>，然后选择<strong>“删除”</strong>。</p></li>
<li><p>将该主页及其关联资产添加到 Web 角色。为此，在<strong>解决方案资源管理器</strong>中右键单击 <strong>GuestBook_WebRole</strong>，指向<strong>“添加”</strong>，然后选择<strong>“现有项”</strong>。在<strong>“添加现有项”</strong>对话框中，浏览到 <strong>\Source\Ex1-BuildingYourFirstWindowsAzureApp</strong> 中的 <strong>Assets</strong> 文件夹，按住 <strong>CTRL</strong> 键的同时选择此文件夹中的所有文件，然后单击<strong>“添加”</strong>。</p>
<blockquote>
<p><strong>注意：</strong><strong>Assets</strong> 文件夹包含五个需要添加到项目的文件：Default.aspx 文件及其代码隐藏文件和设计器文件，一个 CSS 文件以及一个图像文件。</p>
</blockquote></li>
<li><p>打开 <strong>GuestBook_WebRole</strong> 项目中主页的代码隐藏文件。为此，在<strong>解决方案资源管理器</strong>中右键单击 <strong>Default.aspx</strong> 文件，然后选择<strong>“查看代码”</strong>。</p></li>
<li><p>在代码隐藏文件中，插入以下命名空间声明。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 Web Role Namespace Declarations</em> - CS）</p>

<!-- mark:1-6 -->

<span class="codelanguage">C#</span><pre><code class="C#"><strong class="markLine"><span style="color:#0000FF">using</span> System.IO;</strong>
<strong class="markLine"><span style="color:#0000FF">using</span> System.Net;</strong>
<strong class="markLine"><span style="color:#0000FF">using</span> Microsoft.WindowsAzure;</strong>
<strong class="markLine"><span style="color:#0000FF">using</span> Microsoft.WindowsAzure.ServiceRuntime;</strong>
<strong class="markLine"><span style="color:#0000FF">using</span> Microsoft.WindowsAzure.StorageClient;</strong>
<strong class="markLine"><span style="color:#0000FF">using</span> GuestBook_Data;</strong>
</code></pre></li>
<li><p>在 <strong>_Default</strong> 类中声明以下成员字段。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 Web Role Member Fields</em> - CS）</p>

<!-- mark:3-5 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">partial</span> <span style="color:#0000FF">class</span> _Default : System.Web.UI.Page {
<strong class="markLine">   <span style="color:#0000FF">private</span> <span style="color:#0000FF">static</span> <span style="color:#0000FF">bool</span> storageInitialized = <span style="color:#0000FF">false</span>;</strong>
<strong class="markLine">   <span style="color:#0000FF">private</span> <span style="color:#0000FF">static</span> <span style="color:#0000FF">object</span> gate = <span style="color:#0000FF">new</span> <span style="color:#0000FF">object</span>();</strong>
<strong class="markLine">   <span style="color:#0000FF">private</span> <span style="color:#0000FF">static</span> CloudBlobClient blobStorage;     </strong>
   ... }
</code></pre></li>
<li><p>在代码隐藏文件中找到 <strong>SignButton_Click</strong> 事件处理程序并插入以下代码。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 SignButton_Click</em> - CS）</p>

<!-- mark:6-27 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">partial</span> <span style="color:#0000FF">class</span> _Default : System.Web.UI.Page { ...
  <span style="color:#0000FF">protected</span> <span style="color:#0000FF">void</span> SignButton_Click(<span style="color:#0000FF">object</span> sender, EventArgs e) {
<strong class="markLine">    <span style="color:#0000FF">if</span> (<span style="color:#0000FF">this</span>.FileUpload1.HasFile)</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">      <span style="color:#0000FF">this</span>.InitializeStorage();</strong>
<strong class="markLine"></strong>
<strong class="markLine">      <span style="color:#008000">// upload the image to blob storage</span></strong>
<strong class="markLine">      <span style="color:#0000FF">string</span> uniqueBlobName = <span style="color:#0000FF">string</span>.Format(<span style="color:#8B0000">&quot;guestbookpics/image_{0}{1}&quot;</span>, Guid.NewGuid().ToString(), Path.GetExtension(<span style="color:#0000FF">this</span>.FileUpload1.FileName));</strong>
<strong class="markLine">      CloudBlockBlob blob = blobStorage.GetBlockBlobReference(uniqueBlobName);</strong>
<strong class="markLine">      blob.Properties.ContentType = <span style="color:#0000FF">this</span>.FileUpload1.PostedFile.ContentType;</strong>
<strong class="markLine">      blob.UploadFromStream(<span style="color:#0000FF">this</span>.FileUpload1.FileContent);</strong>
<strong class="markLine">      System.Diagnostics.Trace.TraceInformation(<span style="color:#8B0000">&quot;Uploaded image &#39;{0}&#39; to blob storage as &#39;{1}&#39;&quot;</span>, <span style="color:#0000FF">this</span>.FileUpload1.FileName, uniqueBlobName);</strong>
<strong class="markLine"></strong>
<strong class="markLine">      <span style="color:#008000">// create a new entry in table storage</span></strong>
<strong class="markLine">      GuestBookEntry entry = <span style="color:#0000FF">new</span> GuestBookEntry() { GuestName = <span style="color:#0000FF">this</span>.NameTextBox.Text, Message = <span style="color:#0000FF">this</span>.MessageTextBox.Text, PhotoUrl = blob.Uri.ToString(), ThumbnailUrl = blob.Uri.ToString() };</strong>
<strong class="markLine">      GuestBookDataSource ds = <span style="color:#0000FF">new</span> GuestBookDataSource();</strong>
<strong class="markLine">      ds.AddGuestBookEntry(entry);</strong>
<strong class="markLine">      System.Diagnostics.Trace.TraceInformation(<span style="color:#8B0000">&quot;Added entry {0}-{1} in table storage for guest &#39;{2}&#39;&quot;</span>, entry.PartitionKey, entry.RowKey, entry.GuestName);</strong>
<strong class="markLine">    }</strong>
<strong class="markLine"></strong>
<strong class="markLine">    <span style="color:#0000FF">this</span>.NameTextBox.Text = <span style="color:#0000FF">string</span>.Empty;</strong>
<strong class="markLine">    <span style="color:#0000FF">this</span>.MessageTextBox.Text = <span style="color:#0000FF">string</span>.Empty;</strong>
<strong class="markLine"></strong>
<strong class="markLine">    <span style="color:#0000FF">this</span>.DataList1.DataBind();</strong>
  } }
</code></pre>
<blockquote>
<p><strong>注意：</strong>为了在用户提交页面后处理新的留言簿条目，该处理程序首先调用 <strong>InitializeStorage</strong> 方法以确保用于存储图像的 Blob 容器存在且允许公共访问。您很快就会实现此方法。</p>

<p>然后它获得对 Blob 容器的引用，生成唯一名称并创建一个新 Blob，然后将用户提交的图像上载到此 Blob 中。请注意，该方法会基于用户提交的文件的内容类型初始化 Blob 的 <strong>ContentType</strong> 属性。当留言簿页面从存储中重新读取 Blob 时，响应将返回此内容类型，这样，页面只需要引用 Blob 的 URL，就能显示其中包含的图像。</p>

<p>在此之后，它会创建一个新的 <strong>GuestBookEntry</strong> 实体（也就是在前面任务中定义的实体），使用用户提交的信息将它初始化，然后使用 <strong>GuestBookDataSource</strong> 类通过 WCF 数据服务的 .NET 客户端库将该条目保存到表存储中。</p>

<p>最后，其数据绑定留言簿条目列表，以刷新其内容。</p>
</blockquote></li>
<li><p>使用下面显示的代码更新 <strong>Timer1_Tick</strong> 方法的主体。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 Timer1_Tick</em> - CS）</p>

<!-- mark:6 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">partial</span> <span style="color:#0000FF">class</span> _Default : System.Web.UI.Page { ...
  <span style="color:#0000FF">protected</span> <span style="color:#0000FF">void</span> Timer1_Tick(<span style="color:#0000FF">object</span> sender, EventArgs e) {
<strong class="markLine">     <span style="color:#0000FF">this</span>.DataList1.DataBind();</strong>
  } }
</code></pre>
<blockquote>
<p><strong>注意：</strong>计时器会定期强制页面刷新留言簿条目列表的内容。</p>
</blockquote></li>
<li><p>找到 <strong>Page_Load</strong> 事件处理程序，然后用下面的代码更新其主体，以启用页面刷新计时器。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 Page_Load</em> - CS）</p>

<!-- mark:6-9 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">partial</span> <span style="color:#0000FF">class</span> _Default : System.Web.UI.Page { ...
  <span style="color:#0000FF">protected</span> <span style="color:#0000FF">void</span> Page_Load(<span style="color:#0000FF">object</span> sender, EventArgs e) {
<strong class="markLine">    <span style="color:#0000FF">if</span> (!Page.IsPostBack)</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">      <span style="color:#0000FF">this</span>.Timer1.Enabled = <span style="color:#0000FF">true</span>;</strong>
<strong class="markLine">    }</strong>
  } }
</code></pre></li>
<li><p>使用下面的（突出显示）代码替换 <strong>InitializeStorage</strong> 方法的主体，实施此方法。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 InitializeStorage</em> - CS）</p>

<!-- mark:6-41 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">partial</span> <span style="color:#0000FF">class</span> _Default : System.Web.UI.Page { ...
  <span style="color:#0000FF">private</span> <span style="color:#0000FF">void</span> InitializeStorage() {
<strong class="markLine">    <span style="color:#0000FF">if</span> (storageInitialized)</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">      <span style="color:#0000FF">return</span>;</strong>
<strong class="markLine">    }</strong>
<strong class="markLine"></strong>
<strong class="markLine">    <span style="color:#0000FF">lock</span> (gate)</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">      <span style="color:#0000FF">if</span> (storageInitialized)</strong>
<strong class="markLine">      {</strong>
<strong class="markLine">        <span style="color:#0000FF">return</span>;</strong>
<strong class="markLine">      }</strong>
<strong class="markLine"></strong>
<strong class="markLine">      <span style="color:#0000FF">try</span></strong>
<strong class="markLine">      {</strong>
<strong class="markLine">        <span style="color:#008000">// read account configuration settings</span></strong>
<strong class="markLine">        <span style="color:#0000FF">var</span> storageAccount = CloudStorageAccount.FromConfigurationSetting(<span style="color:#8B0000">&quot;DataConnectionString&quot;</span>);</strong>
<strong class="markLine"></strong>
<strong class="markLine">        <span style="color:#008000">// create blob container for images</span></strong>
<strong class="markLine">        blobStorage = storageAccount.CreateCloudBlobClient();</strong>
<strong class="markLine">        CloudBlobContainer container = blobStorage.GetContainerReference(<span style="color:#8B0000">&quot;guestbookpics&quot;</span>);</strong>
<strong class="markLine">        container.CreateIfNotExist();</strong>
<strong class="markLine"></strong>
<strong class="markLine">        <span style="color:#008000">// configure container for public access</span></strong>
<strong class="markLine">        <span style="color:#0000FF">var</span> permissions = container.GetPermissions();</strong>
<strong class="markLine">        permissions.PublicAccess = BlobContainerPublicAccessType.Container;</strong>
<strong class="markLine">        container.SetPermissions(permissions);</strong>
<strong class="markLine">      }</strong>
<strong class="markLine">      <span style="color:#0000FF">catch</span> (WebException)</strong>
<strong class="markLine">      {</strong>
<strong class="markLine">        <span style="color:#0000FF">throw</span> <span style="color:#0000FF">new</span> WebException(<span style="color:#8B0000">&quot;Storage services initialization failure. &quot;</span></strong>
<strong class="markLine">           + <span style="color:#8B0000">&quot;Check your storage account configuration settings. If running locally, &quot;</span></strong>
<strong class="markLine">           + <span style="color:#8B0000">&quot;ensure that the Development Storage service is running.&quot;</span>);</strong>
<strong class="markLine">      }</strong>
<strong class="markLine"></strong>
<strong class="markLine">      storageInitialized = <span style="color:#0000FF">true</span>;</strong>
<strong class="markLine">    }</strong>
  } }
</code></pre>
<blockquote>
<p><strong>注意：</strong><strong>InitializeStorage</strong> 方法首先确保它只执行一次。它会从 Web 角色配置中读取存储帐户设置，为随每个留言簿条目上载的图像创建一个 Blob 容器，并将它配置为允许公共访问。</p>
</blockquote></li>
<li><p>因为 Web 角色会使用存储服务，所以您需要提供存储帐户设置。要创建新设置，请在<strong>“解决方案资源管理器”</strong>中展开 <strong>GuestBook</strong> 项目中的<strong>“角色”</strong>节点，双击 <strong>GuestBook_WebRole</strong> 打开角色的属性，然后选择<strong>“设置”</strong>选项卡。单击<strong>“添加设置”</strong>，在<strong>“名称”</strong>列中键入 <em>DataConnectionString</em>，将<strong>“类型”</strong>更改为<em>“连接字符串”</em>，然后单击标有省略号的按钮。</p>

<p><img src="Images/configuring-storage-settings.png?raw=true" alt="配置存储帐户设置" title="配置存储帐户设置" />
</p>

<p><em>配置存储帐户设置</em></p></li>
<li><p>在<strong>“创建存储连接字符串”</strong>对话框中，选择<strong>“Windows Azure 存储模拟器”</strong>，然后单击<strong>“确定”</strong>。</p>

<p><img src="Images/connection-string-storage-emulator.png?raw=true" alt="为存储模拟器创建连接字符串" title="为存储模拟器创建连接字符串" />
</p>

<p><em>为存储模拟器创建连接字符串</em></p>
<blockquote>
<p><strong>注意：</strong>对于 Windows Azure Blob、队列和表服务而言，存储帐户是唯一的端点。必须在管理门户中创建存储帐户才能使用这些服务。在此练习中，将使用 Windows Azure SDK 开发环境中包含的存储模拟器来模拟云中提供的 Blob、队列和表服务。如果要构建采用存储服务的云服务，或者要编写调用存储服务的任何外部应用程序，可以通过存储模拟器在本地进行测试。</p>

<p>要使用存储模拟器，请将存储帐户连接字符串中 <strong>UseDevelopmentStorage</strong> 关键字的值设置为 true。将应用程序发布到 Windows Azure 时，需要更新连接字符串，以指定存储帐户设置，包括帐户名称和共享密钥。例如：</p>

<p>&lt;Setting name=&quot;DataConnectionString&quot; value=&quot;DefaultEndpointsProtocol=https;AccountName=YourAccountName;AccountKey=YourAccountKey&quot; /&gt;</p>

<p>其中 <em>YourAccountName</em> 是存储帐户名称，YourAccountKey 是访问密钥。</p>
</blockquote></li>
<li><p>按 <strong>Ctrl+S</strong> 保存对角色配置的更改。</p></li>
<li><p>最后，需要为配置发布程序设置环境。在 <strong>GuestBook_WebRole</strong> 项目中打开 <strong>Global.asax.cs</strong> 文件。</p></li>
<li><p>在文件顶部，插入以下命名空间声明以导入 <strong>Microsoft.WindowsAzure</strong> 和 <strong>Microsoft.WindowsAzure.ServiceRuntime</strong> 命名空间中包含的类型。</p>

<!-- mark:1-2 -->

<span class="codelanguage">C#</span><pre><code class="C#"><strong class="markLine"><span style="color:#0000FF">using</span> Microsoft.WindowsAzure;</strong>
<strong class="markLine"><span style="color:#0000FF">using</span> Microsoft.WindowsAzure.ServiceRuntime;</strong>
</code></pre></li>
<li><p>将以下代码插入 <strong>Application_Start</strong> 方法，替换默认注释。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 SetConfigurationSettingPublisher</em> - CS）</p>

<!-- mark:3-6 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">void</span> Application_Start(<span style="color:#0000FF">object</span> sender, EventArgs e) {
<strong class="markLine">    Microsoft.WindowsAzure.CloudStorageAccount.SetConfigurationSettingPublisher((configName, configSetter) =&gt;</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">      configSetter(RoleEnvironment.GetConfigurationSettingValue(configName));</strong>
<strong class="markLine">    });</strong>
}
</code></pre></li>
</ol>

<p><a name="Ex1Task4"></a></p>

<h4 id="Task_4_-_Queuing_Work_Items_for_Background_Processing">任务 4 - 将工作项进行排队以便后台处理</h4>

<p>为准备下一个练习，现在更新前端 Web 角色，将工作项分派到 Azure 队列以进行后台处理。工作项将保留在队列中，直至添加一个从队列中提取项并为上载的每个图像生成缩略图的辅助角色为止。</p>

<ol>
<li><p>打开 Web 角色项目主页的代码隐藏文件。为此，在<strong>解决方案资源管理器</strong>中右键单击 <strong>Default.aspx</strong> 文件，然后选择<strong>“查看代码”</strong>。</p></li>
<li><p>将以下（突出显示）声明插入 <strong>Default</strong> 类以声明一个队列客户端成员。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 CloudQueueClient member</em> - CS）</p>

<!-- mark:6 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">partial</span> <span style="color:#0000FF">class</span> _Default : System.Web.UI.Page {
  <span style="color:#0000FF">private</span> <span style="color:#0000FF">static</span> <span style="color:#0000FF">bool</span> storageInitialized = <span style="color:#0000FF">false</span>;
  <span style="color:#0000FF">private</span> <span style="color:#0000FF">static</span> <span style="color:#0000FF">object</span> gate = <span style="color:#0000FF">new</span> <span style="color:#0000FF">object</span>();
  <span style="color:#0000FF">private</span> <span style="color:#0000FF">static</span> CloudBlobClient blobStorage;
<strong class="markLine">  <span style="color:#0000FF">private</span> <span style="color:#0000FF">static</span> CloudQueueClient queueStorage;</strong>
  ... }
</code></pre></li>
<li><p>现在，如果不存在队列，则更新存储初始化代码以创建队列，然后初始化上一步中创建的队列引用。为此，找到 <strong>InitializeStorage</strong> 方法并在此方法中紧接在配置 Blob 容器以允许公共访问的代码之后插入以下（突出显示的）代码。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 Create Queue</em> - CS）</p>

<!-- mark:15-18 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">partial</span> <span style="color:#0000FF">class</span> _Default : System.Web.UI.Page { ...
  <span style="color:#0000FF">private</span> <span style="color:#0000FF">void</span> InitializeStorage() { ...
      <span style="color:#0000FF">try</span>
      { ...
        <span style="color:#008000">// configure container for public access</span>
        <span style="color:#0000FF">var</span> permissions = container.GetPermissions(); permissions.PublicAccess = BlobContainerPublicAccessType.Container; container.SetPermissions(permissions);

<strong class="markLine">        <span style="color:#008000">// create queue to communicate with worker role</span></strong>
<strong class="markLine">        queueStorage = storageAccount.CreateCloudQueueClient();</strong>
<strong class="markLine">        CloudQueue queue = queueStorage.GetQueueReference(<span style="color:#8B0000">&quot;guestthumbs&quot;</span>);</strong>
<strong class="markLine">        queue.CreateIfNotExist();</strong>
      }
      <span style="color:#0000FF">catch</span> (WebException) { ... }
</code></pre>
<blockquote>
<p><strong>注意：</strong>更新后的代码会创建一个队列，Web 角色使用该队列向辅助角色提交新工作。</p>
</blockquote></li>
<li><p>最后，添加用于将工作项发布到队列的代码。为此，找到 <strong>SignButton_Click</strong> 事件处理程序，将以下（突出显示的）代码紧接在表存储中创建新条目的代码行之后插入。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex1 Queueing work items</em> - CS）</p>

<!-- mark:12-16 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">protected</span> <span style="color:#0000FF">void</span> SignButton_Click(<span style="color:#0000FF">object</span> sender, EventArgs e) {
  <span style="color:#0000FF">if</span> (FileUpload1.HasFile) { ... 
    <span style="color:#008000">// create a new entry in table storage</span>
    GuestBookEntry entry = <span style="color:#0000FF">new</span> GuestBookEntry() { GuestName = NameTextBox.Text, Message = MessageTextBox.Text, PhotoUrl = blob.Uri.ToString(), ThumbnailUrl = blob.Uri.ToString() }; GuestBookDataSource ds = <span style="color:#0000FF">new</span> GuestBookDataSource(); ds.AddGuestBookEntry(entry); System.Diagnostics.Trace.TraceInformation(<span style="color:#8B0000">&quot;Added entry {0}-{1} in table storage for guest &#39;{2}&#39;&quot;</span>, entry.PartitionKey, entry.RowKey, entry.GuestName);

<strong class="markLine">    <span style="color:#008000">// queue a message to process the image</span></strong>
<strong class="markLine">    <span style="color:#0000FF">var</span> queue = queueStorage.GetQueueReference(<span style="color:#8B0000">&quot;guestthumbs&quot;</span>);</strong>
<strong class="markLine">    <span style="color:#0000FF">var</span> message = <span style="color:#0000FF">new</span> CloudQueueMessage(<span style="color:#0000FF">string</span>.Format(<span style="color:#8B0000">&quot;{0},{1},{2}&quot;</span>, blob.Uri.ToString(), entry.PartitionKey, entry.RowKey));</strong>
<strong class="markLine">    queue.AddMessage(message);</strong>
<strong class="markLine">    System.Diagnostics.Trace.TraceInformation(<span style="color:#8B0000">&quot;Queued message to process blob &#39;{0}&#39;&quot;</span>, uniqueBlobName);</strong>
  } NameTextBox.Text = <span style="color:#0000FF">string</span>.Empty; MessageTextBox.Text = <span style="color:#0000FF">string</span>.Empty; DataList1.DataBind(); }
</code></pre>
<blockquote>
<p><strong>注意：</strong>更新后的代码获取对 <em>guestthumbs</em> 队列的引用。它构建一条新消息，消息由逗号分隔的字符串组成，字符串包含 Blob（包含图像）的名称、分区键和所添加实体的行键。辅助角色可以方便地分析这种格式的消息。然后该方法将消息提交到队列。</p>
</blockquote></li>
</ol>

<p><a name="Ex1Verification"></a></p>

<h4 id="Verification">验证</h4>

<p>Windows Azure 计算模拟器（原来的 Development Fabric 或 devfabric）是一个在您的计算机中开发和测试 Windows Azure 应用程序的模拟环境。在此任务中，将在模拟器中启动 GuestBook 应用程序并创建一个或多个留言簿条目。</p>

<p>在 Windows Azure Tools for Microsoft Visual Studio 中提供的功能中，有一个存储浏览器，可用于连接存储帐户和浏览它包含的 Blob 和表。如果使用的是此版本的 Visual Studio，则将在此任务中使用它来检查应用程序创建的存储资源。</p>

<ol>
<li><p>按 <strong>F5</strong> 执行该服务。该服务将构建并启动本地 Windows Azure 计算模拟器。要显示计算模拟器用户界面，请右键单击其在系统托盘中的图标并选择<strong>“显示计算模拟器用户界面”</strong>。</p>

<p><img src="Images/showing-the-compute-emulator-ui.png?raw=true" alt="显示计算模拟器用户界面" title="显示计算模拟器用户界面" />
</p>

<p><em>显示计算模拟器用户界面</em></p>
<blockquote>
<p><strong>注意：</strong>如果您是首次运行 <strong>Windows Azure 模拟器</strong>，则系统将显示<strong>“Windows 安全警报”</strong>对话框，说明防火墙阻止了某些功能。单击<strong>“允许访问”</strong>以继续。</p>

<p><img src="Images/warning-unblocking-firewall.png?raw=true" alt="取消阻止防火墙" title="取消阻止防火墙" />
</p>

<p><strong>注意：</strong>首次使用存储模拟器时，需要执行一次初始化过程以创建必需的数据库和表。如果是这样，请等待该过程完成，然后检查<strong>“开发存储初始化”</strong>对话框以确保它成功完成。</p>

<p><img src="Images/initialization-process.png?raw=true" alt="存储模拟器初始化过程" title="存储模拟器初始化过程" />
</p>
</blockquote>
<p><em>存储模拟器初始化过程</em></p></li>
<li><p>切换到 Internet Explorer 查看 <strong>GuestBook</strong> 应用程序。</p></li>
<li><p>向留言簿中添加新条目。为此，请键入名称和消息，选择要从 <strong>Pictures\Sample Pictures</strong> 库中上载的图像，然后单击铅笔图标提交条目。</p>

<p><img src="Images/guestbook-home-page.png?raw=true" alt="Windows Azure GuestBook 主页" title="Windows Azure GuestBook 主页" />
</p>

<p><em>Windows Azure GuestBook 主页</em></p>
<blockquote>
<p><strong>注意：</strong>建议选择大的高分辨率图像，因为一旦应用程序完成，guestbook 服务会重新设置所上载图像的大小。</p>
</blockquote>
<p>提交条目后，Web 角色在留言簿表中创建一个新实体，将照片上载到 Blob 存储。该页面包含一个计时器，每 5 秒触发一次页面刷新，因此新条目很快会显示在页面上。最初，新条目包含一个链接，指向包含所上载图像的 Blob，因此它将以初始图像的大小显示。</p>

<p><img src="Images/guestbook-application-uploaded-image.png?raw=true" alt="以初始大小显示所上载图像的 GuestBook 应用程序" title="以初始大小显示所上载图像的 GuestBook 应用程序" />
</p>

<p><em>以初始大小显示所上载图像的 GuestBook 应用程序</em></p>
<blockquote>
<p><strong>注意：</strong>如果您在使用 Visual Studio 2010，则可以使用存储资源管理器直接从 Visual Studio 查看存储资源。在 Visual Studio 2008 中未提供此功能。</p>
</blockquote></li>
<li><p>要在 Visual Studio 2010 中打开存储资源管理器，请打开<strong>“查看”</strong>菜单，选择<strong>“服务器资源管理器”</strong>，然后展开<strong>“Windows Azure 存储节点”</strong>。<strong>“Windows Azure 存储”</strong>节点列出了当前注册的存储帐户，默认情况下，该列表还包含标记为<strong>“(开发)”</strong>的存储模拟器帐户的条目。</p></li>
<li><p>展开<strong>“(开发)”</strong>节点，然后展开其中的<strong>“表”</strong>节点。请注意，其中包含一个应用程序创建的名为 <em>GuestBookEntry</em> 的表，表中包含每个条目的详细信息。</p>

<p><img src="Images/unfolding-storage-emulator-tables.png?raw=true" alt="在存储模拟器中查看表" title="在存储模拟器中查看表" />
</p>

<p><em>在存储模拟器中查看表</em></p></li>
<li><p>在 <strong>Windows Azure 存储</strong>资源管理器中双击 <em>GuestBookEntry</em> 节点以显示此表的内容。<em>GuestBookEntry</em> 表包含此任务前面创建的条目的信息，包括其 <em>GuestName</em>、<em>Message</em>、<em>PhotoUrl</em> 和 <em>ThumbnailUrl</em> 属性，以及所有表存储实体都有的 <em>PartitionKey</em>、<em>RowKey</em> 和 <em>Timestamp</em> 属性。请注意，<em>PhotoUrl</em> 和 <em>ThumbnailUrl</em> 属性目前是相同的。在下一个练习中，将修改该应用程序，以生成图像缩略图并更新相应的 URL。</p>

<p><img src="Images/storage-emulator-tables.png?raw=true" alt="在存储模拟器中查看表" title="在 Windows Azure 存储模拟器中查看表" />
</p>

<p><em>在存储模拟器中查看表</em></p></li>
<li><p>现在，在 <strong>Windows Azure 存储</strong>资源管理器中展开 <strong>Blob</strong> 节点。在此节点内，有一个名为 <em>guestbookpics</em> 的容器条目，它包含的 Blob 具有应用程序所上载图像的原始数据。</p>

<p><img src="Images/viewing-blobs.png?raw=true" alt="使用 Windows Azure Tools for Visual Studio 查看 Blob" title="使用 Windows Azure Tools for Visual Studio 查看 Blob" />
</p>

<p><em>使用 Windows Azure Tools for Visual Studio 查看 Blob</em></p></li>
<li><p>双击 <em>guestbookpics</em> 容器的节点可列出它包含的 Blob。它应该包括之前上载的图像的条目</p>

<p><img src="Images/viewing-blob-contents.png?raw=true" alt="在 Visual Studio 中查看 Blob 容器的内容" title="在 Visual Studio 中查看 Blob 容器的内容" />
</p>

<p><em>在 Visual Studio 中查看 Blob 容器的内容</em></p></li>
<li><p>Blob 存储中每个 Blob 都有一个相关联的内容类型，Visual Studio 使用该类型来选择适合 Blob 的查看器。要显示 Blob 的内容，请双击容器列表中相应的条目以显示图像。</p>

<p><img src="Images/viewing-blob-contents-2.png?raw=true" alt="在 Visual Studio 中查看 Blob 内容" title="在 Visual Studio 中查看 Blob 内容" />
</p>

<p><em>在 Visual Studio 中查看 Blob 内容</em></p></li>
<li><p>按 <strong>Shift+F5</strong> 停止调试程序并关闭 Development Fabric 中的部署。</p></li>
</ol>

<p><a name="Exercise2"></a></p>

<h3 id="Exercise_2_Background_Processing_with_Worker_Roles_and_Queues">练习 2：使用辅助角色和队列进行后台处理</h3>

<p>辅助角色在后台运行，以提供服务或执行时间相关的任务，如服务进程。在此练习中，将创建一个辅助角色来读取 Web 角色前端发布到队列的工作项。为处理工作项，辅助角色从消息中提取有关留言簿的信息，然后从表存储中检索相应的实体。然后它将从 Blob 存储获取相关联的图像，创建其缩略图，还将缩略图存储为一个 Blob。最后，它将在留言簿条目中更新所生成缩略图 Blob 的 URL 以完成处理。</p>

<p><a name="Ex2Task1"></a></p>

<h4 id="Task_1_-_Creating_a_Worker_Role_to_Process_Images_in_the_Background">任务 1 - 创建辅助角色以在后台处理图像</h4>

<p>在此任务中，将在解决方案中添加一个辅助角色项目，并更新该项目，使之能够从队列中读取前端发布的项并进行处理。</p>

<ol>
<li><p>如果尚未打开，则通过从<strong>“开始”|“所有程序”|“Microsoft Visual Studio 2010”</strong>中右键单击 <strong>Microsoft Visual Studio 2010</strong> 快捷方式，然后选择<strong>“以管理员身份运行”</strong>，以管理员身份启动 Visual Studio。</p></li>
<li><p>在<strong>“文件”</strong>菜单中，选择<strong>“打开”</strong>，然后选择<strong>“项目/解决方案”</strong>。在<strong>“打开项目”</strong>对话框中，浏览至 <strong>\Source\Ex2-UsingWorkerRolesAndQueues\Begin</strong>，选择 <strong>Begin.sln</strong>，然后单击<strong>“打开”</strong>。或者，也可以继续使用在完成前一个练习后得到的解决方案。</p></li>
<li><p>在<strong>“解决方案资源管理器”</strong>中，右键单击 <strong>GuestBook</strong> 项目中的“角色”节点，指向<strong>“添加”</strong>，然后选择<strong>“新建辅助角色项目”</strong>。</p></li>
<li><p>在<strong>“添加新角色项目”</strong>对话框中选择<strong>“辅助角色”</strong>类别，然后选择<strong>“辅助角色”</strong>模板。将辅助角色名称设置为 <strong>GuestBook_WorkerRole</strong>，然后单击<strong>“添加”</strong>。</p>

<p><img src="Images/adding-worker-role.png?raw=true" alt="向解决方案中添加辅助角色项目" title="向解决方案中添加辅助角色项目" />
</p>

<p><em>向解决方案中添加辅助角色项目</em></p></li>
<li><p>在新辅助角色项目中，添加对数据模型项目的引用。在<strong>“解决方案资源管理器”</strong>中，右键单击 <strong>GuestBook_WorkerRole</strong> 项目，选择<strong>“添加引用”</strong>，切换到<strong>“项目”</strong>选项卡，选择 <strong>GuestBook_Data</strong> 项目，然后单击<strong>“确定”</strong>。</p></li>
<li><p>接下来，添加对 <strong>System.Drawing</strong> 程序集的引用，但这次在“添加引用”对话框中切换到 <strong>.NET</strong> 选项卡，选择 <strong>System.Drawing</strong> 组件，然后单击<strong>“确定”</strong>。</p></li>
<li><p>现在打开 <strong>GuestBook_WorkerRole</strong> 项目的 <strong>WorkerRole.cs</strong> 文件并插入以下命名空间声明。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex2 WorkerRole Namespaces</em> - CS）</p>

<!-- mark:1-5 -->

<span class="codelanguage">C#</span><pre><code class="C#"><strong class="markLine"><span style="color:#0000FF">using</span> System.Drawing;</strong>
<strong class="markLine"><span style="color:#0000FF">using</span> System.Drawing.Drawing2D;</strong>
<strong class="markLine"><span style="color:#0000FF">using</span> System.Drawing.Imaging;</strong>
<strong class="markLine"><span style="color:#0000FF">using</span> System.IO;</strong>
<strong class="markLine"><span style="color:#0000FF">using</span> GuestBook_Data;</strong>
</code></pre></li>
<li><p>将 Blob 容器和队列的成员字段添加到 <strong>WorkerRole</strong> 类，如下所示。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex2 WorkerRole Fields</em> - CS）</p>

<!-- mark:3-4 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> WorkerRole : RoleEntryPoint {
<strong class="markLine">   <span style="color:#0000FF">private</span> CloudQueue queue;</strong>
<strong class="markLine">   <span style="color:#0000FF">private</span> CloudBlobContainer container;</strong>
  ... }
</code></pre></li>
<li><p>在 <strong>OnStart</strong> 方法的主体中，紧接在订阅 <strong>RoleEnvironmentChanging</strong> 事件的代码行之后和对基类中 <strong>OnStart</strong> 方法的调用之前插入以下代码。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex2 WorkerRole OnStart</em> - CS）</p>

<!-- mark:9-58 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> WorkerRole : RoleEntryPoint { ...
  <span style="color:#0000FF">public</span> <span style="color:#0000FF">override</span> <span style="color:#0000FF">bool</span> OnStart() {
    <span style="color:#008000">// Set the maximum number of concurrent connections </span>
    ServicePointManager.DefaultConnectionLimit = 12;

<strong class="markLine">    <span style="color:#008000">// read storage account configuration settings</span></strong>
<strong class="markLine">    CloudStorageAccount.SetConfigurationSettingPublisher((configName, configSetter) =&gt;</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">      configSetter(RoleEnvironment.GetConfigurationSettingValue(configName));</strong>
<strong class="markLine">    });</strong>
<strong class="markLine">    <span style="color:#0000FF">var</span> storageAccount = CloudStorageAccount.FromConfigurationSetting(<span style="color:#8B0000">&quot;DataConnectionString&quot;</span>);</strong>
<strong class="markLine"></strong>
<strong class="markLine">    <span style="color:#008000">// initialize blob storage</span></strong>
<strong class="markLine">    CloudBlobClient blobStorage = storageAccount.CreateCloudBlobClient();</strong>
<strong class="markLine">    <span style="color:#0000FF">this</span>.container = blobStorage.GetContainerReference(<span style="color:#8B0000">&quot;guestbookpics&quot;</span>);</strong>
<strong class="markLine"></strong>
<strong class="markLine">    <span style="color:#008000">// initialize queue storage </span></strong>
<strong class="markLine">    CloudQueueClient queueStorage = storageAccount.CreateCloudQueueClient();</strong>
<strong class="markLine">    <span style="color:#0000FF">this</span>.queue = queueStorage.GetQueueReference(<span style="color:#8B0000">&quot;guestthumbs&quot;</span>);</strong>
<strong class="markLine"></strong>
<strong class="markLine">    Trace.TraceInformation(<span style="color:#8B0000">&quot;Creating container and queue...&quot;</span>);</strong>
<strong class="markLine"></strong>
<strong class="markLine">    <span style="color:#0000FF">bool</span> storageInitialized = <span style="color:#0000FF">false</span>;</strong>
<strong class="markLine">    <span style="color:#0000FF">while</span> (!storageInitialized)</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">       <span style="color:#0000FF">try</span></strong>
<strong class="markLine">       {</strong>
<strong class="markLine">          <span style="color:#008000">// create the blob container and allow public access</span></strong>
<strong class="markLine">          <span style="color:#0000FF">this</span>.container.CreateIfNotExist();</strong>
<strong class="markLine">          <span style="color:#0000FF">var</span> permissions = <span style="color:#0000FF">this</span>.container.GetPermissions();</strong>
<strong class="markLine">          permissions.PublicAccess = BlobContainerPublicAccessType.Container;</strong>
<strong class="markLine">          <span style="color:#0000FF">this</span>.container.SetPermissions(permissions);</strong>
<strong class="markLine"></strong>
<strong class="markLine">          <span style="color:#008000">// create the message queue(s)</span></strong>
<strong class="markLine">          <span style="color:#0000FF">this</span>.queue.CreateIfNotExist();</strong>
<strong class="markLine"></strong>
<strong class="markLine">          storageInitialized = <span style="color:#0000FF">true</span>;</strong>
<strong class="markLine">      }</strong>
<strong class="markLine">      <span style="color:#0000FF">catch</span> (StorageClientException e)</strong>
<strong class="markLine">      {</strong>
<strong class="markLine">         <span style="color:#0000FF">if</span> (e.ErrorCode == StorageErrorCode.TransportError)</strong>
<strong class="markLine">         {</strong>
<strong class="markLine">              Trace.TraceError(</strong>
<strong class="markLine">                <span style="color:#8B0000">&quot;Storage services initialization failure. &quot;</span></strong>
<strong class="markLine">              + <span style="color:#8B0000">&quot;Check your storage account configuration settings. If running locally, &quot;</span></strong>
<strong class="markLine">              + <span style="color:#8B0000">&quot;ensure that the Development Storage service is running. Message: &#39;{0}&#39;&quot;</span>,</strong>
<strong class="markLine">              e.Message);</strong>
<strong class="markLine">              System.Threading.Thread.Sleep(5000);</strong>
<strong class="markLine">            }</strong>
<strong class="markLine">            <span style="color:#0000FF">else</span></strong>
<strong class="markLine">            {</strong>
<strong class="markLine">               <span style="color:#0000FF">throw</span>;</strong>
<strong class="markLine">            }</strong>
<strong class="markLine">         }</strong>
<strong class="markLine">       }</strong>

       <span style="color:#0000FF">return</span> <span style="color:#0000FF">base</span>.OnStart(); } ... }
</code></pre></li>
<li><p>使用下面显示的代码替换 <strong>Run</strong> 方法的主体。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex2 WorkerRole Run</em> - CS）</p>

<!-- mark:6-58 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> WorkerRole : RoleEntryPoint { ...
  <span style="color:#0000FF">public</span> <span style="color:#0000FF">override</span> <span style="color:#0000FF">void</span> Run() {
<strong class="markLine">    Trace.TraceInformation(<span style="color:#8B0000">&quot;Listening for queue messages...&quot;</span>);</strong>
<strong class="markLine"></strong>
<strong class="markLine">    <span style="color:#0000FF">while</span> (<span style="color:#0000FF">true</span>)</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">      <span style="color:#0000FF">try</span></strong>
<strong class="markLine">      {</strong>
<strong class="markLine">        <span style="color:#008000">// retrieve a new message from the queue</span></strong>
<strong class="markLine">        CloudQueueMessage msg = <span style="color:#0000FF">this</span>.queue.GetMessage();</strong>
<strong class="markLine">        <span style="color:#0000FF">if</span> (msg != <span style="color:#0000FF">null</span>)</strong>
<strong class="markLine">        {</strong>
<strong class="markLine">          <span style="color:#008000">// parse message retrieved from queue</span></strong>
<strong class="markLine">          <span style="color:#0000FF">var</span> messageParts = msg.AsString.Split(<span style="color:#0000FF">new</span> <span style="color:#0000FF">char</span>[] { &#39;,&#39; });</strong>
<strong class="markLine">          <span style="color:#0000FF">var</span> imageBlobUri = messageParts[0];</strong>
<strong class="markLine">          <span style="color:#0000FF">var</span> partitionKey = messageParts[1];</strong>
<strong class="markLine">          <span style="color:#0000FF">var</span> rowkey = messageParts[2];</strong>
<strong class="markLine">          Trace.TraceInformation(<span style="color:#8B0000">&quot;Processing image in blob &#39;{0}&#39;.&quot;</span>, imageBlobUri);</strong>
<strong class="markLine"></strong>
<strong class="markLine">          <span style="color:#0000FF">string</span> thumbnailBlobUri = System.Text.RegularExpressions.Regex.Replace(imageBlobUri, <span style="color:#8B0000">&quot;([^\\.]+)(\\.[^\\.]+)?$&quot;</span>, <span style="color:#8B0000">&quot;$1-thumb$2&quot;</span>);</strong>
<strong class="markLine"></strong>
<strong class="markLine">          CloudBlob inputBlob = <span style="color:#0000FF">this</span>.container.GetBlobReference(imageBlobUri);</strong>
<strong class="markLine">          CloudBlob outputBlob = <span style="color:#0000FF">this</span>.container.GetBlobReference(thumbnailBlobUri);</strong>
<strong class="markLine"></strong>
<strong class="markLine">          <span style="color:#0000FF">using</span> (BlobStream input = inputBlob.OpenRead())</strong>
<strong class="markLine">          <span style="color:#0000FF">using</span> (BlobStream output = outputBlob.OpenWrite())</strong>
<strong class="markLine">          {</strong>
<strong class="markLine">            <span style="color:#0000FF">this</span>.ProcessImage(input, output);</strong>
<strong class="markLine"></strong>
<strong class="markLine">            <span style="color:#008000">// commit the blob and set its properties</span></strong>
<strong class="markLine">            output.Commit();</strong>
<strong class="markLine">            outputBlob.Properties.ContentType = <span style="color:#8B0000">&quot;image/jpeg&quot;</span>;</strong>
<strong class="markLine">            outputBlob.SetProperties();</strong>
<strong class="markLine"></strong>
<strong class="markLine">            <span style="color:#008000">// update the entry in table storage to point to the thumbnail</span></strong>
<strong class="markLine">            GuestBookDataSource ds = <span style="color:#0000FF">new</span> GuestBookDataSource();</strong>
<strong class="markLine">            ds.UpdateImageThumbnail(partitionKey, rowkey, thumbnailBlobUri);</strong>
<strong class="markLine"></strong>
<strong class="markLine">            <span style="color:#008000">// remove message from queue</span></strong>
<strong class="markLine">            <span style="color:#0000FF">this</span>.queue.DeleteMessage(msg);</strong>
<strong class="markLine"></strong>
<strong class="markLine">            Trace.TraceInformation(<span style="color:#8B0000">&quot;Generated thumbnail in blob &#39;{0}&#39;.&quot;</span>, thumbnailBlobUri);</strong>
<strong class="markLine">          }</strong>
<strong class="markLine">        }</strong>
<strong class="markLine">        <span style="color:#0000FF">else</span></strong>
<strong class="markLine">        {</strong>
<strong class="markLine">          System.Threading.Thread.Sleep(1000);</strong>
<strong class="markLine">        }</strong>
<strong class="markLine">      }</strong>
<strong class="markLine">      <span style="color:#0000FF">catch</span> (StorageClientException e)</strong>
<strong class="markLine">      {</strong>
<strong class="markLine">        Trace.TraceError(<span style="color:#8B0000">&quot;Exception when processing queue item. Message: &#39;{0}&#39;&quot;</span>, e.Message);</strong>
<strong class="markLine">        System.Threading.Thread.Sleep(5000);</strong>
<strong class="markLine">      }</strong>
<strong class="markLine">    }</strong>
  } ... }
</code></pre></li>
<li><p>最后，向 <strong>WorkerRole</strong> 类中添加以下方法，以基于给定图像创建缩略图。</p>

<p>（代码段 - <em>Introduction to Cloud Services - Ex2 ProcessImage</em> - CS）</p>

<!-- mark:4-44 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> WorkerRole : RoleEntryPoint { ...
<strong class="markLine">  <span style="color:#0000FF">public</span> <span style="color:#0000FF">void</span> ProcessImage(Stream input, Stream output)</strong>
<strong class="markLine">  {</strong>
<strong class="markLine">    <span style="color:#0000FF">int</span> width;</strong>
<strong class="markLine">    <span style="color:#0000FF">int</span> height;</strong>
<strong class="markLine">    <span style="color:#0000FF">var</span> originalImage = <span style="color:#0000FF">new</span> Bitmap(input);</strong>
<strong class="markLine"></strong>
<strong class="markLine">    <span style="color:#0000FF">if</span> (originalImage.Width &gt; originalImage.Height)</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">      width = 128;</strong>
<strong class="markLine">      height = 128 * originalImage.Height / originalImage.Width;</strong>
<strong class="markLine">    }</strong>
<strong class="markLine">    <span style="color:#0000FF">else</span></strong>
<strong class="markLine">    {</strong>
<strong class="markLine">      height = 128;</strong>
<strong class="markLine">      width = 128 * originalImage.Width / originalImage.Height;</strong>
<strong class="markLine">    }</strong>
<strong class="markLine"></strong>
<strong class="markLine">    Bitmap thumbnailImage = <span style="color:#0000FF">null</span>;</strong>
<strong class="markLine"></strong>
<strong class="markLine">    <span style="color:#0000FF">try</span></strong>
<strong class="markLine">    {</strong>
<strong class="markLine">      thumbnailImage = <span style="color:#0000FF">new</span> Bitmap(width, height);</strong>
<strong class="markLine"></strong>
<strong class="markLine">      <span style="color:#0000FF">using</span> (Graphics graphics = Graphics.FromImage(thumbnailImage))</strong>
<strong class="markLine">      {</strong>
<strong class="markLine">          graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;</strong>
<strong class="markLine">          graphics.SmoothingMode = SmoothingMode.AntiAlias;</strong>
<strong class="markLine">          graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;</strong>
<strong class="markLine">          graphics.DrawImage(originalImage, 0, 0, width, height);</strong>
<strong class="markLine">      }</strong>
<strong class="markLine"></strong>
<strong class="markLine">      thumbnailImage.Save(output, ImageFormat.Jpeg);</strong>
<strong class="markLine">    }</strong>
<strong class="markLine">    <span style="color:#0000FF">finally</span></strong>
<strong class="markLine">    {</strong>
<strong class="markLine">      <span style="color:#0000FF">if</span> (thumbnailImage != <span style="color:#0000FF">null</span>)</strong>
<strong class="markLine">      {</strong>
<strong class="markLine">          thumbnailImage.Dispose();</strong>
<strong class="markLine">      }</strong>
<strong class="markLine">    }</strong>
<strong class="markLine">  }</strong>
}
</code></pre>
<blockquote>
<p><strong>注意：</strong>即使上面显示的代码为简单起见使用了 System.Drawing 命名空间中的类，您还是应该知道，此命名空间中的类设计用于 Windows 窗体。不支持在 Windows 或 ASP.NET 服务中使用。如果要在自己的 Windows Azure 应用程序中使用这些类，应进行穷举测试。</p>
</blockquote></li>
<li><p>辅助角色也使用存储服务，您需要像对 Web 角色那样配置存储帐户设置。要创建存储帐户设置，请在<strong>解决方案资源管理器</strong>中展开 <strong>GuestBook</strong> 项目的<strong>“角色”</strong>节点，双击 <strong>GuestBook_WorkerRole</strong> 打开角色的属性，并选择<strong>“设置”</strong>选项卡。单击<strong>“添加设置”</strong>，在<strong>“名称”</strong>列中键入 <em>DataConnectionString</em>，将<strong>“类型”</strong>更改为<em>“连接字符串”</em>，然后单击标有省略号的按钮。在<strong>“创建存储连接字符串”</strong>对话框中，选择<strong>“使用 Windows Azure 存储模拟器”</strong>选项，然后单击<strong>“确定”</strong>。按 <strong>Ctrl+S</strong> 保存更改。</p></li>
</ol>

<p><a name="Ex2Verification"></a></p>

<h4 id="Verification">验证</h4>

<p>现在要在 Windows Azure 计算模拟器中启动已更新的应用程序，验证辅助角色能够检索队列中的工作项并生成相应的缩略图。</p>

<ol>
<li><p>按 <strong>F5</strong> 在本地计算模拟器中启动该服务。</p></li>
<li><p>切换到 Internet Explorer 以查看应用程序。如果已成功完成上一个练习的验证部分，可以看到输入的留言簿条目，包括以初始大小显示的已上载图像。回想一下，在该练习中的最后一个任务中，您更新了 Web 角色代码以针对提交的每个新条目向队列中发布一个工作项。这些消息一直保留在队列中，即使 Web 角色后来被回收也是如此。</p></li>
<li><p>等待几秒钟时间，直至辅助角色选择队列中的消息并处理您要查看的图像。这时，它为此图像生成一个缩略图并在表存储中更新条目对应的 URL 属性。最后，因为页面每几秒钟会刷新一次，它会显示缩略图。</p>

<p><img src="Images/guestbook-thumbnail.png?raw=true" alt="显示辅助角色生成的缩略图的主页" title="显示辅助角色生成的缩略图的主页" />
</p>

<p><em>显示辅助角色生成的缩略图的主页</em></p></li>
<li><p>如果您在使用 Visual Studio 2010，则在<strong>“服务器资源管理器”</strong>中，展开<strong>“Windows Azure 存储”</strong>节点中的 <strong>Blob</strong> 节点，然后双击 <em>guestbookpics</em> 容器。请注意，它现在又包含了一个所生成缩略图的 Blob。</p>

<p><img src="Images/thumbnail-blob.png?raw=true" alt="显示所生成缩略图的 Blob 的 Blob 容器" title="显示所生成缩略图的 Blob 的 Blob 容器" />
</p>

<p><em>显示所生成缩略图的 Blob 的 Blob 容器</em></p></li>
<li><p>添加更多留言簿条目。请注意，这些图像将在辅助角色处理缩略图几秒后更新。</p></li>
<li><p>按 <strong>Shift+F5</strong> 停止调试程序并关闭计算模拟器中的部署。</p></li>
</ol>

<p><a name="Exercise3"></a></p>

<h3 id="Exercise_3_Publishing_a_Windows_Azure_Application">练习 3：发布 Windows Azure 应用程序</h3>

<p>在此练习中，将使用管理门户将在前面练习中创建的应用程序发布到 Windows Azure。首先，需要配置必要的服务组件，将应用程序包上传到过渡区域并进行配置。然后，需要在过渡区域中执行应用程序以验证其操作。最后，将应用程序提升到生产环境。</p>
<blockquote>
<p><strong>注意：</strong>为了完成此练习，您需要注册 Windows Azure 帐户并购买订阅。有关配置过程的说明，请参阅<a href="http://blogs.msdn.com/david_sayed/archive/2010/01/07/provisioning-windows-azure.aspx">配置 Windows Azure</a>。</p>
</blockquote>
<p><a name="Ex3Task1"></a></p>

<h4 id="Task_1_-_Creating_a_Storage_Account_and_a_Cloud_Service_Component">任务 1 - 创建存储帐户和云服务组件</h4>

<p>在此练习中发布的应用程序需要计算和存储服务。在此任务中，将创建一个新的 Windows Azure 地缘组用于驻留服务。此外，还将创建一个新存储帐户（供应用程序保存其数据）和一个云服务组件（执行应用程序代码）。</p>

<ol>
<li><p>使用 Web 浏览器浏览 <a href="https://manage.windowsazure.com"><a href="https://manage.windowsazure.com">https://manage.windowsazure.com</a></a>，然后使用与您的 Windows Azure 帐户关联的 Microsoft 帐户进行登录。</p>

<p><img src="Images/sign-in.png?raw=true" alt="登录 Windows Azure 管理门户" title="登录 Windows Azure 管理门户" />
</p>

<p><em>登录 Windows Azure 管理门户</em></p></li>
<li><p>首先，创建一个将在其中部署服务的地缘组。在 Windows Azure 菜单中，单击<strong>“网络”</strong>。</p>

<p><img src="Images/networks.png?raw=true" alt="网络" title="网络" />
</p>

<p><em>选择“网络”</em></p></li>
<li><p>在“网络”顶部菜单中，单击<strong>“地缘组”</strong>。</p>

<p><img src="Images/affinity-groups.png?raw=true" alt="“网络”页面" title="“网络”页面" />
</p>

<p><em>“网络”页面</em></p></li>
<li><p>将列出您的地缘组。在底部窗格中，单击<strong>“创建”</strong>。</p>

<p><img src="Images/create-affinity-group.png?raw=true" alt="创建地缘组" title="创建地缘组" />
</p>

<p><em>创建地缘组</em></p></li>
<li><p>在<strong>“指定地缘组详细信息”</strong>对话框中，为新组输入名称、说明和区域。</p>

<p><img src="Images/affinity-group-details.png?raw=true" alt="地缘组详细信息" title="地缘组详细信息" />
</p>

<p><em>地缘组详细信息</em></p></li>
<li><p>接下来，创建一个供应用程序存储其数据的存储帐户。在 Windows Azure 底部窗格中，单击<strong>“新建”</strong>。</p>

<p><img src="Images/new-azure.png?raw=true" alt="新建 Azure 服务" title="新建 Azure 服务" />
</p>

<p><em>新建 Azure 服务</em></p></li>
<li><p>在<strong>“新建”</strong>对话框中，单击<strong>“存储”</strong>，然后选择<strong>“快速创建”</strong>选项。</p>

<p><img src="Images/new-storage-account.png?raw=true" alt="创建新存储" title="创建新存储" />
</p>

<p><em>创建新存储</em></p></li>
<li><p>在标有<strong>“输入 URL”</strong>的文本框中，输入存储帐户的名称，例如 <strong>&lt;yourname&gt;guestbook</strong>，其中 <em>&lt;yourname&gt;</em> 是唯一名称。Windows Azure 使用该值生成存储帐户服务的端点 URL。然后，选择标有<strong>“区域/地缘组”</strong>的下拉列表，选择在上一步中创建的地缘组。</p>

<p><img src="Images/create-storage-account-url.png?raw=true" alt="选择新存储帐户的 URL" title="选择新存储帐户的 URL" />
</p>

<p><em>选择新存储帐户的 URL</em></p>
<blockquote>
<p><strong>注意：</strong>门户会检验名称是否遵循命名规则和当前是否可用，以确保名称有效。如果输入的名称不合规则，系统将显示验证错误。</p>

<p><img src="Images/warning-name-verification.png?raw=true" alt="名称验证" title="名称验证" />
</p>

<p>此外，您可以选择地缘组的原因是可以将云服务和存储帐户部署在同一个位置，以确保应用程序与其所需数据之间实现高带宽和低延迟。</p>
</blockquote></li>
<li><p>在<strong>“创建存储帐户”</strong>对话框中，单击<strong>“创建存储帐户”</strong>注册新存储。等待配置过程完成，然后更新<strong>“存储”</strong>列表视图。</p></li>
<li><p>在列表视图中，单击新存储的名称。</p>

<p><img src="Images/select-storage-account.png?raw=true" alt="选择存储帐户" title="选择存储帐户" />
</p>

<p><em>选择存储</em></p></li>
<li><p>在仪表板页面上单击<strong>“管理密钥”</strong>。</p>

<p><img src="Images/view-keys.png?raw=true" alt="管理密钥" title="查看密钥" />
</p>

<p><em>管理密钥</em></p></li>
<li><p>在<strong>“管理访问密钥”</strong>对话框中，选择并复制主密钥。</p>

<p><img src="Images/manage-access-keys.png?raw=true" alt="主和辅助访问密钥 " title="主和辅助访问密钥" />
</p>

<p><em>主和辅助访问密钥</em></p>
<blockquote>
<p><strong>注意：</strong><strong>主访问密钥</strong>和<strong>辅助访问密钥</strong>都提供可用于访问存储的共享密钥。辅助密钥提供与主密钥相同的访问权限，旨在用作备份。在任一密钥泄露时，可独立地重新生成每个密钥。</p>
</blockquote></li>
<li><p>接下来，创建用于执行应用程序代码的云服务。依次单击<strong>“新建”</strong>、<strong>“云服务”</strong>和<strong>“快速创建”</strong>。</p>

<p><img src="Images/creating-a-new-cloud-service.png?raw=true" alt="创建新的云服务" title="创建新的云服务" />
</p>

<p><em>创建新的云服务</em></p></li>
<li><p>在<strong>“新建云服务”</strong>对话框中，在标有 <strong>URL</strong> 的文本框中输入服务名称的 URL，例如 <strong>&lt;yourname&gt;guestbook</strong>，其中 <em>&lt;yourname&gt;</em> 是唯一名称。选择用于存储帐户的地缘组。</p>

<p><img src="Images/new-cloud-service-url.png?raw=true" alt="新云服务 URL 和区域/地缘组" title="新云服务 URL 和地缘组" />
</p>

<p><em>新云服务 URL 和区域/地缘组。</em></p>
<blockquote>
<p><strong>注意：</strong>请尽量为存储帐户和云服务选择相同名称。但是，如果所选名称不可用，则可能需要选择不同名称。</p>

<p>门户会检验名称是否遵循命名规则和当前是否可用，以确保名称有效。如果输入的名称不合规则，系统将显示验证错误。</p>
</blockquote></li>
<li><p>选择标有<strong>“区域/地缘组”</strong>的下拉列表，然后选择之前定义的地缘组。</p>
<blockquote>
<p><strong>注意：</strong>为两个服务选择相同地缘组，可以确保将云服务部署到与之前配置的存储帐户相同的位置。</p>
</blockquote></li>
<li><p>单击<strong>“创建云服务”</strong>以创建云服务，然后等待配置过程完成。</p></li>
<li><p>不要关闭浏览器窗口。您将使用门户执行下一个任务。</p></li>
</ol>

<p><a name="Ex3Task2"></a></p>

<h4 id="Task_2_-_Publishing_the_Application_to_the_Windows_Azure_Management_Portal">任务 2 - 将应用程序发布至 Windows Azure 管理门户</h4>

<p>将应用程序发布至 Windows Azure 有几种选择。您可以通过 Windows Azure Tools for Visual Studio 将服务包直接从 Visual Studio 发布到 Windows Azure 环境中。另一个部署方法是使用 <a href="http://msdn.microsoft.com/zh-CN/library/windowsazure/jj156055">Windows Azure Service Management PowerShell Cmdlet</a>，它们支持以脚本方式部署应用程序。最后，Windows Azure 管理门户提供了一些方法，只使用浏览器就可发布和管理服务。有关发布应用程序的详细信息，请参阅此培训包中的 <strong>Windows Azure 部署</strong>实验。</p>

<p>在此任务中，将使用管理门户将应用程序发布到过渡环境，但首先要使用 Visual Studio 生成服务包。</p>

<ol>
<li><p>如果尚未打开，则通过从<strong>“开始”|“所有程序”|“Microsoft Visual Studio 2010”</strong>中右键单击 <strong>Microsoft Visual Studio 2010</strong> 快捷方式，然后选择<strong>“以管理员身份运行”</strong>，以管理员身份启动 Visual Studio。</p></li>
<li><p>如果显示<strong>“用户帐户控制”</strong>对话框，请单击<strong>“继续”</strong>。</p></li>
<li><p>在<strong>“文件”</strong>菜单中，选择<strong>“打开”</strong>，然后选择<strong>“项目/解决方案”</strong>。在<strong>“打开项目”</strong>对话框中，浏览到 <strong>\Source\Ex3-WindowsAzureDeployment</strong>。在 <strong>Begin</strong> 文件夹中选择 <strong>Begin.sln</strong>，然后单击<strong>“打开”</strong>。或者，也可以继续使用在完成前一个练习后得到的解决方案。</p></li>
<li><p>要在发布服务前配置存储，请打开将用来发布项目（例如 <strong>ServiceConfiguration.Cloud.cscfg</strong>）的 <strong>ServiceConfiguration.cscfg</strong> 文件，该文件位于 <strong>GuestBook</strong> 服务中。将标记为 <em>[YOUR_ACCOUNT_NAME]</em> 的占位符替换为在任务 1 中配置存储帐户时选择的<strong>存储帐户名称</strong>。如果已按照建议操作，则该名称应该遵循 <strong><em>&lt;yourname&gt;guestbook</em></strong> 这一模式，其中 <em>&lt;yourname&gt;</em> 是唯一名称。该占位符出现在两处：一处在 <em>DataConnectionString</em> 下，一处在 <em>Microsoft.WindowsAzure.Plugins.Diagnostics.ConnectionString</em> 下，两个都要替换，请勿遗漏。</p>
<blockquote>
<p><strong>注意：</strong>如果继续使用前面练习中获得的解决方案，则需要更改 <strong>DataConnectionString</strong> 和 <strong>Microsoft.WindowsAzure.Plugins.Diagnostics.ConnectionString</strong> 值。用以下内容替换它们的值：</p>

<p>DefaultEndpointsProtocol=https;AccountName=[YOUR_ACCOUNT_NAME];AccountKey=[YOUR_ACCOUNT_KEY]</p>

<p>然后使用<strong>“存储帐户名称”</strong>和<strong>“主访问密钥”</strong>替换这些占位符。</p>
</blockquote></li>
<li><p>接下来，将标记为 <em>[YOUR_ACCOUNT_KEY]</em> 的占位符替换为在任务 1 中创建存储帐户时记下的<strong>主访问密钥</strong>值。该占位符同样出现在两处（用于不同的连接字符串），两个都要替换，请勿遗漏。</p>

<p><img src="Images/configuring-storage-account-connection.png?raw=true" alt="配置存储连接字符串" title="配置存储连接字符串" />
</p>

<p><em>配置存储连接字符串</em></p></li>
<li><p>生成要发布到云的软件包。为此，右键单击 <strong>GuestBook</strong> 云项目并选择<strong>“打包”</strong>。在<strong>“打包 Windows Azure 应用程序”</strong>对话框中，从下拉列表中选择将使用的<strong>“服务配置”</strong>和<strong>“生成配置”</strong>，然后单击<strong>“打包”</strong>。在 Visual Studio 生成项目并生成服务包之后，Windows 资源管理器打开，当前文件夹设置为所生成软件包的存储位置。</p>

<p><img src="Images/creating-a-service-package.png?raw=true" alt="在 Visual Studio 中创建服务包" title="在 Visual Studio 中创建服务包" />
</p>

<p><em>在 Visual Studio 中创建服务包</em></p>
<blockquote>
<p><strong>注意：</strong>尽管此处并未显示具体过程，您还是可以使用 Windows Azure Tools 中的发布云服务功能直接从 Visual Studio 发布服务包。要使用此功能，需要配置一组凭据，从而通过上载到管理门户的自行颁发证书对管理服务访问进行身份验证。</p>
</blockquote></li>
<li><p>现在，切换回浏览器窗口和管理门户。</p></li>
<li><p>在云服务列表中，单击在先前的步骤中创建的云服务的名称。</p>

<p><img src="Images/cloud-service.png?raw=true" alt="云服务" title="云服务" />
</p>

<p><em>云服务</em></p></li>
<li><p>在云服务页面上，单击<strong>“过渡”</strong>，然后单击<strong>“上载新的过渡环境”</strong>。</p>

<p><img src="Images/deploy-to-staging-environment.png?raw=true" alt="部署到过渡环境" title="部署到过渡环境" />
</p>

<p><em>部署到过渡环境</em></p>
<blockquote>
<p><strong>注意：</strong>云服务是在 Windows Azure 环境中运行您的代码的服务。它有两个独立的部署槽：过渡部署和生产部署。使用过渡部署槽，您可以在将应用程序部署到生产环境前，先在 Windows Azure 环境中对服务进行测试。</p>
</blockquote></li>
<li><p>在<strong>“上载包”</strong>对话框中，输入用于标识部署的标签，例如使用 <strong>FirstVersion</strong>。</p>
<blockquote>
<p><strong>注意：</strong>门户在其过渡和生产环境用户界面中显示该标签，这样便于识别每个环境中当前部署的版本。</p>
</blockquote></li>
<li><p>要从文件系统选择<strong>“包”</strong>，请单击<strong>“从本地”</strong>，导航到步骤 6 中 Visual Studio 生成包时所在的文件夹，然后选择 <strong>GuestBook.cspkg</strong>。</p></li>
<li><p>接下来，要选择<strong>“配置”</strong>文件，请单击<strong>“从本地”</strong>，然后选择在上一步中使用的同一文件夹下的 <strong>ServiceConfiguration.cscfg</strong>。</p>
<blockquote>
<p><strong>注意：该 </strong><em>.cscfg</em> 文件包含应用程序的配置设置，包括将在练习的后面部分中更新的实例计数。</p>
</blockquote></li>
<li><p>最后，选择标有<strong>“即使一个或多个角色包含单个实例也进行部署”</strong>的选项。单击<strong>勾号</strong>开始部署。</p>
<blockquote>
<p><strong>注意：</strong>在此特定情况下，只会对至少其中一个角色部署一个实例。建议不要这样做，因为这不能保证服务的可用性。在下一个任务中，将增加实例数量以解决此问题。</p>
</blockquote>
<p><img src="Images/upload-package-to-staging.png?raw=true" alt="将包上载到过渡环境" title="将包上载到过渡环境" />
</p>

<p><em>将包上载到过渡环境</em></p></li>
<li><p>请注意，此时会开始上载包，而门户会显示部署状态，以指示其进度。</p>

<p><img src="Images/uploading-cloud-service.png?raw=true" alt="上载云服务" title="上载云服务" />
</p>

<p><em>上载云服务</em></p></li>
<li><p>等待部署过程完成，这可能需要几分钟时间。至此，包已上载完毕，处于<strong>“就绪”</strong>状态。</p>
<blockquote>
<p><strong>注意：</strong>在部署期间，Windows Azure 会分析配置文件并将服务复制到正确数量的虚拟机上，并启动所有实例。负载平衡器、网络设备和监视也在此时配置。</p>
</blockquote></li>
<li><p>成功完成部署后，在<strong>“云服务”</strong>页面中，单击云服务名称以查看其仪表板</p>

<p><img src="Images/cloud-service-dashboard.png?raw=true" alt="云服务仪表板" title="云服务仪表板" />
</p>

<p><em>云服务仪表板</em></p>
<blockquote>
<p><strong>注意：</strong>新云服务已分配有 <strong>DNS 名称</strong>和指向 Web 角色主页的 URL。</p>
</blockquote></li>
</ol>

<p><a name="Ex3Task3"></a></p>

<h4 id="Task_3_-_Configuring_the_Application_to_Increase_the_Number_of_Instances">任务 3 - 配置应用程序以增加实例数</h4>

<p>在测试所部署的应用程序之前，需要先对其进行配置。在此任务中，需要定义应用程序的存储帐户设置。</p>

<ol>
<li><p>在<strong>“云服务”</strong>中，单击 <strong>GuestBook</strong> 服务，然后单击功能区中的<strong>“扩展”</strong>。</p>

<p><img src="Images/scaling-instances.png?raw=true" alt="扩展实例" title="扩展实例" />
</p>

<p><em>扩展实例。</em></p></li>
<li><p>在<strong>“扩展”</strong>页面中，将每个角色对应的实例计数增加到 2。</p>

<p><img src="Images/increment-instance-count.png?raw=true" alt="增加实例计数" title="增加实例计数" />
</p>

<p><em>增加实例计数</em></p>

<p><img src="Images/new-instance-count.png?raw=true" alt="新实例计数" title="新实例计数" />
</p>

<p><em>增加实例计数</em></p>
<blockquote>
<p><strong>注意：</strong>或者，您也可以在右侧文本框中输入新数字来更改实例计数。</p>

<p>此设置控制 Windows Azure 启动的角色数，并用于对服务进行扩展。对于基于代币的订阅（目前仅在未配置计费的国家或地区可用），该数量限制为最多两个实例。但是，在商业产品中，只要您愿意付费，可将其更改为任意数量。</p>
</blockquote></li>
<li><p>单击底部窗格中的<strong>“保存”</strong>更新配置并等待云服务应用新的设置。</p>

<p><img src="Images/saving-instance-count.png?raw=true" alt="保存实例计数" title="保存实例计数" />
</p>

<p><em>保存实例计数</em></p>
<blockquote>
<p><strong>注意：</strong>在应用设置时，门户显示一条消息<em>正在更改缩放设置...</em>。</p>

<p><img src="Images/changing-scale-settings.png?raw=true" alt="更改缩放设置" title="更改缩放设置" />
</p>

<p><em>更改缩放设置</em></p>

<p><img src="Images/scale-in-progress.png?raw=true" alt="正在进行缩放" title="正在进行缩放" />
</p>

<p><em>正在进行缩放</em></p>
</blockquote></li>
</ol>

<p><a name="Ex3Task4"></a></p>

<h4 id="Task_4_-_Testing_the_Application_in_the_Staging_Environment">任务 4 - 在过渡环境中测试应用程序</h4>

<p>在此任务中，需要在过渡环境中运行应用程序并访问其公共端点，以测试其能否正常运行。</p>

<ol>
<li><p>在<strong>“云服务”</strong>中，单击您的服务，然后单击位于<strong>“网站 URL”</strong>下右侧窗格中的链接。</p>

<p><img src="Images/site-url.png?raw=true" alt="网站 URL" title="网站 URL" />
</p>

<p><em>网站 URL</em></p>
<blockquote>
<p><strong>注意：</strong>此处显示的网站 URL 名称链接格式为 <em>&lt;guid&gt;.cloudapp.net</em>，其中 <em><guid></guid></em> 是某个随机标识符。这与应用程序在生产环境中运行时的地址不同。虽然应用程序是在与生产环境隔离的过渡区域中执行的，但是过渡环境与生产环境并无实际差别，只是负载平衡器连接至何处的问题。</p>
</blockquote></li>
<li><p>如果愿意，您可以在留言簿上签名和上载图像来测试应用程序。</p>

<p><img src="Images/running-in-the-staging-environmen.png?raw=true" alt="在过渡环境中运行的应用程序" title="在过渡环境中运行的应用程序" />
</p>

<p><em>在过渡环境中运行的应用程序</em></p></li>
</ol>

<p><a name="Ex3Task5"></a></p>

<h4 id="Task_5_-_Promoting_the_Application_to_Production">任务 5 - 将应用程序提升到生产环境</h4>

<p>现在，您已验证服务在过渡环境中运行正常，准备将其提升到最终生产环境。将应用程序部署至生产环境时，Windows Azure 会重新配置其负载平衡器，以便应用程序在其生产 URL 中可用。</p>

<ol>
<li><p>在<strong>“云服务”</strong>中，单击您的服务，然后单击底部窗格中的<strong>“交换”</strong>。</p>

<p><img src="Images/promoting-to-the-production-s.png?raw=true" alt="交换槽" title="交换槽" />
</p>

<p><em>交换槽</em></p></li>
<li><p>在<strong>“VIP 交换?”</strong>对话框中，单击<strong>“是”</strong>在过渡环境与生产环境间交换部署。</p>

<p><img src="Images/swap-dialog.png?raw=true" alt="将应用程序提升到生产槽" title="将应用程序提升到生产槽" />
</p>

<p><em>将应用程序提升到生产槽</em></p></li>
<li><p>等待过渡过程执行完成。</p>

<p><img src="Images/swapping-deployments.png?raw=true" alt="交换部署" title="交换部署" />
</p>

<p><em>交换部署</em></p></li>
<li><p>当过渡过程完成时，单击“生产”打开生产网站仪表板。</p>

<p><img src="Images/switch-to-production-dashboard.png?raw=true" alt="切换到生产仪表板" title="切换到生产仪表板" />
</p>

<p><em>切换到生产仪表板</em></p></li>
<li><p>向下滚动，单击<strong>“网站 URL”</strong>链接，在浏览器窗口中打开生产网站。请留意地址栏中的 URL。</p>

<p><img src="Images/application-in-the-production-environ.png?raw=true" alt="在生产环境中运行的应用程序" title="在生产环境中运行的应用程序" />
</p>

<p><em>在生产环境中运行的应用程序</em></p>
<blockquote>
<p><strong>注意：</strong>如果刚提升就访问生产网站，DNS 名称可能还未就绪。如果遇到 DNS 错误 (404)，请等几分钟再试。请注意，Windows Azure 是动态创建 DNS 名称条目的，因而更改可能要过几分钟才能生效。</p>
</blockquote></li>
<li><p>即使部署处于挂起状态，Windows Azure 仍需要为每个实例分配一个虚拟机 (VM) 并针对其收费。当您完成应用程序测试后，需要将部署从 Windows Azure 移除，以免产生不必要的费用。要移除正在运行的部署，请转到<strong>“云服务”</strong>，选择当前承载服务的部署槽（过渡或生产），然后单击底部窗格中的<strong>“停止”</strong>。待服务停止后，单击底部窗格中的<strong>“删除”</strong>将其移除。</p></li>
</ol>

<hr />

<p><a name="summary"></a></p>

<h2 id="Summary">小结</h2>

<p>完成此动手实验，意味着您已经了解了 Windows Azure 应用程序的基本要素。您已经了解服务由一个或多个 Web 角色和辅助角色构成。您学习了有关存储服务，尤其是 Blob、表和队列服务的知识。最后，您探索了云应用程序的基本体系结构模式，即允许前端进程使用队列与后端进程进行通信。</p> </span>
		</div>
	<br/>
	<p><a href="#top">返回页首</a></p>


				</div>
			</section>
			<footer>
				<div class="footer-sitemap" style="border-top:0"></div>
				<div class="footer-bottom">
					<ul>
						<li class="footer-copyright"><a href="http://www.microsoft.com"><img alt="microsoft" src="images/microsoft.png" /></a></li>					
												<li><a href="https://github.com/WindowsAzure-TrainingKit/HOL-IntroToCloudServices/issues" target="_new">记录问题</a></li>
												<li><a href="mailto:azcfeed@microsoft.com?subject=Windows Azure Training Kit">联系我们</a></li>
						<li><a href="EULA.htm">使用条款</a></li>
						<li><a href=".\">浏览内容</a></li>
						<li>&copy; 2012 Microsoft</li>
					</ul>
				</div>
			</footer>
			</div>
        </div>
    </div>
</body>
</html>

