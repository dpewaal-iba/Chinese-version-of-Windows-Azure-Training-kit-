<!DOCTYPE html>

<html class="no-js" lang="en" class="js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths">
<head id="ContentPlaceHolderDefault_Head1">
    <meta http-equiv="X-UA-Compatible" content="IE=9,chrome=1" />
    <meta charset=UTF-8" />
    <title>Windows Azure 培训包 - 使用 Windows Azure 网站和 Visual Studio 2010 构建和发布 ASP.NET 应用程序</title>
    <link rel="Stylesheet" type="text/css" media="all" href="styles/master.css" />
</head>
<body id="top" class="page-">
    <div id="page">
        <div id="wrapper" class="landingPage getStartedPage">            
            <div class="header">								
				<img alt="Windows Azure" src="images/azure-logo.png" /> <span class="mainHomepageSubTitle">培训包 - 2012 年 12 月更新</span>								
			</div>			
			<div class="nav-menu-header">
				<nav>
					<ul>
						<li class="MenuLink-Selected">
							<a href="#">内容</a>
						</li>
												<li class="MenuLink">
							<a href="Source">设置</a>
						</li>
											</ul>
				
										
						<span id="github-btn" class="github-btn"> <a id="gh-btn" title="在 GitHub 中复制此存储库的分支" href="https://github.com/WindowsAzure-TrainingKit/HOL-ASPNETAzureWebSites" target="_blank" class="gh-btn"> <span class="gh-ico"></span> <span id="gh-text" class="gh-text">分支</span> </a> </span> <span id="github-btn" class="github-btn github-watchers"> <a id="gh-btn" title="在 GitHub 中关注此存储库" href="https://github.com/WindowsAzure-TrainingKit/HOL-ASPNETAzureWebSites" target="_blank" class="gh-btn"> <span class="gh-ico"></span> <span id="gh-text" class="gh-text">关注</span> </a> </span>
						
									
				</nav>
			</div>	        
		</span>
			<div id="content" class="textpage">
            <section id="content-container">
				<div id="content" class="textpage">
			    <a name="top"></a>
				
				

		<div class="content">
			<?xml version="1.0" encoding="iso-8859-1"?><span><p><a name="Title"></a></p>

<h1 id="Building_and_Publishing_ASPNET_Applications_with_Windows_Azure_Web_Sites_and_Visual_Studio_2010">使用 Windows Azure 网站和 Visual Studio 2010 构建和发布 ASP.NET 应用程序</h1>

<hr />

<p><a name="Overview"></a></p>

<h2 id="Overview">概述</h2>

<p>网站发布和部署从未像在 Windows Azure 中这么容易。借助于 Microsoft Azure 平台的 Windows Azure 网站功能，Web 开发人员可以使用 Web 部署或 Git 等常用工具，几乎不需要对开发工作流进行任何更改，就能够轻松开发和部署 Web 应用程序。</p>

<p>在此动手实验中，您将创建一个简单的 <a href="http://www.asp.net/mvc/mvc4">ASP.NET MVC 4</a> 应用程序（该应用程序使用基架来自动实现应用程序的基本创建、读取、更新和删除 (CRUD) 操作），并藉此了解 <strong>Windows Azure 网站</strong>服务的基本元素。然后，您将使用 Visual Studio 2010 中的 Web 部署以及 Git 来部署该应用程序。</p>

<p>您只需从一个简单的模型类着手，无需编写任何代码，就可以创建一个控制器，该控制器将包含所有 CRUD 操作以及所有必需的视图。在发布和运行该解决方案后，SQL Database 服务器中将生成应用程序数据库，以及用于数据操作的 MVC 逻辑和视图。</p>
<blockquote>
<p><strong>注意：</strong>在最新版本的 <a href="http://bit.ly/WindowsAzureTK">Windows Azure 培训包</a>或 <a href="https://github.com/WindowsAzure-TrainingKit/HOL-ASPNETAzureWebSitesVS2012">GitHub</a> 中可以找到此动手实验的 Visual Studio 2012 版本。</p>
</blockquote>
<p><a name="Objectives"></a></p>

<h3 id="Objectives">目标</h3>

<p>在此动手实验中，您将学习如何执行以下操作：</p>

<ul>
<li>从 Windows Azure 管理门户创建网站</li>
<li>使用 Visual Studio 2010 构建新的 ASP.NET MVC 4 应用程序</li>
<li>使用 Web 部署来部署应用程序</li>
<li>创建一个启用了 Git 存储库的新网站，以便使用 Git 发布 ASP.NET MVC 4 应用程序</li>
</ul>

<p><a name="Prerequisites"></a></p>

<h3 id="Prerequisites">先决条件</h3>

<p>下面是完成此动手实验需要满足的先决条件：</p>

<ul>
<li><a href="http://msdn.microsoft.com/vstudio/products/">Microsoft Visual Studio 2010</a> Service Pack 1</li>
<li><a href="http://www.asp.net/mvc/mvc4/">ASP.NET MVC 4</a></li>
<li><a href="http://www.microsoft.com/web/gallery/install.aspx?appid=WebToolsExtensionPublishingVS2010_Only_1_0">Microsoft Web Publish for Visual Studio 2010（2012 年 8 月）</a></li>
<li><a href="http://git-scm.com/download">GIT 版本控制系统</a></li>
<li>启用了网站预览的 Windows Azure 订阅 - <a href="http://aka.ms/WATK-FreeTrial">注册以免费试用</a></li>
</ul>
<blockquote>
<p><strong>注意：</strong>此动手实验针对 Windows 7 而设计。</p>
</blockquote>
<p><a name="Setup"></a></p>

<h3 id="Setup">设置</h3>

<p>为了执行此动手实验中的各项练习，需要对环境进行设置。</p>

<ol>
<li><p>打开 Windows 资源管理器窗口，浏览到此实验的 <strong>Source</strong> 文件夹。</p></li>
<li><p>右键单击 <strong>Setup.cmd</strong> 文件，然后单击<strong>“以管理员身份运行”</strong>。这将启动设置过程，该过程将配置您的环境并且检查依赖项。</p></li>
</ol>
<blockquote>
<p><strong>注意：</strong>请务必在运行安装程序前检查此实验的所有依赖项。</p>
</blockquote>
<hr />

<p><a name="Exercises"></a></p>

<h2 id="Exercises">练习</h2>

<p>此动手实验包括以下练习：</p>

<ul>
<li><a href="#GettingStarted">入门：使用实体框架 Code First 创建 MVC 4 应用程序</a></li>
<li><a href="#Exercise1">练习 1：使用 Web 部署来部署 MVC 4 应用程序</a></li>
<li><a href="#Exercise2">练习 2：使用 Git 部署 MVC 4 应用程序</a></li>
</ul>

<p><a name="GettingStarted"></a></p>

<h3 id="Getting_Started_Creating_an_MVC_4_Application_using_Entity_Framework_Code_First">入门：使用实体框架 Code First 创建 MVC 4 应用程序</h3>

<p>在本节中，您将创建一个简单的 ASP.NET MVC 4 应用程序，并且结合使用 MVC 4 基架与实体框架 Code First 来创建 CRUD 方法。</p>

<p><a name="GettingStartedTask1"></a></p>

<h4 id="Task_1_-_Creating_an_ASPNET_MVC_4_Application_in_Visual_Studio">任务 1 - 在 Visual Studio 中创建 ASP.NET MVC 4 应用程序</h4>

<ol>
<li><p>打开 <strong>Visual Studio 2010</strong>，单击<strong>“文件”</strong>|<strong>“新建”</strong>|<strong>“项目”</strong>。</p>

<p><img src="images/new-website-vs2010.png?raw=true" alt="创建新项目" title="创建新项目" />
</p>

<p><em>创建新项目</em></p></li>
<li><p>创建一个新的 <strong>ASP.NET MVC 4 Web 应用程序</strong>，并将其命名为 <strong>MVC4Sample.Web</strong>。</p>

<p><img src="images/mvc4-sample.png?raw=true" alt="创建新的 ASP.NET MVC 4 Web 应用程序" title="创建新的 ASP.NET MVC 4 Web 应用程序" />
</p>

<p><em>创建新的 ASP.NET MVC 4 Web 应用程序</em></p></li>
<li><p>选择<strong>“Internet 应用程序”</strong>，然后单击<strong>“确定”</strong>。</p>

<p><img src="images/internet-application.png?raw=true" alt="选择“Internet 应用程序”" title="选择“Internet 应用程序”" />
</p>

<p><em>选择“Internet 应用程序”</em></p></li>
<li><p>在解决方案资源管理器中，右键单击<strong>“模型”</strong>，然后选择<strong>“添加”|“类”</strong>创建一个 person 类 (POCO)。将其命名为 <em>Person.cs</em>，然后单击<strong>“确定”</strong>。</p></li>
<li><p>打开 <strong>Person</strong> 类并插入以下三个属性。</p>

<!-- mark:10-14 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">using</span> System;
<span style="color:#0000FF">using</span> System.Collections.Generic;
<span style="color:#0000FF">using</span> System.Linq;
<span style="color:#0000FF">using</span> System.Web;

<span style="color:#0000FF">namespace</span> MVC4Sample.Web.Models {
    <span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> Person {
<strong class="markLine">        <span style="color:#0000FF">public</span> <span style="color:#0000FF">int</span> PersonID { <span style="color:#0000FF">get</span>; <span style="color:#0000FF">set</span>; }</strong>
<strong class="markLine"></strong>
<strong class="markLine">        <span style="color:#0000FF">public</span> <span style="color:#0000FF">string</span> FirstName { <span style="color:#0000FF">get</span>; <span style="color:#0000FF">set</span>; }</strong>
<strong class="markLine"></strong>
<strong class="markLine">        <span style="color:#0000FF">public</span> <span style="color:#0000FF">string</span> LastName { <span style="color:#0000FF">get</span>; <span style="color:#0000FF">set</span>; }</strong>
    } }
</code></pre></li>
<li><p>按 <strong>Ctrl+Shift+B</strong> 生成解决方案。</p></li>
<li><p>在解决方案资源管理器中，右键单击<strong>“控制器”</strong>文件夹，然后选择<strong>“添加”|“控制器”</strong>。</p></li>
<li><p>将该控制器命名为 <em>PersonController</em>，然后使用以下值完成<strong>“基架选项”</strong>。</p>

<ul>
<li>在<strong>“模板”</strong>下拉列表中，选择<strong>“包含读/写操作和视图的 MVC 控制器(使用实体框架)”</strong>选项。</li>
<li>在<strong>“模型类”</strong>下拉列表中，选择 <strong>Person</strong> 类。</li>
<li>在<strong>“数据上下文类”</strong>列表中，选择<strong>“&lt;新建数据上下文...&gt;”</strong>。在显示的对话框中，使用 <strong>MVC4Sample.Web.Models.PersonContext</strong> 替换数据上下文类类型，然后单击<strong>“确定”</strong>。</li>
<li>在<strong>“视图”</strong>下拉列表中，确保选中 <strong>Razor</strong>。</li>
</ul>

<p><img src="images/add-person-controller.png?raw=true" alt="添加具有基架的 Person 控制器" title="添加具有基架的 Person 控制器" />
</p>

<p><em>添加具有基架的 Person 控制器</em></p></li>
<li><p>单击<strong>“添加”</strong>，新建一个具有基架的 <strong>Person</strong> 控制器。现在，您已经生成了控制器操作以及视图。</p>

<p><img src="images/person-scaffolding.png?raw=true" alt="在创建具有基架的 Person 控制器后" title="在创建具有基架的 Person 控制器后" />
</p>

<p><em>在创建具有基架的 Person 控制器后</em></p></li>
<li><p>打开<strong>“控制器”</strong>文件夹中的 <strong>PersonController.cs</strong> 文件。请注意，CRUD 操作方法已自动生成。</p>

<p><img src="images/person-controller-code.png?raw=true" alt="在 Person 控制器内" title="在 Person 控制器内" />
</p>

<p><em>在 Person 控制器内</em></p></li>
<li><p>不要关闭 Visual Studio。</p></li>
</ol>

<hr />

<p><a name="Exercise1"></a></p>

<h3 id="Exercise_1_Deploying_an_MVC_4_Application_using_Web_Deploy">练习 1：使用 Web 部署来部署 MVC 4 应用程序</h3>

<p>在本练习中，您将在 Windows Azure 管理门户中创建一个新网站，并利用 Windows Azure 提供的 Web 部署发布功能发布您在“入门”部分中得到的应用程序。</p>

<p><a name="Ex1Task1"></a></p>

<h4 id="Task_1_-_Creating_a_New_Web_Site_from_the_Windows_Azure_Portal">任务 1 - 从 Windows Azure 门户创建新网站</h4>

<ol>
<li><p>转到 <a href="https://manage.windowsazure.com">Windows Azure 管理门户</a>并使用您的 Windows 帐户凭据登录。</p>

<p><img src="images/login.png?raw=true" alt="登录到 Windows Azure 门户" title="登录到 Windows Azure 门户" />
</p>

<p><em>登录到 Windows Azure 管理门户</em></p></li>
<li><p>单击页面底部的<strong>“新建”</strong>。</p>

<p><img src="images/new-website.png?raw=true" alt="创建新网站" title="创建新网站" />
</p>

<p><em>创建新网站</em></p></li>
<li><p>依次单击<strong>“计算”</strong>、<strong>“网站”</strong>和<strong>“快速创建”</strong>。为这个新网站提供一个可用 URL，然后单击<strong>“创建网站”</strong>。</p>
<blockquote>
<p><strong>注意：</strong>Windows Azure 网站是一个宿主平台，您可以在该平台上控制和管理云中运行的 Web 应用程序。通过“快速创建”选项，可以从门户外将已完成的 Web 应用程序部署到 Windows Azure 网站。它不包含用于设置数据库的步骤。</p>
</blockquote>
<p><img src="images/quick-create.png?raw=true" alt="使用“快速创建”创建新网站" title="使用“快速创建”创建新网站" />
</p>

<p><em>使用“快速创建”创建新网站</em></p></li>
<li><p>等待新网站创建完成。</p>
<blockquote>
<p><strong>注意：</strong>默认情况下，Windows Azure 提供 <em>azurewebsites.net</em> 域，但您也可以使用 Windows Azure 管理门户设置自定义域。不过，如果您使用某些特定的网站模式，则只能管理自定义域。</p>

<p>Windows Azure 为用户提供了 3 种网站运行模式 - 免费、共享和保留。在免费和共享模式中，所有网站都在多租户环境下运行，并且在 CPU、内存和网络使用情况等资源上存在配额限制。您可以混合搭配免费网站（严格配额）和共享网站（更宽松的配额）的使用。免费网站的最大数目可能因您的计划而异。保留模式适用于您的所有网站，这些网站在专用的虚拟机上运行，可以使用相应数量的标准 Azure 计算资源。您可以在网站的<strong>“规模”</strong>菜单中找到网站模式配置。</p>

<p><img src="images/web-site-modes.png?raw=true" alt="网站模式" title="网站模式" />
</p>

<p>如果您使用的是<strong>“共享”</strong>或<strong>“保留”</strong>模式，您就能够管理您的网站的自定义域。为此，请转到您的网站的<strong>“配置”</strong>菜单，然后单击<strong>“管理域”</strong>。</p>

<p><img src="images/manage-domains.png?raw=true" alt="管理域" title="管理域" />
</p>

<p><img src="images/manage-custom-domains.png?raw=true" alt="管理自定义域" title="管理自定义域" />
</p>
</blockquote></li>
<li><p>创建网站之后，单击 <strong>URL</strong> 列下面的链接。检查这个新网站是否工作正常。</p>

<p><img src="images/navigate-website.png?raw=true" alt="浏览到新网站" title="浏览到新网站" />
</p>

<p><em>浏览到新网站</em></p>

<p><img src="images/website-working.png?raw=true" alt="运行中的网站" title="运行中的网站" />
</p>

<p><em>运行中的网站</em></p></li>
<li><p>返回到门户，然后单击<strong>“名称”</strong>列之下的网站名称以显示管理页。</p>

<p><img src="images/go-to-the-dashboard.png?raw=true" alt="打开网站管理页" title="打开网站管理页" />
</p>

<p><em>打开网站管理页</em></p></li>
<li><p>在<strong>“面板”</strong>页中的<strong>“速览”</strong>部分下，单击<strong>“下载发布配置文件”</strong>链接。</p>
<blockquote>
<p><strong>注意：</strong>对于启用的每种发布方法，<em>发布配置文件</em> 包含将 Web 应用程序发布到 Windows Azure 网站所需的全部信息。发布配置文件包含有启用了发布方法的每个端点的 URL，以及连接到这些端点和进行身份验证所需的用户凭据和数据库字符串。<strong>Microsoft WebMatrix</strong> 和 <strong>Microsoft Visual Studio</strong> 都支持读取发布配置文件以便自动配置这些程序，从而将 Web 应用程序发布到 Windows Azure 网站。</p>
</blockquote>
<p><img src="images/download-publish-profile.png?raw=true" alt="下载网站发布配置文件" title="下载网站发布配置文件" />
</p>

<p><em>下载网站发布配置文件</em></p></li>
<li><p>将发布配置文件下载到一个已知位置。在本练习的后面部分，您将了解如何导入此文件以将 Web 应用程序发布到 Windows Azure 网站。</p>

<p><img src="images/save-link.png?raw=true" alt="保存发布配置文件" title="保存发布配置文件" />
</p>

<p><em>保存发布配置文件</em></p></li>
</ol>

<p><a name="Ex1Task2"></a></p>

<h4 id="Task_2_-_Configuring_the_Database_Server">任务 2 - 配置数据库服务器</h4>

<ol>
<li><p>您需要一个 SQL Database 服务器来存储应用程序数据库。您可以在门户中的<strong>“Sql 数据库”</strong>|<strong>“服务器”</strong>上查看您的订阅中的 SQL Database 服务器。如果您没有创建服务器，则可以使用该页面底部的<strong>“添加”</strong>按钮创建一个服务器。请记下服务器的<strong>“名称”</strong>、<strong>“管理 URL”</strong>和<strong>“管理员登录名”</strong>，并且获取服务器的密码（该密码不显示在门户中）。接下来将用到这些信息。现在先不要创建数据库；在运行该应用程序时，实体框架将创建数据库。</p>

<p><img src="images/sql-database-server-dashboard.png?raw=true" alt="SQL Database 服务器面板" title="SQL Database 服务器面板" />
</p>

<p><em>SQL Database 服务器面板</em></p></li>
<li><p>在下一个任务中，您将从 Visual Studio 测试数据库连接。因此，您需要在服务器的<strong>“允许的 IP 地址”</strong>列表中包括您的本地 IP 地址。为此，请单击<strong>“配置”</strong>，然后单击标有<strong>“当前客户端 IP 地址”</strong>的 IP 地址旁的 <img src="images/add-client-ip-address-ok-button.png?raw=true" alt="add-client-ip-address-ok-button" /> 按钮。</p>

<p><img src="images/add-client-ip-address.png?raw=true" alt="添加客户端 IP 地址" />
</p>

<p><em>添加客户端 IP 地址</em></p></li>
<li><p>将<strong>“客户端 IP 地址”</strong>添加到允许的 IP 地址列表后，单击<strong>“保存”</strong>以确认更改。</p>

<p><img src="images/add-client-ip-address-confirm.png?raw=true" alt="确认更改" />
</p>

<p><em>确认更改</em></p></li>
</ol>

<p><a name="Ex1Task3"></a></p>

<h4 id="Task_3_-_Publishing_an_ASPNET_MVC_4_Application_using_Web_Deploy">任务 3 - 使用 Web 部署发布 ASP.NET MVC 4 应用程序</h4>

<ol>
<li><p>打开在<strong>入门</strong>一节中得到的 MVC 4 应用程序（如果尚未打开）。在<strong>解决方案资源管理器</strong>中，右键单击该网站项目，然后选择<strong>“发布”</strong>。</p>

<p><img src="images/publishing-the-web-site.png?raw=true" alt="发布网站" title="发布网站" />
</p>

<p><em>发布网站</em></p></li>
<li><p>在<strong>“配置文件”</strong>页中，单击<strong>“导入”</strong>，然后选择您之前在本练习中下载的配置文件设置文件。单击<strong>“下一步”</strong>。</p>

<p><img src="images/importing-the-profile-settings-file.png?raw=true" alt="导入配置文件设置文件" title="导入配置文件设置文件" />
</p>

<p><em>导入配置文件设置文件</em></p></li>
<li><p>在<strong>“连接”</strong>页中，保留导入的值，然后单击<strong>“下一步”</strong>。</p>

<p><img src="images/setting-up-web-deploy-connection.png?raw=true" alt="设置 Web 部署连接" title="设置 Web 部署连接" />
</p>

<p><em>设置 Web 部署连接</em></p></li>
<li><p>在<strong>“设置”</strong>页中的<strong>“数据库”</strong>部分下，单击 <strong>PersonContext</strong> 文本框旁边的按钮。</p>

<p><img src="images/web-deploy-configuration.png?raw=true" alt="Web 部署配置" title="Web 部署配置" />
</p>

<p><em>Web 部署配置</em></p></li>
<li><p>按如下所示配置数据库连接：</p>

<ul>
<li>在<strong>“服务器名称”</strong>中，键入您的 SQL Database 服务器 URL。这个值就是之前复制的<strong>“管理 URL”</strong>的域名部分（例如，假定“管理 URL”是 <em>https://[yourserver].database.windows.net/</em>，则输入 <em>[yourserver].database.windows.net</em>）。</li>
<li>在<strong>“用户名”</strong>中，键入您的服务器管理员登录名。</li>
<li>在<strong>“密码”</strong>中，键入您的服务器管理员登录密码。</li>
<li>键入新的数据库名称，例如 <em>MVC4SampleDB</em>。</li>
</ul>

<p><img src="images/configuring-destination-connection-string.png?raw=true" alt="配置目标连接字符串" title="配置目标连接字符串" />
</p>

<p><em>配置目标连接字符串</em></p></li>
<li><p>然后，单击<strong>“确定”</strong>。在系统提示您创建数据库时，单击<strong>“是”</strong>。</p>

<p><img src="images/creating-the-database.png?raw=true" alt="创建数据库" title="创建数据库字符串" />
</p>

<p><em>创建数据库</em></p></li>
<li><p>从 <strong>PersonContext</strong> 复制连接字符串值，供以后使用。然后单击<strong>“下一步”</strong>。</p></li>
<li><p>在<strong>“发布”</strong>页上，单击<strong>“发布”</strong>开始应用程序发布过程。</p>

<p><img src="images/publish-web-application-preview-page.png?raw=true" alt="发布 Web 应用程序预览页" title="发布 Web 应用程序预览页" />
</p>

<p><em>发布 Web 应用程序预览页</em></p></li>
<li><p>一旦完成发布过程，您的默认浏览器将打开已发布的网站。请确认该网站已在 Windows Azure 中成功发布。</p>

<p><img src="images/application-published-to-windows-azure.png?raw=true" alt="发布到 Windows Azure 的应用程序" title="发布到 Windows Azure 的应用程序" />
</p>

<p><em>发布到 Windows Azure 的应用程序</em></p></li>
<li><p>转到 <strong>/Person</strong>，验证 Persons 视图是否按预期工作。您可以尝试添加新的 Person，确认它是否成功保存到数据库。</p>

<p><img src="images/application-running.png?raw=true" alt="运行中的应用程序" title="运行中的应用程序" />
</p>

<p><em>添加 Person 视图</em></p></li>
</ol>

<hr />

<p><a name="Exercise2"></a></p>

<h3 id="Exercise_2_Publishing_an_MVC_4_Application_using_Git">练习 2：使用 Git 发布 MVC 4 应用程序</h3>

<p>在本练习中，您将再次发布在练习 1 中创建的 Web 应用程序，但这次使用的是 Git。</p>

<p>如果您没有执行练习 1，仍可以通过部署位于此动手实验 <strong>Source\Assets</strong> 文件夹中的网站来执行此练习。</p>

<p><a name="Ex2Task1"></a></p>

<h4 id="Task_1_-_Creating_a_New_Web_Site_from_the_Windows_Azure_Portal">任务 1 - 从 Windows Azure 门户创建新网站</h4>

<ol>
<li><p>转到 <a href="https://manage.windowsazure.com/">Windows Azure 管理门户</a>，使用您的订阅关联的 Microsoft 帐户凭据登录。</p>

<p><img src="images/login.png?raw=true" alt="登录到 Windows Azure 门户" title="登录到 Windows Azure 门户" />
</p>

<p><em>登录到 Windows Azure 管理门户</em></p></li>
<li><p>在命令栏上，单击<strong>“新建”</strong>。</p>

<p><img src="images/new-website.png?raw=true" alt="创建新网站" title="创建新网站" />
</p>

<p><em>创建新网站</em></p></li>
<li><p>依次单击<strong>“计算”</strong>、<strong>“网站”</strong>和<strong>“快速创建”</strong>。为这个新网站提供一个可用 URL，然后单击<strong>“创建网站”</strong>。</p>
<blockquote>
<p><strong>注意：</strong>Windows Azure 网站是一个宿主平台，您可以在该平台上控制和管理云中运行的 Web 应用程序。通过“快速创建”选项，可以从门户外将已完成的 Web 应用程序部署到 Windows Azure 网站。它不包含用于设置数据库的步骤。</p>
</blockquote>
<p><img src="images/quick-create.png?raw=true" alt="使用“快速创建”创建新网站" title="使用“快速创建”创建新网站" />
</p>

<p><em>使用“快速创建”创建新网站</em></p></li>
<li><p>等待新网站创建完成。</p></li>
<li><p>创建网站之后，单击 <strong>URL</strong> 列下面的链接。检查这个新网站是否工作正常。</p>

<p><img src="images/navigate-website.png?raw=true" alt="浏览到新网站" title="浏览到新网站" />
</p>

<p><em>浏览到新网站</em></p>

<p><img src="images/website-working.png?raw=true" alt="运行中的网站" title="运行中的网站" />
</p>

<p><em>运行中的网站</em></p></li>
</ol>

<p><a name="Ex2Task2"></a>  </p>

<h4 id="Task_2_-_Setting_up_Git_Publishing">任务 2 - 设置 Git 发布</h4>

<ol>
<li><p>返回到 Windows Azure 管理门户。在<strong>“网站”</strong>部分中，找到您在之前的任务中创建的网站，并打开该网站的面板。为此，请单击网站的<strong>“名称”</strong>。</p></li>
<li><p>在速览部分下，单击<strong>“设置 Git 发布”</strong>。</p>

<p><img src="images/set-up-git-publishing.png?raw=true" alt="设置 Git 发布" title="设置 Git 发布" />
</p>

<p><em>设置 Git 发布</em></p></li>
<li><p>将出现一条消息，指示正在创建您的 Git 存储库。</p>

<p><img src="images/creating-git-repository.png?raw=true" alt="创建 Git 存储库" title="创建 Git 存储库" />
</p>

<p><em>创建 Git 存储库</em></p></li>
<li><p>在执行后续任务前，请等待 Git 存储库创建完成并且可以使用。</p>

<p><img src="images/git-repository-ready.png?raw=true" alt="Git 存储库就绪" />
</p>

<p><em>Git 存储库就绪</em></p></li>
<li><p>复制 <strong>Git URL</strong> 值。您将在本练习的后面用到该值。</p></li>
</ol>

<p><a name="Ex2Task3"></a>  </p>

<h4 id="Task_3_-_Pushing_the_Application_to_Widows_Azure_using_Git">任务 3 - 使用 Git 将应用程序发布到 Widows Azure</h4>

<ol>
<li><p>使用 Visual Studio 打开您在<a href="#Exercise1">练习 1</a> 中获得的解决方案。或者，可以打开位于本实验 <strong>Source\Assets</strong> 文件夹中的 <strong>MVC4Sample.Web</strong> 解决方案。</p></li>
<li><p>按 <strong>Ctrl+Shift+B</strong> 生成解决方案，并下载 NuGet 包依赖项。</p></li>
<li><p>打开 Web.config 并使用从<a href="#Ex1Task3">练习 1 - 任务 3</a> 中获取的连接字符串更新 <strong>PersonContext</strong> 连接字符串。您还可以使用以下连接字符串来替换占位符。</p>

<span class="codelanguage">XML</span><pre><code class="XML"><span style="color:#0000FF">&lt;</span><span style="color:#800000">connectionStrings</span><span style="color:#0000FF">&gt;</span>
 ...
 <span style="color:#0000FF">&lt;</span><span style="color:#800000">add</span> <span style="color:#FF0000">name</span>=<span style="color:#0000FF">&quot;PersonContext&quot;</span> <span style="color:#FF0000">connectionString</span>=<span style="color:#0000FF">&quot;Data Source=tcp:{SERVER_URL};Initial Catalog=MVC4SampleDB;User ID={SERVER_ADMIN_LOGIN};Password={PASSWORD}&quot;</span>
    <span style="color:#FF0000">providerName</span>=<span style="color:#0000FF">&quot;System.Data.SqlClient&quot;</span> <span style="color:#0000FF">/&gt;</span>
<span style="color:#0000FF">&lt;/</span><span style="color:#800000">connectionStrings</span><span style="color:#0000FF">&gt;</span>
</code></pre></li>
<li><p>打开一个新的 <strong>Git Bash</strong> 控制台并插入以下命令。使用您在<a href="#Exercise1">练习 1</a> 中创建的 MVC 4 解决方案的路径来更新 <em>[YOUR-APPLICATION-PATH]</em> 占位符。</p>

<!-- mark:1-4 -->

<span class="codelanguage">CommandPrompt</span><pre><code class="CommandPrompt"><strong class="markLine">cd &quot;[YOUR-APPLICATION-PATH]&quot;</strong>
<strong class="markLine">git init</strong>
<strong class="markLine">git add .</strong>
<strong class="markLine">git commit -m &quot;Initial commit&quot;</strong>
</code></pre>

<p><img src="images/git-initialization-and-first-commit.png?raw=true" alt="Git 初始化和首次提交" title="Git 初始化和首次提交" />
</p>

<p><em>Git 初始化和首次提交</em></p></li>
<li><p>通过运行以下命令将您的网站推送到远程 <strong>Git</strong> 存储库。使用您从 Windows Azure 管理门户获取的 URL 替换占位符。系统将提示您提供部署密码。</p>

<!-- mark:1-2 -->

<span class="codelanguage">CommandPrompt</span><pre><code class="CommandPrompt"><strong class="markLine">git remote add azure [GIT-CLONE-URL]</strong>
<strong class="markLine">git push azure master</strong>
</code></pre>

<p><img src="images/pushing-to-windows-azure.png?raw=true" alt="推送到 Windows Azure" title="推送到 Windows Azure" />
</p>

<p><em>推送到 Windows Azure</em></p>
<blockquote>
<p><strong>注意：</strong>在您将内容部署到 Windows Azure 网站的 FTP 主机或 GIT 存储库时，必须使用您在网站的<strong>“快速启动”</strong>或<strong>“面板”</strong>管理页中创建的<strong>“部署凭据”</strong>进行身份验证。如果您不知道自己的部署凭据，使用管理门户可以轻松重置它们。打开网站的<strong>“面板”</strong>页，单击<strong>“重置部署凭据”</strong>链接。提供一个新密码，然后单击“确定”。部署凭据适用于您的订阅关联的所有 Windows Azure 网站。</p>
</blockquote></li>
<li><p>为了验证网站已成功推送到 Windows Azure，请返回到 <strong>Windows Azure 管理门户</strong>，然后单击<strong>“网站”</strong>。</p></li>
<li><p>找到您部署了应用程序的<strong>网站</strong>，然后单击该网站的<strong>“名称”</strong>打开<strong>“面板”</strong>。</p></li>
<li><p>单击<strong>“部署”</strong>查看<strong>部署历史记录</strong>。确认其中有您<em>初次提交</em> 的<strong>“活动部署”</strong>。</p>

<p><img src="images/deployment.png?raw=true" alt="部署" title="部署" />
</p>

<p><em>活动部署</em></p></li>
<li><p>最后，在底部的栏中单击<strong>“浏览”</strong>以便转到该网站。</p>

<p><img src="images/browse-web-site.png?raw=true" alt="浏览网站" title="浏览网站" />
</p>

<p><em>浏览网站</em></p></li>
<li><p>如果该应用程序已成功部署，您将看到 ASP.NET MVC 4 模板的默认主页。</p>

<p><img src="images/application-running-in-windows-azure.png?raw=true" alt="在 Windows Azure 中运行的应用程序" title="在 Windows Azure 中运行的应用程序" />
</p>

<p><em>在 Windows Azure 中运行的应用程序</em></p></li>
<li><p>转到 <strong>/Person</strong>，验证 Persons 视图是否按预期工作。您可以尝试添加新的 Person，确认它是否成功保存到数据库。</p>

<p><img src="images/application-running.png?raw=true" alt="运行中的应用程序" title="运行中的应用程序" />
</p>

<p><em>添加 Person 视图</em></p></li>
</ol>

<hr />

<p><a name="Summary"></a></p>

<h2 id="Summary">小结</h2>

<p>在此动手实验中，您使用 MVC 4 基架创建了一个新的 MVC 网站，并将其发布到 Windows Azure 网站。网站发布和部署从未像在 Windows Azure 中这么容易。借助于 Microsoft Azure 平台的 Windows Azure 网站功能，Web 开发人员可以使用 Web 部署或 Git 等常用工具，几乎不需要对开发工作流进行任何更改，就能够轻松开发和部署 Web 应用程序。</p> </span>
		</div>
	<br/>
	<p><a href="#top">返回页首</a></p>


				</div>
			</section>
			<footer>
				<div class="footer-sitemap" style="border-top:0"></div>
				<div class="footer-bottom">
					<ul>
						<li class="footer-copyright"><a href="http://www.microsoft.com"><img alt="microsoft" src="images/microsoft.png" /></a></li>					
												<li><a href="https://github.com/WindowsAzure-TrainingKit/HOL-ASPNETAzureWebSites/issues" target="_new">记录问题</a></li>
												<li><a href="mailto:azcfeed@microsoft.com?subject=Windows Azure Training Kit">联系我们</a></li>
						<li><a href="EULA.htm">使用条款</a></li>
						<li><a href=".\">浏览内容</a></li>
						<li>&copy; 2012 Microsoft</li>
					</ul>
				</div>
			</footer>
			</div>
        </div>
    </div>
</body>
</html>

