<!DOCTYPE html>

<html class="no-js" lang="en" class="js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths">
<head id="ContentPlaceHolderDefault_Head1">
    <meta http-equiv="X-UA-Compatible" content="IE=9,chrome=1" />
    <meta charset=UTF-8" />
    <title>Windows Azure 培训包 - 使用 Windows Azure Service Bus 实现服务远程处理</title>
    <link rel="Stylesheet" type="text/css" media="all" href="styles/master.css" />
</head>
<body id="top" class="page-">
    <div id="page">
        <div id="wrapper" class="landingPage getStartedPage">            
            <div class="header">								
				<img alt="Windows Azure" src="images/azure-logo.png" /><span class="mainHomepageSubTitle"> 培训包 - 2012 年 12 月更新</span>								
			</div>			
			<div class="nav-menu-header">
				<nav>
					<ul>
						<li class="MenuLink-Selected">
							<a href="#">内容</a>
						</li>
												<li class="MenuLink">
							<a href="Source">设置</a>
						</li>
											</ul>
				
										
						<span id="github-btn" class="github-btn"> <a id="gh-btn" title="在 GitHub 中复制此存储库的分支" href="https://github.com/WindowsAzure-TrainingKit/HOL-ServiceBusServiceRemoting" target="_blank" class="gh-btn"> <span class="gh-ico"></span> <span id="gh-text" class="gh-text">分支</span> </a> </span> <span id="github-btn" class="github-btn github-watchers"> <a id="gh-btn" title="在 GitHub 中关注此存储库" href="https://github.com/WindowsAzure-TrainingKit/HOL-ServiceBusServiceRemoting" target="_blank" class="gh-btn"> <span class="gh-ico"></span> <span id="gh-text" class="gh-text">关注</span> </a> </span>
						
									
				</nav>
			</div>	        
		</span>
			<div id="content" class="textpage">
            <section id="content-container">
				<div id="content" class="textpage">
			    <a name="top"></a>
				
				

		<div class="content">
			<?xml version="1.0" encoding="iso-8859-1"?><span><p><a name="Title"></a></p>

<h1 id="Service_Remoting_With_Windows_Azure_Service_Bus">使用 Windows Azure Service Bus 实现服务远程处理</h1>

<p><a name="Overview"></a></p>

<h2 id="Overview">概述</h2>

<p>根据最新银行法规要求，Fictional Bank 必须拆分为两个单独的银行实体：Fictional Investment 和 Fictional Retail。IT 部门需要重组现有客户关系管理 (CRM)，以便这两个银行实体可以继续共享客户数据，即使它们不再位于同一公司网络范围内。Fictional Bank 的现有 CRM Web 服务主要使用 Windows Communication Foundation 编写并在本地承载。</p>

<p>最初，IT 部门决定继续在 Fictional Investment 本地承载 CRM Web 服务。为达到同时向这两个实体提供服务的目标，他们选择通过另一个服务公开 CRM 功能的子集，使用 Windows Azure Service Bus 在外部发布该服务，从而使位于 Fictional Retail 的客户端可以访问所需的功能。通过这一解决方案，IT 部门对服务和客户端应用程序进行最少量的更改（大部分限于 WCF 配置更改）即可实现其目标。</p>

<p>在第二阶段，Fictional Investment 将其应用程序服务承载功能外包出去。因此，他们将与 Fictional Retail 共享的服务重定位到 Windows Azure 并将其承载在一个辅助角色中。尽管共享的服务位于新位置，但因为 Service Bus 命名空间允许该服务继续发布到其现有位置，所以客户端察觉不到变化。</p>

<p>此动手实验使用一个示例应用程序引导您完成此方案，该应用程序以简单的方式体现了 Fictional Bank 的应用程序体系结构。</p>
<blockquote>
<p><strong>注意：</strong>在最新版本的 <a href="http://bit.ly/WindowsAzureTK">Windows Azure 培训包</a>或 <a href="https://github.com/WindowsAzure-TrainingKit/HOL-ServiceBusServiceRemoting-VS2012">GitHub</a> 中可以找到此动手实验的 Visual Studio 2012 版本。</p>
</blockquote>
<p><a name="Objectives"></a></p>

<h3 id="Objectives">目标</h3>

<p>在此动手实验中，您将学习如何执行以下操作：</p>

<ul>
<li><p>配置 Windows Azure 项目和服务命名空间</p></li>
<li><p>管理访问控制服务颁发者和规则以提供服务和客户端身份验证</p></li>
<li><p>在本地承载服务，然后使用 Service Bus 远程发布</p></li>
<li><p>使用 Service Bus 发布 Windows Azure 中承载的服务</p></li>
</ul>

<p><a name="Prerequisites"></a></p>

<h3 id="Prerequisites">先决条件</h3>

<p>下面是完成此动手实验需要满足的先决条件：</p>

<ul>
<li>IIS（带有 ASP.NET、WCF HTTP 激活）</li>
<li>Microsoft Visual Studio 2010</li>
<li><a href="http://www.microsoft.com/windowsazure/sdk/">Windows Azure SDK for .NET</a></li>
<li>Windows Azure 订阅 - <a href="http://aka.ms/WATK-FreeTrial">注册以免费试用</a></li>
</ul>
<blockquote>
<p><strong>注意：</strong>本实验设计为使用 Windows 7 操作系统。您必须能够访问 Internet 才能完成此实验。</p>
</blockquote>
<p><a name="Setup"></a></p>

<h3 id="Setup">设置</h3>

<p>为了执行此动手实验中的各项练习，需要对环境进行设置。</p>

<ol>
<li><p>打开 Windows 资源管理器窗口，浏览到此实验的 <strong>Source</strong> 文件夹。</p></li>
<li><p>使用提升的权限执行 <strong>Setup.cmd</strong> 文件以启动设置过程，该过程将配置您的环境并安装此实验的 Visual Studio 代码段。</p></li>
<li><p>如果显示“用户帐户控制”对话框，请确认操作以继续。</p></li>
</ol>
<blockquote>
<p><strong>注意：</strong>请务必在运行安装程序前检查此实验的所有依赖项。</p>
</blockquote>
<p><a name="UsingCodeSnippets"></a></p>

<h3 id="Using_the_Code_Snippets">使用代码段</h3>

<p>实验文档将指导您插入代码块。为方便起见，大部分代码是以 Visual Studio 代码段的形式提供的，您可以在 Visual Studio 2010 中使用而不必手动添加。</p>

<p>如果不熟悉 Visual Studio 代码段，并且希望了解如何使用这些代码段，可参考培训包的 <strong>Assets</strong> 文件夹中的 <strong>Setup.docx</strong> 文档，该文档中有一节说明如何使用这些代码段。</p>
<blockquote>
<p><strong>注意：</strong>每个练习都附带一个起始解决方案，它位于练习的 Begin 文件夹中，允许您独立执行每个练习。请注意，在练习期间添加的代码段不包含在这些起始解决方案中，在您完成练习前，这些代码段不一定起作用。在练习的源代码内，您还会看到一个 End 文件夹，其中包含在完成相应练习中的步骤之后所生成的 Visual Studio 解决方案代码。如果在进行此动手实验时需要更多帮助，可以使用这些解决方案作为指南。</p>
</blockquote>
<hr />

<p><a name="Exercises"></a></p>

<h2 id="Exercises">练习</h2>

<p>此动手实验包括以下练习：</p>

<ol>
<li><p><a href="#Exercise1">使用 Service Bus 远程承载服务</a></p></li>
<li><p><a href="#Exercise2">使用 Service Bus 发布 Windows Azure 中承载的服务</a></p></li>
</ol>

<p>完成此实验的估计时间：<strong>45 分钟</strong>。</p>
<blockquote>
<p><strong>注意：</strong>您首次启动 Visual Studio 时，必须选择一个预定义的设置集合。每个预定义的集合在设计上都对应于特定的开发风格，能够确定窗口布局、编辑器行为、IntelliSense 代码段和对话框选项。此实验中的过程介绍了在使用<strong>“常规开发设置”</strong>集合时，在 Visual Studio 中完成指定任务所需的操作。如果您为开发环境选择其他设置集合，需要考虑可能的过程差异。</p>
</blockquote>
<p><a name="Exercise1"></a></p>

<h3 id="Exercise_1_Using_the_Service_Bus_to_Host_Services_Remotely">练习 1：使用 Service Bus 远程承载服务</h3>

<p>在此练习中，您将从一个实现 Fictional Bank 应用程序体系结构的解决方案开始。该解决方案由 Fictional Investment 承载的两个 Web 服务组成。第一个服务是 CRM 数据服务，它为 Fictional Investment 提供应用程序服务。第二个服务是 FI 公共服务，它利用第一个服务并公开 CRM 功能的子集供 Fictional Retail 中的用户使用。</p>

<p><img src="./Images/Application-architecture-with-services-and-clients-directly-connected-.png?raw=true" alt="直接连接服务和客户端的应用程序体系结构" title="直接连接服务和客户端的应用程序体系结构" />
        </p>

<p><em>直接连接服务和客户端的应用程序体系结构</em></p>

<p>一开始，您将运行服务以重现如下方案：所有服务都在本地承载，使用 <strong>NetTcpBinding</strong> 类直接与其客户端进行通信。当所有服务均位于同一网络并且路径中没有中间防火墙或网络地址转换 (NAT) 设备时，这样的方案是可行的。</p>

<p>但是，Fictional Retail 客户端不在 Fictional Investment 网络内。为了使服务可供 Fictional Retail 客户端在外部访问，需要使用 <strong>NetTcpRelayBinding</strong> 类和公共端点地址更新 WCF 配置，从而通过 Service Bus 公开 FI 公共服务。这样，从任意位置都可以访问服务，从而实现建议方案中的目标之一。</p>

<p><a name="Ex1Task1"></a></p>

<h4 id="Task_1_-_Running_the_Service_On-Premises">任务 1 - 在本地运行服务</h4>

<p>在此任务中，您将运行解决方案并使用 <strong>NetTcpBinding</strong> 对其进行本地测试以重现服务和客户端位于同一网络范围的完全本地方案。</p>

<ol>
<li><p><strong>从“开始”|“所有程序”| Microsoft Visual Studio 2010</strong> 打开 Visual Studio。</p></li>
<li><p>在<strong>“文件”</strong>菜单中，选择<strong>“打开</strong><strong>项目”</strong>。在<strong>“打开项目”</strong>对话框中，浏览到 <strong>\Source\Ex1-ServiceBusRemoting\Begin</strong>，选择 <strong>ServiceRemoting.sln</strong>，然后单击<strong>“打开”</strong>。</p>

<p>该解决方案包含以下项目：</p>

<table><thead>
<tr>
<td><strong>Common</strong></td>
<td>一个由解决方案中的所有项目共享的库项目，其中包含服务和数据协定以及应用程序中的 Web 服务客户端代理</td>
</tr>
</thead><tbody>
<tr>
<td><strong>FictionalInvestment.Crm.Data</strong></td>
<td>控制台应用程序，它承载 Fictional Bank 的 CRM 应用程序服务</td>
</tr>
<tr>
<td><strong>FictionalInvestment.PublicServices</strong></td>
<td>控制台应用程序，它承载 Fictional Bank 的公共服务</td>
</tr>
<tr>
<td><strong>FictionalRetail.Crm.Client</strong></td>
<td>Windows 窗体应用程序，它使用 CRM 提供的公共服务</td>
</tr>
</tbody></table>
<p><img src="./Images/Solution-Explorer-showing-the-CRM-application-components-C.png?raw=true" alt="显示 CRM 应用程序组件的解决方案资源管理器" title="显示 CRM 应用程序组件的解决方案资源管理器" />
  </p>

<p><em>显示 CRM 应用程序组件的解决方案资源管理器</em></p></li>
<li><p>配置解决方案以同时启动客户端以及 CRM 数据服务和 FI 公共服务。为此，请在<strong>解决方案资源管理器</strong>中，右键单击 <strong>ServiceRemoting</strong> 解决方案，然后选择<strong>“设置启动项目”</strong>。在<strong>“解决方案‘ServiceRemoting’属性页”</strong>对话框中，选择标记为<strong>“多启动项目”</strong>的选项，然后将 <strong>Fictional.Investment.Crm.Data</strong>、 <strong>Fictional.Investment.PublicServices</strong> 和 <strong>FictionalRetail.Crm.Client</strong> 项目的<strong>“操作”</strong>设置为<em><strong>“启动”</strong></em>。确保项目的顺序如下图所示。要更改启动顺序，请在列表选择一个项目，然后单击上下箭头移动它。按<strong>“确定”</strong>确认更改。</p>

<p><img src="./Images/Configuring-the-start-up-order-of-the-projects-in-the-solution.png?raw=true" alt="配置解决方案中项目的启动顺序" title="配置解决方案中项目的启动顺序" />
  </p>

<p><em>配置解决方案中项目的启动顺序</em></p></li>
<li><p>按 <strong>F5</strong> 生成解决方案并启动这两个服务和客户端应用程序。</p></li>
<li><p>请注意，每个服务都显示它所侦听的 URL，CRM 数据服务和 FI 公共服务当前在使用 net.tcp 并侦听环回地址 (localhost)。</p></li>
<li><p>切换到 <strong>Fictional Retail CRM Client</strong> 应用程序。用户界面会提供客户列表以及客户属于两个银行实体中的哪一个。</p></li>
<li><p>通过选中客户名称旁边的复选框并单击 <strong>Move to Fictional Retail Bank</strong>（移到 Fictional Retail Bank），将一个或多个客户从 Fictional Investment 移到 Fictional Retail。在 CRM 数据服务和 FI 公共服务的控制台窗口中观察状态消息，以确认操作是否成功。</p>

<p><img src="./Images/Testing-the-on-premises-scenario-with-a-NetTcpBinding.png?raw=true" alt="使用 NetTcpBinding 测试本地方案" title="使用 NetTcpBinding 测试本地方案" />
  </p>

<p><em>使用 NetTcpBinding 测试本地方案</em></p>
<blockquote>
<p><strong>注意：</strong>客户端应用程序调用 CRM 服务的 <strong>ListCustomers</strong> 和 <strong>MoveCustomersToBankingEntity</strong> 操作，前者用于检索客户列表，后者用于将客户转移到另一个实体。</p>
</blockquote></li>
<li><p>在两个控制台窗口中按 <strong>Enter</strong> 终止这两个服务并退出客户端应用程序。</p></li>
</ol>

<p><a name="Ex1Task2"></a></p>

<h4 id="Task_2_-_Provisioning_and_Configuring_the_Service_Bus_Namespace">任务 2 - 设置和配置 Service Bus 命名空间</h4>

<p>在此任务中，您将创建一个新的 Windows Azure Service Bus 命名空间。</p>

<ol>
<li><p>导航到 <a href="http://manage.windowsazure.com"><a href="http://manage.windowsazure.com/">http://manage.windowsazure.com/</a></a>。如果您尚未登录，系统会提示您输入 <strong>Microsoft 帐户</strong>凭据。</p></li>
<li><p>在左窗格中单击 <strong>Service Bus</strong>。</p>

<p><img src="./Images/Configuring-Windows-Azure-Service-bus.png?raw=true" alt="配置 Windows Azure Service Bus" title="配置 Windows Azure Service Bus" />
</p>

<p><em>配置 Windows Azure Service Bus</em></p></li>
<li><p>创建服务命名空间。服务命名空间为通过 Service Bus 公开的每个应用程序提供应用程序边界，并用于为应用程序构造 Service Bus 端点。要创建服务命名空间，请单击底部栏中的<strong>“创建”</strong>。</p>

<p><img src="./Images/Creating-a-New-Namespace.png?raw=true" alt="创建新命名空间" title="创建新命名空间" />
</p>

<p><em>创建新命名空间</em></p></li>
<li><p>在<strong>“创建命名空间”</strong>对话框中，为您的服务<strong>命名空间</strong>输入一个名称，然后选择要运行该服务的<strong>地区</strong>。服务名必须全局唯一，因为它们在云中承载，可由您确定授予其访问权限的任何人员访问。</p>

<p><img src="./Images/Creating-a-new-Service-Namespace.png?raw=true" alt="创建新服务命名空间" title="创建新服务命名空间" />
</p>

<p><em>创建新服务命名空间</em></p>
<blockquote>
<p><strong>注意：</strong>服务的设置操作可能需要几分钟时间。</p>
</blockquote></li>
<li><p>在命名空间处于活动状态时，选择服务所在行，在底部菜单中单击<strong>“访问密钥”</strong>。</p>

<p><img src="Images/view-access-key.png?raw=true" alt="查看访问密钥" title="查看访问密钥" />
</p>

<p><em>查看访问密钥</em></p></li>
<li><p>记下<strong>“默认颁发者”</strong>和<strong>“默认密钥”</strong>中显示的值，然后单击<strong>“确定”</strong>。稍后使用访问控制来进行身份验证时，需要用到这些值。</p>

<p><img src="./Images/Service-Bus-default-keys.png?raw=true" alt="Service Bus 默认密钥" title="Service Bus 默认密钥" />
  </p>

<p><em>Service Bus 默认密钥</em></p></li>
</ol>

<p><a name="Ex1Task3"></a></p>

<h4 id="Task_3_-_Configuring_Access_Control_Service_for_Authentication">任务 3 - 配置访问控制服务以进行身份验证</h4>

<p>Windows Azure 访问控制服务 (ACS) 服务用于控制 Service Bus 身份验证。您可以利用 ACS 对侦听 Service Bus 的主机以及使用总线连接到服务的客户端进行身份验证。</p>

<p>访问控制服务中的颁发者表示一个可信应用程序。使用 ACS，可以创建一些规则，用以将来自可信标识提供者的传入声明映射到由应用程序或服务使用的 ACS 颁发的声明。更具体地说，对于 Service Bus，这些规则将颁发者的标识映射到一系列声明，Service Bus 使用这些声明确定允许颁发者执行哪些操作。例如，由 ACS 颁发的 <em>Listen</em> 声明使应用程序可以公开 Service Bus 上的服务，而 <em>Send</em> 声明使应用程序可以发送消息。</p>

<p>使用管理门户可以管理访问控制服务资源，包括其可信颁发者和转换规则。此外，也可在 Service Bus 示例中包含一个命令行工具 (sbaztool.exe)，该工具可用于管理访问控制服务资源。</p>

<p>在此任务中，您将使用管理门户创建两个颁发者，一个颁发者表示 Fictional Investment，另一个颁发者表示 Fictional Retail。然后，将创建一些规则，用于将 Fictional Investment 颁发者的标识映射到 <em>Listen</em> 和 <em>Send</em> 声明，使该颁发者可以发布服务和发送消息；此外，还将创建另一个规则，用于将 Fictional Retail 颁发者的标识映射到 <em>Send</em> 声明，使该颁发者可以连接到 Service Bus 上发布的服务并向这些服务发送消息。</p>
<blockquote>
<p><strong>注意：</strong>有关使用命令行工具创建颁发者和访问控制服务规则的替代过程，请参阅“附录 1 - 使用 Windows Azure 访问控制管理命令行工具”。</p>
</blockquote>
<ol>
<li><p>在 Windows Azure 管理门户中，转至 <strong>Service Bus</strong>，选择刚刚创建的命名空间。</p></li>
<li><p>从屏幕底部的菜单中选择<strong>“访问密钥”</strong>。</p></li>
<li><p>打开对话框后，单击<strong>“打开 ACS 管理门户”</strong>。</p>

<p><img src="Images/opening-acs-portal.png?raw=true" alt="打开 acs 门户" />
</p>

<p><em>打开 ACS 管理门户</em></p></li>
<li><p>在访问控制服务门户中，从左窗格菜单中选择<strong>“服务标识”</strong>。</p>

<p><img src="./Images/Access-Control-Service-Portal.png?raw=true" alt="访问控制服务门户" title="访问控制服务门户" />
  </p>

<p><em>访问控制服务门户</em></p></li>
<li><p>单击<strong>“添加”</strong>链接以添加新标识。</p>

<p><img src="./Images/Service-Identities-page.png?raw=true" alt="“服务标识”页" title="“服务标识”页" />
  </p>

<p><em>“服务标识”页</em></p></li>
<li><p>在<strong>“添加服务标识”</strong>页中，在<strong>“服务标识设置”</strong>下的<strong>“名称”</strong>字段中输入“fictionalInvestment”。在<strong>“凭据设置”</strong>下，选取“对称密钥”作为类型，然后单击<strong>“生成”</strong>按钮为此凭据生成对称密钥。记下此密钥，在下一步中将用到它。最后，将<strong>“到期日期”</strong>更改为“12/31/9999”，然后单击<strong>“保存”</strong>按钮。</p>

<p><img src="./Images/Adding-a-Service-Identity.png?raw=true" alt="添加服务标识" title="添加服务标识" />
</p>

<p><em>添加服务标识。</em></p></li>
<li><p>现在，单击<strong>“添加凭据”</strong>链接，将新凭据添加到“fictionalInvestment”标识。</p>

<p><img src="./Images/Edit-Service-Identity.png?raw=true" alt="编辑服务标识" title="编辑服务标识" />
</p>

<p><em>编辑服务标识</em></p></li>
<li><p>在<strong>“添加凭据”</strong>页中，选取“密码”作为<strong>“凭据类型”</strong>。然后，在<strong>“密码”</strong>字段中输入上一步中生成的对称密钥。最后，将<strong>“到期日期”</strong>更改为“12/31/9999”，然后单击<strong>“保存”</strong>。</p>

<p><img src="./Images/Add-Credential.png?raw=true" alt="添加凭据" title="添加凭据" />
    </p>

<p><em>添加凭据</em></p></li>
<li><p>在<strong>“编辑服务标识”</strong>页中，单击<strong>“保存”</strong>按钮以保存此前所做的所有更改。</p>

<p><img src="./Images/Saving-Service-Identity-information.png?raw=true" alt="保存服务标识信息" title="保存服务标识信息" />
  </p>

<p><em>保存服务标识信息</em></p></li>
<li><p>现在，创建一个名为“fictionalRetail”的新标识。为此，请重复步骤 5 到 9，但使用“fictionalRetail”作为<strong>“标识名称”</strong>。</p></li>
<li><p>现在，您将创建一些规则以将颁发者的标识映射到一系列声明，Service Bus 使用这些声明确定颁发者可执行哪些操作。为此，在左窗格菜单中单击<strong>“规则组”</strong>链接。您将首先为“fictionalInvestment”标识创建“Send”规则。</p>

<p><img src="./Images/Adding-Rule-Groups.png?raw=true" alt="添加规则组" title="添加规则组" />
  </p>

<p><em>添加规则组</em></p>
<blockquote>
<p><strong>注意：</strong>规则描述在收到特定颁发者获取特定资源令牌的请求时所执行的逻辑。如果给定传入声明类型和值，规则会指定在 Windows Azure ACS 通过响应颁发的令牌中包含哪个声明类型和值。传出声明的值指定服务是否允许访问请求的资源或操作（如果访问被拒绝，则不存在传出声明）。<br/>这种情况下，规则将 Fictional Investment 的颁发者 ID 映射到 <em>Listen</em> Service Bus 操作。</p>
</blockquote></li>
<li><p>在<strong>“规则组”</strong>页中，单击<strong>“规则组”</strong>下的<strong>“Service Bus 默认规则组”</strong>对其进行编辑。</p>

<p><img src="./Images/Editing-the-Default-Rule-Group-for-ServiceBus.png?raw=true" alt="编辑 Service Bus 默认规则组" title="编辑 Service Bus 默认规则组" />
  </p>

<p><em>编辑 Service Bus 默认规则组</em></p></li>
<li><p>在<strong>“编辑规则组”</strong>页中，单击<strong>“添加”</strong>以添加一个新规则。</p>

<p><img src="./Images/Adding-Editing-Rule-Group.png?raw=true" alt="添加/编辑规则组" title="添加/编辑规则组" />
  </p>

<p><em>添加/编辑规则组</em></p></li>
<li><p>在<strong>“添加声明规则”</strong>页的<strong>“如果”</strong>下选择“访问控制服务”作为<strong>“输入声明颁发者”</strong>。在<strong>“输入声明类型”</strong>下选择“选择类型”并保留组合框的默认值。在<strong>“输入声明值”</strong>下选择<strong>“输入值”</strong>，然后输入“fictionalInvestment”。在<strong>“则”</strong>下选择<strong>“输入类型”</strong>作为<strong>“输出声明类型”</strong>，然后输入“net.windows.servicebus.action”。选择<strong>“输入值”</strong>作为<strong>“输出声明值”</strong>，然后输入“Listen”。最后单击<strong>“保存”</strong>按钮。</p>

<p><img src="./Images/Adding-a-Listen-Claim-Rule.png?raw=true" alt="添加 Listen 声明规则" title="添加 Listen 声明规则" />
  </p>

<p><em>添加 Listen 声明规则</em></p></li>
<li><p>现在，您将向 fictionalInvestment 标识添加“Send”规则。在<strong>“编辑规则组”</strong>页中，单击<strong>“添加”</strong>以添加一个新规则。然后，在<strong>“添加声明规则”</strong>页的<strong>“如果”</strong>下选择“访问控制服务”作为<strong>“输入声明颁发者”</strong>。在<strong>“输入声明类型”</strong>下选择“选择类型”并保留组合框的默认值。在<strong>“输入声明值”</strong>下选择<strong>“输入值”</strong>，然后输入“fictionalInvestment”。在<strong>“则”</strong>下选择<strong>“输入类型”</strong>作为<strong>“输出声明类型”</strong>，然后输入“net.windows.servicebus.action”。选择<strong>“输入值”</strong>作为<strong>“输出声明值”</strong>，然后输入“Send”。最后单击<strong>“保存”</strong>按钮。</p>

<p><img src="./Images/Adding-a-Send-Claim-Rule2.png?raw=true" alt="添加 Send 声明规则" title="添加 Send 声明规则" />
  </p>

<p><em>添加 Send 声明规则</em></p>
<blockquote>
<p><strong>注意：</strong>向 <em>fictionalInvestment</em> 颁发者授予 <em>Send</em> 权限是为了练习 2 做准备，在该练习中会将 FI 公共服务重定位到 Windows Azure，然后在 Service Bus 上发布 CRM 数据服务以允许第二个服务访问它。</p>
</blockquote></li>
<li><p>最后，向 <em>fictionalRetail</em> 颁发者添加“Send”规则。在<strong>“编辑规则组”</strong>页中，单击<strong>“添加”</strong>以添加一个新规则。然后，在<strong>“添加声明规则”</strong>页的<strong>“如果”</strong>下选择“访问控制服务”作为<strong>“输入声明颁发者”</strong>。在<strong>“输入声明类型”</strong>下选择“选择类型”并保留组合框的默认值。在<strong>“输入声明值”</strong>下选择<strong>“输入值”</strong>，然后输入“fictionalRetail”。在<strong>“则”</strong>下选择<strong>“输入类型”</strong>作为<strong>“输出声明类型”</strong>，然后输入“net.windows.servicebus.action”。选择<strong>“输入值”</strong>作为<strong>“输出声明值”</strong>，然后输入“Send”。最后单击<strong>“保存”</strong>按钮。</p>

<p><img src="./Images/Adding-a-Send-Claim-Rule.png?raw=true" alt="添加 Send 声明规则" title="添加 Send 声明规则" />
  </p>

<p><em>添加 Send 声明规则</em></p>
<blockquote>
<p><strong>注意：</strong>现在，您已为两个服务及客户端应用程序创建了颁发者并为服务颁发者设置了规则，向服务颁发者授予了 <em>Listen</em> 和 <em>Send</em> 权限并向客户端应用程序授予了 <em>Send</em> 权限。</p>
</blockquote></li>
<li><p>在<strong>“编辑规则组”</strong>页中，单击<strong>“保存”</strong>以保存所有更改。</p>

<p><img src="./Images/Saving-Rule-Group-changes.png?raw=true" alt="保存规则组更改" title="保存规则组更改" />
  </p>

<p><em>保存规则组更改</em></p></li>
</ol>

<p><a name="Ex1Task4"></a></p>

<h4 id="Task_4_-_Configuring_the_Service_to_Listen_on_the_Windows_Azure_Service_Bus">任务 4 - 配置服务以侦听 Windows Azure Service Bus</h4>

<p>FI 公共服务将其端点注册到 Service Bus，Service Bus 通过特定的可检测 URI 公开该服务，使其可供任何人随时随地使用，即使该服务位于防火墙后也是如此。<br/><img src="./Images/Application-architecture-with-services-and-clients-connected-via-the-Service-Bus.png?raw=true" alt="通过 Service Bus 连接服务和客户端的应用程序体系结构 " title="通过 Service Bus 连接服务和客户端的应用程序体系结构 " />
  </p>

<p><em>通过 Service Bus 连接服务和客户端的应用程序体系结构</em></p>

<p>在 Service Bus 上发布 FI 公共服务的操作十分简单。您只需添加对 Service Bus 程序集的引用，将该服务使用的绑定从 <strong>NetTcpBinding</strong> 更改为 <strong>NetTcpRelayBinding</strong>，然后将该服务的端点地址更新为它在云中的新位置。</p>

<p>在此任务中，您将更新 Fictional Bank 应用程序以通过 Service Bus 发布和使用该应用程序所提供的服务。</p>

<ol>
<li><p>从<strong>“开始”|“所有程序”| Microsoft Visual Studio 2010</strong> 打开 Visual Studio（如果尚未打开）。</p></li>
<li><p>在<strong>“文件”</strong>菜单中，选择<strong>“打开项目”</strong>。在<strong>“打开项目”</strong>对话框中，浏览至 <strong>\Source\Ex1-ServiceBusRemoting\Begin</strong>，选择 <strong>Begin.sln</strong>，然后单击<strong>“打开”</strong>。</p></li>
<li><p>在 FI 公共服务项目中添加对 Service Bus 程序集的引用。为此，在<strong>解决方案资源管理器</strong>中，右键单击 <strong>FictionalInvestment.PublicServices</strong> 项目，然后选择<strong>“添加引用”</strong>。在 <strong>.NET</strong> 选项卡中，选择 <strong>Microsoft.ServiceBus</strong> 程序集，并单击<strong>“确定”</strong>。</p>
<blockquote>
<p><strong>注意：</strong>请确认选择了 1.8.0.0 版 <strong>Microsoft.ServiceBus</strong> 程序集。如果您在 <strong>.NET</strong> 选项卡中找不到 <strong>Microsoft.ServiceBus</strong> 程序集，则使用<strong>“浏览”</strong>选项卡在 <strong>%Program Files%\Microsoft SDKs\Windows Azure.NET SDK\2012-10\ref</strong> 文件夹定位此程序集。</p>
</blockquote>
<p><img src="./Images/Locating-the-Microsoft.ServiceBus-assembly-in-the-SDK-Assemblies-folder.png?raw=true" alt="在 SDK 程序集文件夹中定位 Microsoft.ServiceBus 程序集" title="在 SDK 程序集文件夹中定位 Microsoft.ServiceBus 程序集" />
  </p>

<p><em>在 SDK 程序集文件夹中定位 Microsoft.ServiceBus 程序集</em></p></li>
<li><p>打开 <strong>FictionalInvestment.PublicServices </strong>项目的 <strong>App.config</strong> 文件。</p></li>
<li><p>在 <strong>system.ServiceModel</strong> 的 <strong>services</strong> 节中，找到名为 <strong>FictionalInvestment.PublicServices.CrmPublicService</strong> 的服务的 <strong>endpoint</strong> 元素。</p></li>
<li><p>对于此端点，将 <strong>address</strong> 属性的值更新为 <em><strong>sb://[YOUR-NAMESPACE].servicebus.windows.net/CrmPublicService</strong></em>，其中 <strong>[YOUR_NAMESPACE]</strong> 是为项目定义的 Service Bus 命名空间。</p>
<blockquote>
<p><strong>注意：</strong>服务命名空间为每个通过 Service Bus 公开的应用程序提供应用程序边界。在 Windows Azure 门户定义命名空间。</p>
</blockquote></li>
<li><p>下面，将此端点的 <strong>binding</strong> 属性的值从 <strong>netTcpBinding</strong> 更改为 <strong>netTcpRelayBinding</strong>。</p></li>
<li><p>最后，将新的 <strong>behaviorConfiguration</strong> 属性添加到 endpoint 元素，并将其值设置为 <strong>serviceBusCredentialBehavior</strong>。将在下一步中定义此行为。更新后的 endpoint 元素应如下图所示，只是命名空间取决于您的具体情况。</p>

<p><img src="./Images/Configuring-the-endpoint-used-to-publish-the-service-on-the-Service-Bus.png?raw=true" alt="配置用于在 Service Bus 上发布服务的端点" title="配置用于在 Service Bus 上发布服务的端点" />
  </p>

<p><em>配置用于在 Service Bus 上发布服务的端点</em></p></li>
<li><p>在 <strong>system.serviceModel</strong> 中，为上一步中的端点提供指定的行为配置。此行为将为 Service Bus 提供对服务发布服务器进行身份验证所需的凭据。要提供这些凭据，请插入 <strong>behaviors</strong> 元素，如以下（突出显示的）配置段所示。将 <strong>issuerSecret</strong> 属性的值替换为上一任务中创建颁发者时记下的 <em>fictionalInvestment</em> 颁发者的<strong>当前密钥</strong>。</p>

<p>（代码段 - <em>Service Remoting with Service Bus Lab - Ex01 CredentialsBehavior</em>）</p>

<span class="codelanguage">XML</span><pre><code class="XML"><span style="color:#0000FF">&lt;</span><span style="color:#800000">configuration</span><span style="color:#0000FF">&gt;</span>
  <span style="color:#0000FF">&lt;</span><span style="color:#800000">system.serviceModel</span><span style="color:#0000FF">&gt;</span>
    <span style="color:#0000FF">&lt;</span><span style="color:#800000">services</span><span style="color:#0000FF">&gt;</span>
      ...
    <span style="color:#0000FF">&lt;/</span><span style="color:#800000">services</span><span style="color:#0000FF">&gt;</span>

    <span style="color:#0000FF">&lt;</span><span style="color:#800000">client</span><span style="color:#0000FF">&gt;</span>
      ...
    <span style="color:#0000FF">&lt;/</span><span style="color:#800000">client</span><span style="color:#0000FF">&gt;</span>

    <span style="color:#0000FF">&lt;</span><span style="color:#800000">behaviors</span><span style="color:#0000FF">&gt;</span>
      <span style="color:#0000FF">&lt;</span><span style="color:#800000">endpointBehaviors</span><span style="color:#0000FF">&gt;</span>
        <span style="color:#0000FF">&lt;</span><span style="color:#800000">behavior</span> <span style="color:#FF0000">name</span>=<span style="color:#0000FF">&quot;serviceBusCredentialBehavior&quot;</span><span style="color:#0000FF">&gt;</span>
          <span style="color:#0000FF">&lt;</span><span style="color:#800000">transportClientEndpointBehavior</span> <span style="color:#FF0000">credentialType</span>=<span style="color:#0000FF">&quot;SharedSecret&quot;</span><span style="color:#0000FF">&gt;</span>
            <span style="color:#0000FF">&lt;</span><span style="color:#800000">clientCredentials</span><span style="color:#0000FF">&gt;</span>
              <span style="color:#0000FF">&lt;</span><span style="color:#800000">sharedSecret</span> <span style="color:#FF0000">issuerName</span>=<span style="color:#0000FF">&quot;fictionalInvestment&quot;</span> 
                            <span style="color:#FF0000">issuerSecret</span>=<span style="color:#0000FF">&quot;[YOUR_FI_ISSUER_KEY]&quot;</span><span style="color:#0000FF">/&gt;</span>
            <span style="color:#0000FF">&lt;/</span><span style="color:#800000">clientCredentials</span><span style="color:#0000FF">&gt;</span>
          <span style="color:#0000FF">&lt;/</span><span style="color:#800000">transportClientEndpointBehavior</span><span style="color:#0000FF">&gt;</span>
        <span style="color:#0000FF">&lt;/</span><span style="color:#800000">behavior</span><span style="color:#0000FF">&gt;</span>
      <span style="color:#0000FF">&lt;/</span><span style="color:#800000">endpointBehaviors</span><span style="color:#0000FF">&gt;</span>
    <span style="color:#0000FF">&lt;/</span><span style="color:#800000">behaviors</span><span style="color:#0000FF">&gt;</span>
  <span style="color:#0000FF">&lt;/</span><span style="color:#800000">system.serviceModel</span><span style="color:#0000FF">&gt;</span>
<span style="color:#0000FF">&lt;/</span><span style="color:#800000">configuration</span><span style="color:#0000FF">&gt;</span>
</code></pre></li>
<li><p>将以下（突出显示的）代码块插入 <strong>system.serviceModel</strong> 节以启用行为和绑定扩展。</p>

<p>（代码段 - <em>Service Remoting with Service Bus Lab - Ex01 BehaviorExtensions</em>）</p>

<span class="codelanguage">XML</span><pre><code class="XML"><span style="color:#0000FF">&lt;</span><span style="color:#800000">configuration</span><span style="color:#0000FF">&gt;</span>
  ...
  <span style="color:#0000FF">&lt;</span><span style="color:#800000">system.serviceModel</span><span style="color:#0000FF">&gt;</span>
    ...
    <span style="color:#0000FF">&lt;</span><span style="color:#800000">extensions</span><span style="color:#0000FF">&gt;</span>
      <span style="color:#0000FF">&lt;</span><span style="color:#800000">behaviorExtensions</span><span style="color:#0000FF">&gt;</span>
        <span style="color:#0000FF">&lt;</span><span style="color:#800000">add</span> <span style="color:#FF0000">name</span>=<span style="color:#0000FF">&quot;transportClientEndpointBehavior&quot;</span>
             <span style="color:#FF0000">type</span>=<span style="color:#0000FF">&quot;Microsoft.ServiceBus.Configuration.TransportClientEndpointBehaviorElement, Microsoft.ServiceBus, Version=1.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;</span><span style="color:#0000FF">/&gt;</span>
      <span style="color:#0000FF">&lt;/</span><span style="color:#800000">behaviorExtensions</span><span style="color:#0000FF">&gt;</span>
      <span style="color:#0000FF">&lt;</span><span style="color:#800000">bindingExtensions</span><span style="color:#0000FF">&gt;</span>
        <span style="color:#0000FF">&lt;</span><span style="color:#800000">add</span> <span style="color:#FF0000">name</span>=<span style="color:#0000FF">&quot;netTcpRelayBinding&quot;</span>
             <span style="color:#FF0000">type</span>=<span style="color:#0000FF">&quot;Microsoft.ServiceBus.Configuration.NetTcpRelayBindingCollectionElement, Microsoft.ServiceBus, Version=1.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;</span><span style="color:#0000FF">/&gt;</span>
      <span style="color:#0000FF">&lt;/</span><span style="color:#800000">bindingExtensions</span><span style="color:#0000FF">&gt;</span>
    <span style="color:#0000FF">&lt;/</span><span style="color:#800000">extensions</span><span style="color:#0000FF">&gt;</span>
  <span style="color:#0000FF">&lt;/</span><span style="color:#800000">system.serviceModel</span><span style="color:#0000FF">&gt;</span>
<span style="color:#0000FF">&lt;/</span><span style="color:#800000">configuration</span><span style="color:#0000FF">&gt;</span>
</code></pre></li>
<li><p>要完成在 Service Bus 上发布服务所需的更改，请配置服务的连接模式。打开 <strong>FictionalInvestment.PublicServices</strong> 项目中的 <strong>Program.cs</strong> 文件，将以下（突出显示的）代码插入方法 <strong>Main</strong> 的开头。</p>

<p>（代码段 - <em>Service Remoting with Service Bus Lab - Ex01 ConnectivityMode</em>）</p>

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">internal</span> <span style="color:#0000FF">static</span> <span style="color:#0000FF">void</span> Main() {
  <span style="color:#008000">// Tcp: All communication to the Service Bus is performed using outbound TCP connections.</span>
  <span style="color:#008000">// Http: All communication to Service Bus is performed using outbound HTTP connections.</span>
  <span style="color:#008000">// AutoDetect: The Service bus client automatically selects between TCP and HTTP connectivity.</span>
  Microsoft.ServiceBus.ServiceBusEnvironment.SystemConnectivity.Mode = Microsoft.ServiceBus.ConnectivityMode.AutoDetect;

  <span style="color:#0000FF">using</span> (ServiceHost serviceHost = <span style="color:#0000FF">new</span> ServiceHost(<span style="color:#0000FF">typeof</span>(CrmPublicService))) { ... } }
</code></pre>
<blockquote>
<p><strong>注意：</strong>侦听器服务与 Windows Azure Service Bus 之间的默认连接模式为 TCP。不过，如果网络环境不允许 HTTP 以外的出站 TCP 连接（例如，由于 Fictional Investment 的 IT 策略发生变化而不允许），您可以配置相应的绑定以使用 HTTP 连接与 Service Bus 进行通信。大多数情况下，建议将“模式”设置为“自动检测”。这会指示应用程序尝试使用 TCP 连接到 Service Bus；但如果无法这样做，则将使用 HTTP。</p>
</blockquote></li>
</ol>

<p><a name="Ex1Task5"></a></p>

<h4 id="Task_5_-_Configuring_the_Client_Application_to_Connect_to_a_Service_on_the_Windows_Azure_Service_Bus">任务 5 - 配置客户端应用程序以连接到 Windows Azure Service Bus 上的服务</h4>

<p>在上一任务中，已将服务配置为侦听 Service Bus。在此任务中，将以类似的方法设置客户端应用程序以允许它连接到服务。</p>

<ol>
<li><p>在客户端应用程序项目中添加对 Service Bus 程序集的引用。为此，在<strong>解决方案资源管理器</strong>中，右键单击 <strong>FictionalRetail.Crm.Client</strong> 项目，然后选择<strong>“添加引用”</strong>。在 <strong>.NET</strong> 选项卡中，选择 <strong>Microsoft.ServiceBus</strong> 程序集，并单击<strong>“确定”</strong>。</p>
<blockquote>
<p><strong>注意：</strong>请确认选择了 1.8.0.0 版 <strong>Microsoft.ServiceBus</strong> 程序集。如果您在 <strong>.NET</strong> 选项卡中找不到 <strong>Microsoft.ServiceBus</strong> 程序集，则使用<strong>“浏览”</strong>选项卡在 <strong>%ProgramFiles%\Microsoft SDKs\Windows Azure.NET SDK\2012-10\ref</strong> 文件夹定位此程序集。</p>
</blockquote></li>
<li><p>在 <strong>FictionalRetail.Crm.Client</strong> 项目中打开 <strong>App.config</strong> 文件。</p></li>
<li><p>在 <strong>system.serviceModel</strong> 的 <strong>client</strong> 节中找到单个 <strong>endpoint</strong> 元素。</p></li>
<li><p>将端点的 <strong>address</strong> 值更改为 <em><strong>sb://[YOUR-NAMESPACE].servicebus.windows.net/CrmPublicService</strong></em>，其中 <strong>[YOUR_NAMESPACE]</strong> 是为项目定义的 Service Bus 命名空间。</p></li>
<li><p>然后，将 <strong>binding</strong> 属性的值从 <strong>netTcpBinding</strong> 更改为 <strong>netTcpRelayBinding</strong>。</p></li>
<li><p>要完成端点配置，请将新的 <strong>behaviorConfiguration</strong> 属性添加到 endpoint 元素，并将其值设置为 <strong>serviceBusCredentialBehavior</strong>。</p>

<p>请注意，此处主要将对客户端所做的更改同样应用于服务配置。更新后的服务元素应如下图所示。</p>

<p><img src="./Images/Configuring-the-client-to-consume-a-service-on-the-Service-Bus.png?raw=true" alt="配置客户端以使用 Service Bus 上的服务" title="配置客户端以使用 Service Bus 上的服务" />
  </p>

<p><em>配置客户端以使用 Service Bus 上的服务</em></p></li>
<li><p>最后，如下所示，将 <strong>behaviors</strong> 元素添加到 <strong>system.serviceModel</strong> 节，以定义上一步中为端点指定的行为配置。此行为将为 Service Bus 提供对客户端应用程序进行身份验证所需的凭据。将 <strong>issuerSecret</strong> 属性的值替换为上一任务中创建颁发者时记下的 <em>fictionalRetail</em> 颁发者的<strong>当前密钥</strong>。</p>

<p>（代码段 - <em>Service Remoting with Service Bus Lab - Ex01 CredentialsBehaviorClient</em>）</p>

<span class="codelanguage">XML</span><pre><code class="XML"><span style="color:#0000FF">&lt;</span><span style="color:#800000">configuration</span><span style="color:#0000FF">&gt;</span>
  <span style="color:#0000FF">&lt;</span><span style="color:#800000">system.serviceModel</span><span style="color:#0000FF">&gt;</span>
    <span style="color:#0000FF">&lt;</span><span style="color:#800000">client</span><span style="color:#0000FF">&gt;</span>
      ...
    <span style="color:#0000FF">&lt;/</span><span style="color:#800000">client</span><span style="color:#0000FF">&gt;</span>

    <span style="color:#0000FF">&lt;</span><span style="color:#800000">behaviors</span><span style="color:#0000FF">&gt;</span>
      <span style="color:#0000FF">&lt;</span><span style="color:#800000">endpointBehaviors</span><span style="color:#0000FF">&gt;</span>
        <span style="color:#0000FF">&lt;</span><span style="color:#800000">behavior</span> <span style="color:#FF0000">name</span>=<span style="color:#0000FF">&quot;serviceBusCredentialBehavior&quot;</span><span style="color:#0000FF">&gt;</span>
          <span style="color:#0000FF">&lt;</span><span style="color:#800000">transportClientEndpointBehavior</span> <span style="color:#FF0000">credentialType</span>=<span style="color:#0000FF">&quot;SharedSecret&quot;</span><span style="color:#0000FF">&gt;</span>
            <span style="color:#0000FF">&lt;</span><span style="color:#800000">clientCredentials</span><span style="color:#0000FF">&gt;</span>
              <span style="color:#0000FF">&lt;</span><span style="color:#800000">sharedSecret</span> <span style="color:#FF0000">issuerName</span>=<span style="color:#0000FF">&quot;fictionalRetail&quot;</span> 
                            <span style="color:#FF0000">issuerSecret</span>=<span style="color:#0000FF">&quot;[YOUR_FR_ISSUER_KEY]&quot;</span><span style="color:#0000FF">/&gt;</span>
            <span style="color:#0000FF">&lt;/</span><span style="color:#800000">clientCredentials</span><span style="color:#0000FF">&gt;</span>
          <span style="color:#0000FF">&lt;/</span><span style="color:#800000">transportClientEndpointBehavior</span><span style="color:#0000FF">&gt;</span>
        <span style="color:#0000FF">&lt;/</span><span style="color:#800000">behavior</span><span style="color:#0000FF">&gt;</span>
      <span style="color:#0000FF">&lt;/</span><span style="color:#800000">endpointBehaviors</span><span style="color:#0000FF">&gt;</span>
    <span style="color:#0000FF">&lt;/</span><span style="color:#800000">behaviors</span><span style="color:#0000FF">&gt;</span>
  <span style="color:#0000FF">&lt;/</span><span style="color:#800000">system.serviceModel</span><span style="color:#0000FF">&gt;</span>
<span style="color:#0000FF">&lt;/</span><span style="color:#800000">configuration</span><span style="color:#0000FF">&gt;</span>
</code></pre></li>
<li><p>将以下（突出显示的）代码块插入 <strong>system.serviceModel</strong> 节以启用行为和绑定扩展。</p>

<p>（代码段 - <em>Service Remoting with Service Bus Lab - Ex02 BehaviorExtensions</em>）</p>

<span class="codelanguage">XML</span><pre><code class="XML"><span style="color:#0000FF">&lt;</span><span style="color:#800000">configuration</span><span style="color:#0000FF">&gt;</span>
  ...
  <span style="color:#0000FF">&lt;</span><span style="color:#800000">system.serviceModel</span><span style="color:#0000FF">&gt;</span>
    ...
    <span style="color:#0000FF">&lt;</span><span style="color:#800000">extensions</span><span style="color:#0000FF">&gt;</span>
      <span style="color:#0000FF">&lt;</span><span style="color:#800000">behaviorExtensions</span><span style="color:#0000FF">&gt;</span>
        <span style="color:#0000FF">&lt;</span><span style="color:#800000">add</span> <span style="color:#FF0000">name</span>=<span style="color:#0000FF">&quot;transportClientEndpointBehavior&quot;</span>
             <span style="color:#FF0000">type</span>=<span style="color:#0000FF">&quot;Microsoft.ServiceBus.Configuration.TransportClientEndpointBehaviorElement, Microsoft.ServiceBus, Version=1.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;</span><span style="color:#0000FF">/&gt;</span>
      <span style="color:#0000FF">&lt;/</span><span style="color:#800000">behaviorExtensions</span><span style="color:#0000FF">&gt;</span>
      <span style="color:#0000FF">&lt;</span><span style="color:#800000">bindingExtensions</span><span style="color:#0000FF">&gt;</span>
        <span style="color:#0000FF">&lt;</span><span style="color:#800000">add</span> <span style="color:#FF0000">name</span>=<span style="color:#0000FF">&quot;netTcpRelayBinding&quot;</span>
             <span style="color:#FF0000">type</span>=<span style="color:#0000FF">&quot;Microsoft.ServiceBus.Configuration.NetTcpRelayBindingCollectionElement, Microsoft.ServiceBus, Version=1.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;</span><span style="color:#0000FF">/&gt;</span>
      <span style="color:#0000FF">&lt;/</span><span style="color:#800000">bindingExtensions</span><span style="color:#0000FF">&gt;</span>
    <span style="color:#0000FF">&lt;/</span><span style="color:#800000">extensions</span><span style="color:#0000FF">&gt;</span>
  <span style="color:#0000FF">&lt;/</span><span style="color:#800000">system.serviceModel</span><span style="color:#0000FF">&gt;</span>
<span style="color:#0000FF">&lt;/</span><span style="color:#800000">configuration</span><span style="color:#0000FF">&gt;</span>
</code></pre></li>
<li><p>设置客户端应用程序的连接模式。右键单击 <strong>FictionalRetail.Crm.Client</strong> 项目中的 <strong>Main.cs</strong> 文件，选择<strong>“查看代码”</strong>，然后将以下（突出显示的）代码插入 <strong>Main</strong> 类的构造函数的开头。</p>

<p>（代码段 - <em>Service Remoting with Service Bus Lab - Ex01 ConnectivityModeClient</em>）</p>

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> Main() {
  <span style="color:#008000">// Tcp: All communication to the Service Bus is performed using outbound TCP connections.</span>
  <span style="color:#008000">// Http: All communication to Service Bus is performed using outbound HTTP connections.</span>
  <span style="color:#008000">// AutoDetect: The Service bus client automatically selects between TCP and HTTP connectivity.</span>
  Microsoft.ServiceBus.ServiceBusEnvironment.SystemConnectivity.Mode = Microsoft.ServiceBus.ConnectivityMode.AutoDetect;

  <span style="color:#0000FF">this</span>.client = <span style="color:#0000FF">new</span> PublicServiceClient();
  <span style="color:#0000FF">this</span>.InitializeComponent(); }
</code></pre></li>
</ol>

<p><a name="Ex1Verification"></a></p>

<h4 id="Verification">验证</h4>

<p>您现在已做好使用 Service Bus 测试应用程序的准备。</p>

<ol>
<li><p>配置解决方案以同时启动 CRM 数据服务和 FI 公共服务。为此，请在<strong>解决方案资源管理器</strong>中，右键单击 <strong>ServiceRemoting</strong> 解决方案，然后选择<strong>“设置启动项目”</strong>。在<strong>“解决方案‘ServiceRemoting’属性页”</strong>对话框中，选择<strong>“多启动项目”</strong>选项，然后将 <strong>Fictional.Investment.Crm.Data</strong> 和 <strong>Fictional.Investment.PublicServices</strong> 的<strong>“操作”</strong>设置为<em>启动</em> 并采用相同的启动顺序；将其余项目设置为<em>“无”</em>。要更改启动顺序，请在列表选择一个项目，然后单击上下箭头移动它。</p>
<blockquote>
<p><strong>注意：</strong>因为服务承载在 Service Bus 期间可能需要略长的时间才能开始侦听，所以您可以手动启动客户端应用程序以确保服务已事先启动。</p>
</blockquote></li>
<li><p>按 <strong>F5</strong> 生成并运行应用程序。这会启动 CRM 数据服务和 FI 公共服务。</p>
<blockquote>
<p><strong>注意：</strong>可能会出现一条 Windows 防火墙警告，指出防火墙已阻止程序的某些功能并提示您允许访问。单击<strong>“取消”</strong>。无需允许任何其他访问。</p>
</blockquote></li>
<li><p>等待这两个服务启动并在各自控制台窗口中显示其状态。请注意 FI 公共服务正在侦听的 URL，可以看到该服务的方案现在执行 <em>sb:</em> 并且 URI 包含了您的服务命名空间。</p>
<blockquote>
<p><strong>注意：</strong>在两个服务均成功启动之后，才能继续下一步。启动时，每个服务都在其控制台窗口中显示它正在侦听的 URL。</p>
</blockquote></li>
<li><p>在<strong>解决方案资源管理器</strong>中，右键单击 <strong>FictionalRetail.Crm.Client</strong>，指向<strong>“调试”</strong>，然后选择<strong>“启动新实例”</strong>以启动客户端应用程序。</p></li>
<li><p>请注意，客户端应用程序显示从服务检索到的客户列表，这表明它已成功访问在 Service Bus 上发布的服务。</p></li>
<li><p>从列表中选择一个或多个客户，然后单击 <strong>Move To Fictional Retail Bank</strong>（移到 Fictional Retail Bank）。</p>

<p><img src="./Images/CRM-application-working-against-the-service-published-by-the-Service-Bus.png?raw=true" alt="CRM 应用程序在 Service Bus 发布的服务上正常工作" title="CRM 应用程序在 Service Bus 发布的服务上正常工作+" />
  </p>

<p><em>CRM 应用程序在 Service Bus 发布的服务上正常工作</em></p></li>
<li><p>可以看到，客户端应用程序继续正常工作，与服务在本地侦听时一样。这表明 Financial Investment 网络之外的客户端仍能够通过 Service Bus 连接到服务。</p></li>
<li><p>在两个控制台窗口中按 <strong>Enter</strong> 终止这两个服务并退出客户端应用程序。</p></li>
</ol>

<p><a name="Exercise2"></a></p>

<h3 id="Exercise_2_Publishing_Services_Hosted_in_Windows_Azure_with_the_Service_Bus">练习 2：使用 Service Bus 发布 Windows Azure 中承载的服务</h3>

<p>Azure 云服务也可以使用 Service Bus 发布其端点。<br/><img src="./Images/Application-architecture-with-services-deployed-to-Windows-Azure-and-listening-on-the-Service-Bus.png?raw=true" alt="服务部署到 Windows Azure 并侦听 Service Bus 的应用程序体系结构" title="服务部署到 Windows Azure 并侦听 Service Bus 的应用程序体系结构" />
  </p>

<p><em>服务部署到 Windows Azure 并侦听 Service Bus 的应用程序体系结构</em></p>

<p>在此练习中，您将更新 FI 公共服务项目并将其转换为辅助角色。这样即可在 Windows Azure 中承载该服务。因为该服务已通过 Service Bus 进行侦听，所以客户端察觉不到变化，可以继续运行而无需更改代码或配置。但是，在此方案中，CRM 数据服务保留在本地，需要将其配置为侦听 Service Bus 才能使 FI 公共服务（现在承载在 Windows Azure 中）访问它。</p>

<p><a name="Ex2Task1"></a></p>

<h4 id="Task_1_-_Hosting_the_Service_in_a_Windows_Azure_Worker_Role">任务 1 - 在 Windows Azure 辅助角色中承载服务</h4>

<p>在此任务中，您将更新 FI 公共服务项目（当前为 Windows 控制台应用程序），并将其转换为辅助角色。</p>

<ol>
<li><p>通过从<strong>“开始”|“所有程序”|“Microsoft Visual Studio 2010”</strong>中，右键单击 <strong>Microsoft Visual Studio 2010</strong> 快捷方式，然后选择<strong>“以管理员身份运行”</strong>，在提升的管理员模式下打开 Visual Studio。</p>
<blockquote>
<p><strong>注意：</strong>若要在计算模拟器中运行 Windows Azure 项目，必须以提升的管理员模式运行。</p>
</blockquote></li>
<li><p>在<strong>“文件”</strong>菜单中，选择<strong>“打开项目”</strong>。在<strong>“打开项目”</strong>对话框中，浏览到实验的 <strong>Source\Ex2-AzureServices\Begin</strong> 文件夹，选择 <strong>ServiceRemoting.sln</strong>，然后单击<strong>“打开”</strong>。或者，也可以继续使用在完成前一个练习后得到的解决方案。</p></li>
<li><p>向 FI CrmData 项目添加对 <strong>Microsoft.ServiceBus</strong> 的引用。为此，在<strong>解决方案资源管理器</strong>中，右键单击 <strong>FictionalInvestment.Crm.Data</strong> 项目，然后选择<strong>“添加引用”</strong>。在 <strong>.NET</strong> 选项卡中，选择 <strong>Microsoft.ServiceBus</strong> 引用，并单击<strong>“确定”</strong>。</p></li>
<li><p>在<strong>解决方案资源管理器</strong>中，右键单击 <strong>FictionalInvestment.PublicServices</strong> 项目，然后选择<strong>“添加引用”</strong>。在 <strong>.NET</strong> 选项卡中，选择 <strong>Microsoft.WindowsAzure.Diagnostics</strong>、<strong>Microsoft.WindowsAzure.ServiceRuntime</strong> 和 <strong>Microsoft.WindowsAzure.StorageClient</strong> 组件，然后单击<strong>“确定”</strong>。</p>

<p><img src="./Images/Adding-a-reference-to-the-Windows-Azure-assemblies.png?raw=true" alt="添加对 Windows Azure 程序集的引用" title="添加对 Windows Azure 程序集的引用" />
  </p>

<p><em>添加对 Windows Azure 程序集的引用</em></p></li>
<li><p>通常，服务所需的某些程序集可能不在 Windows Azure 虚拟机中；因此，必须将这些程序集装入服务包才能确保它们可用。通过配置相应程序集引用的“复制本地”属性，可实现这一点。要配置引用，请在<strong>解决方案资源管理器</strong>中展开 <strong>FictionalInvestment.PublicServices</strong> 项目的<strong>“引用”</strong>节点，右键单击<strong>“引用”</strong>列表中的相应引用，然后选择<strong>“属性”</strong>。</p>

<p>要将程序集添加到服务包，请在程序集的<strong>“属性”</strong>窗口中，将<strong>“复制本地”</strong>设置的值更改为 <em>True</em>。</p>

<p>使用此过程可将 <strong>Microsoft.ServiceBus</strong> 程序集包含在 Windows Azure 服务包中，并确保 <strong>Microsoft.WindowsAzure.Diagnostics</strong> 和 <strong>Microsoft.WindowsAzure.StorageClient</strong> 也都进行本地部署。</p>

<p><img src="./Images/Including-an-assembly-in-the-Windows-Azure-service-package.png?raw=true" alt="将程序集包含在 Windows Azure 服务包中" title="将程序集包含在 Windows Azure 服务包中" />
  </p>

<p><em>将程序集包含在 Windows Azure 服务包中</em></p></li>
<li><p>接下来，创建一个新的云服务项目并将它添加到该解决方案。为此，在<strong>“文件”</strong>菜单中，指向<strong>“添加”</strong>，然后选择<strong>“新建项目”</strong>。在<strong>“新建项目”</strong>对话框中，展开<strong>“已安装的模板”</strong>列表中的 Visual C# 语言，然后选择<strong>“云”</strong>。选择<strong>“Windows Azure 项目”</strong>模板，将项目的<strong>“名称”</strong>设置为 <strong>CloudService</strong>，接受项目在解决方案文件夹中的建议位置。单击<strong>“确定”</strong>创建项目。</p>

<p><img src="./Images/Creating-a-new-Windows-Azure-Cloud-Service-project.png?raw=true" alt="创建新的 Windows Azure 云服务项目" title="创建新的 Windows Azure 云服务项目" />
  </p>

<p><em>创建新的 Windows Azure 云服务项目</em></p></li>
<li><p>在<strong>“新建 Windows Azure 项目”</strong>对话框中，单击<strong>“确定”</strong>，而不添加任何新角色。您将重用现有服务项目并将其用作辅助角色。</p>

<p><img src="./Images/No-additional-roles-are-required.png?raw=true" alt="不需要其他角色" title="不需要其他角色" />
  </p>

<p><em>不需要其他角色</em></p></li>
<li><p>将 FI 公共服务项目作为辅助角色添加到云服务项目中。为此，在<strong>解决方案资源管理器</strong>中，右键单击 <strong>CloudService</strong> 项目中的<strong>“角色”</strong>节点，指向<strong>“添加”</strong>，然后选择<strong>“解决方案中的辅助角色项目”</strong>。在<strong>“与角色项目关联”</strong>对话框中，选择 <strong>FictionalInvestment.PublicServices</strong> 项目，然后单击<strong>“确定”</strong>。</p>

<p><img src="./Images/Adding-the-FI-Public-Service-project-as-a-worker-role.png?raw=true" alt="将 FI 公共服务项目添加为辅助角色" title="将 FI 公共服务项目添加为辅助角色" />
  </p>

<p><em>将 FI 公共服务项目添加为辅助角色</em></p>
<blockquote>
<p><strong>注意：</strong><strong>FictionalInvestment.PublicServices</strong> 项目是标准 Windows 控制台应用程序项目。通常，您不会将此类型的应用程序用作辅助角色的起点。若要 Visual Studio 将此类型的应用程序识别为辅助角色候选项并允许其名称显示在<strong>“与角色项目关联”</strong>对话框中，必须修改项目 (.csproj) 文件以添加 <strong>RoleType</strong> 元素并将该元素的值设置为 <em>Worker</em>。</p>

<p><img src="Images/Roletype.png?raw=true" alt="角色类型" />
</p>
</blockquote></li>
<li><p>若要将现有服务项目用作辅助角色，需要在项目中包含角色入口点。要插入预建的入口点类，请在<strong>解决方案资源管理器</strong>中，右键单击 <strong>FictionalInvestment.PublicServices</strong> 项目，指向<strong>“添加”</strong>，然后选择<strong>“现有项”</strong>。在<strong></strong><strong>“添加现有项”</strong>对话框中，导航到此实验的 <strong>Source</strong> 文件夹中的 <strong>Assets</strong> 文件夹，选择 <strong>WorkerRole.cs</strong> 文件，然后单击<strong>“添加”</strong>。</p>

<p><img src="./Images/Solution-Explorer-showing-the-new-worker-role-entry-point-class-C.png?raw=true" alt="显示新辅助角色入口点类的解决方案资源管理器" title="显示新辅助角色入口点类的解决方案资源管理器" />
  </p>

<p><em>显示新辅助角色入口点类的解决方案资源管理器</em></p>
<blockquote>
<p><strong>注意：</strong><strong>WorkerRole</strong> 类是一个修改为承载服务的 <strong>RoleEntryPoint</strong> 派生类。它包含 Windows Azure 在角色生存期各个阶段调用的方法。</p>

<p>Windows Azure 在角色启动时调用 <strong>OnStart</strong> 方法。您可以使用此方法来初始化角色。在提供的类中，<strong>OnStart</strong> 方法包含用于设置诊断设置的代码，这些设置可计划将辅助角色日志自动传送到 Windows Azure 中的存储帐户，您可以在该帐户中检索这些日志。请注意，代码从服务配置文件 <strong>(ServiceConfiguration.cscfg)</strong> 中的连接字符串初始化 Windows Azure 诊断配置，该文件当前设置为使用存储模拟器。如果将服务部署到 Windows Azure，您需要使用自己的存储帐户设置更新此配置。</p>

<p><strong>WorkerRole</strong> 类的 <strong>Run</strong> 方法包含角色提供其功能时所执行的代码。在此例中，该方法为 FI 公共服务设置 WCF <strong>ServiceHost</strong>，并开始在 Service Bus 上侦听请求。<br/>最后，Windows Azure 在关闭辅助角色之前调用 <strong>OnStop</strong> 方法。此处，该方法用于关闭 WCF 服务。</p>
</blockquote></li>
<li><p>打开 <strong>FictionalInvestment.PublicServices</strong> 项目中的 <strong>App.config</strong> 文件，并将名为 <strong>configConsoleListener</strong> 的现有侦听器的条目替代为以下配置段中显示的（突出显示的）条目。</p>

<p>（代码段 - <em>Service Remoting with Service Bus Lab - Ex02 AzureDiagnosticsConfig</em>）</p>

<span class="codelanguage">XML</span><pre><code class="XML"><span style="color:#0000FF">&lt;</span><span style="color:#800000">configuration</span><span style="color:#0000FF">&gt;</span>
  ...
  <span style="color:#0000FF">&lt;</span><span style="color:#800000">system.diagnostics</span><span style="color:#0000FF">&gt;</span>
    <span style="color:#0000FF">&lt;</span><span style="color:#800000">trace</span><span style="color:#0000FF">&gt;</span>
      <span style="color:#0000FF">&lt;</span><span style="color:#800000">listeners</span><span style="color:#0000FF">&gt;</span>
        <span style="color:#0000FF">&lt;</span><span style="color:#800000">add</span> <span style="color:#FF0000">type</span>=<span style="color:#0000FF">&quot;Microsoft.WindowsAzure.Diagnostics.DiagnosticMonitorTraceListener, Microsoft.WindowsAzure.Diagnostics, Version=1.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;</span> <span style="color:#FF0000">name</span>=<span style="color:#0000FF">&quot;AzureDiagnostics&quot;</span><span style="color:#0000FF">&gt;</span>
          <span style="color:#0000FF">&lt;</span><span style="color:#800000">filter</span> <span style="color:#FF0000">type</span>=<span style="color:#0000FF">&quot;&quot;</span> <span style="color:#0000FF">/&gt;</span>
        <span style="color:#0000FF">&lt;/</span><span style="color:#800000">add</span><span style="color:#0000FF">&gt;</span>
      <span style="color:#0000FF">&lt;/</span><span style="color:#800000">listeners</span><span style="color:#0000FF">&gt;</span>
    <span style="color:#0000FF">&lt;/</span><span style="color:#800000">trace</span><span style="color:#0000FF">&gt;</span>
  <span style="color:#0000FF">&lt;/</span><span style="color:#800000">system.diagnostics</span><span style="color:#0000FF">&gt;</span>
<span style="color:#0000FF">&lt;/</span><span style="color:#800000">configuration</span><span style="color:#0000FF">&gt;</span>
</code></pre>
<blockquote>
<p><strong>注意：</strong>为了提供诊断信息，服务使用 <strong>System.Diagnostics</strong> 中的 <strong>Trace</strong> 类将信息性事件和状态消息写入日志。以前，服务使用 <strong>ConsoleTraceListener</strong> 在其控制台窗口中显示这些信息。现在，在 Windows Azure 中承载时，服务需要将这些信息写入一个可查看的位置。服务使用一个特定于 Windows Azure 环境的 <strong>TraceListener</strong>，该方法将跟踪数据写入 Azure 应用程序日志。</p>
</blockquote></li>
<li><p>Service Bus 需要完全信任权限才能在 Windows Azure 中运行。要启用完全信任，请在<strong>解决方案资源管理器</strong>中，展开 <strong>CloudService</strong> 项目中的<strong>“角色”</strong>节点，然后双击 <strong>FictionalInvestment.PublicServices</strong> 角色。在角色属性页中，选择<strong>“配置”</strong>选项卡并确保<strong>“.NET 信任级别”</strong>设置为<strong>“完全信任”</strong>。</p>

<p><img src="./Images/Configuring-the-trust-level-of-the-worker-role.png?raw=true" alt="配置辅助角色的信任级别" title="配置辅助角色的信任级别" />
  </p>

<p><em>配置辅助角色的信任级别</em></p></li>
</ol>

<p><a name="Ex2Tas2"></a></p>

<h4 id="Task_2_-_Optional_Configuring_the_CRM_Data_Service_to_Listen_on_the_Windows_Azure_Service_Bus">任务 2 -（可选）配置 CRM 数据服务以侦听 Windows Azure Service Bus</h4>

<p>因为 FI 公共服务现在在 Windows Azure 中运行并依赖 CRM 数据服务（继续在本地承载），所以必须更新 CRM 数据服务才能侦听 Service Bus。</p>
<blockquote>
<p><strong>注意：</strong>实现此目的所需的过程与练习 1 中通过 Service Bus 发布 FI 公共服务时执行的过程并没有什么不同。如果从完成练习 1 后获得的解决方案中开始当前练习，则需要完成此任务；否则，如果使用为当前练习提供的起始解决方案，则完全可以跳过此任务。所有必需的更改都已包含在起始解决方案中。</p>

<p>无论如何，您<strong>仍然需要</strong>更新 <strong>FictionalInvestment.Crm.Data</strong> 项目的 <strong>App.config</strong> 文件中服务的端点地址和凭据，以及 <strong>FictionalInvestment.PublicServices</strong> 和 <strong>FictionalClient.Crm.Client</strong> 项目的 <strong>App.config</strong> 文件中客户端的端点地址和凭据。这仅仅因为这些值特定于 Service Bus 项目。您将在此练习的<strong>验证</strong>部分中找到有关如何执行此操作的说明。</p>
</blockquote>
<ol>
<li><p>打开 <strong>FictionalInvestment.Crm.Data</strong> 项目的 <strong>App.config</strong> 文件。</p></li>
<li><p>在 <strong>system.ServiceModel</strong> 的 <strong>services</strong> 节中，找到名为 <strong>FictionalInvestment.Crm.Data.CrmDataService</strong> 的服务的 <strong>endpoint</strong> 元素。</p></li>
<li><p>对于此端点，将 <strong>address</strong> 属性更新为 <em><strong>sb://[YOUR-NAMESPACE].servicebus.windows.net/CrmDataService</strong></em>，其中 <strong>[YOUR-NAMESPACE]</strong> 是为项目定义的 Service Bus 命名空间。</p></li>
<li><p>endpoint 元素应如下图所示，只是命名空间取决于您的具体情况。</p>

<p><img src="Images/Configuring-the-endpoint-used-to-publish-the-service-on-the-Service-Bus.png?raw=true" alt="配置用于在 Service Bus 上发布服务的端点" /> <br/> <em>配置用于在 Service Bus 上发布 CRM 数据服务的端点</em></p></li>
<li><p>在 <strong>system.serviceModel</strong> 中的 <strong>behaviors</strong> 元素上，将 <strong>issuerSecret</strong> 属性的值替换为上一练习中获取的 <em>fictionalInvestment</em> 颁发者的<strong>颁发者密钥</strong>。</p>

<p>（代码段 - <em>Service Remoting with Service Bus Lab - Ex02 CredentialsBehaviorACS</em>）</p>

<span class="codelanguage">XML</span><pre><code class="XML"><span style="color:#0000FF">&lt;</span><span style="color:#800000">configuration</span><span style="color:#0000FF">&gt;</span>
  <span style="color:#0000FF">&lt;</span><span style="color:#800000">system.serviceModel</span><span style="color:#0000FF">&gt;</span>
    ...
    <span style="color:#0000FF">&lt;</span><span style="color:#800000">behaviors</span><span style="color:#0000FF">&gt;</span>
      <span style="color:#0000FF">&lt;</span><span style="color:#800000">endpointBehaviors</span><span style="color:#0000FF">&gt;</span>
        <span style="color:#0000FF">&lt;</span><span style="color:#800000">behavior</span> <span style="color:#FF0000">name</span>=<span style="color:#0000FF">&quot;serviceBusCredentialBehavior&quot;</span><span style="color:#0000FF">&gt;</span>
          <span style="color:#0000FF">&lt;</span><span style="color:#800000">transportClientEndpointBehavior</span> <span style="color:#FF0000">credentialType</span>=<span style="color:#0000FF">&quot;SharedSecret&quot;</span><span style="color:#0000FF">&gt;</span>
            <span style="color:#0000FF">&lt;</span><span style="color:#800000">clientCredentials</span><span style="color:#0000FF">&gt;</span>
              <span style="color:#0000FF">&lt;</span><span style="color:#800000">sharedSecret</span> <span style="color:#FF0000">issuerName</span>=<span style="color:#0000FF">&quot;fictionalInvestment&quot;</span> 
                            <span style="color:#FF0000">issuerSecret</span>=<span style="color:#0000FF">&quot;[YOUR_FI_ISSUER_KEY]&quot;</span><span style="color:#0000FF">/&gt;</span>
            <span style="color:#0000FF">&lt;/</span><span style="color:#800000">clientCredentials</span><span style="color:#0000FF">&gt;</span>
          <span style="color:#0000FF">&lt;/</span><span style="color:#800000">transportClientEndpointBehavior</span><span style="color:#0000FF">&gt;</span>
        <span style="color:#0000FF">&lt;/</span><span style="color:#800000">behavior</span><span style="color:#0000FF">&gt;</span>
      <span style="color:#0000FF">&lt;/</span><span style="color:#800000">endpointBehaviors</span><span style="color:#0000FF">&gt;</span>
    <span style="color:#0000FF">&lt;/</span><span style="color:#800000">behaviors</span><span style="color:#0000FF">&gt;</span>
  <span style="color:#0000FF">&lt;/</span><span style="color:#800000">system.serviceModel</span><span style="color:#0000FF">&gt;</span>
<span style="color:#0000FF">&lt;/</span><span style="color:#800000">configuration</span><span style="color:#0000FF">&gt;</span>
</code></pre></li>
<li><p>将以下（突出显示的）代码块插入 <strong>system.serviceModel</strong> 节以启用行为和绑定扩展。</p>

<p>（代码段 - <em>Service Remoting with Service Bus Lab - Ex02 CrmDataBehaviorExtensions</em>）</p>

<span class="codelanguage">XML</span><pre><code class="XML"><span style="color:#0000FF">&lt;</span><span style="color:#800000">configuration</span><span style="color:#0000FF">&gt;</span>
  ...
  <span style="color:#0000FF">&lt;</span><span style="color:#800000">system.serviceModel</span><span style="color:#0000FF">&gt;</span>
    ...
    <span style="color:#0000FF">&lt;</span><span style="color:#800000">extensions</span><span style="color:#0000FF">&gt;</span>
      <span style="color:#0000FF">&lt;</span><span style="color:#800000">behaviorExtensions</span><span style="color:#0000FF">&gt;</span>
        <span style="color:#0000FF">&lt;</span><span style="color:#800000">add</span> <span style="color:#FF0000">name</span>=<span style="color:#0000FF">&quot;transportClientEndpointBehavior&quot;</span>
             <span style="color:#FF0000">type</span>=<span style="color:#0000FF">&quot;Microsoft.ServiceBus.Configuration.TransportClientEndpointBehaviorElement, Microsoft.ServiceBus, Version=1.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;</span><span style="color:#0000FF">/&gt;</span>
      <span style="color:#0000FF">&lt;/</span><span style="color:#800000">behaviorExtensions</span><span style="color:#0000FF">&gt;</span>
      <span style="color:#0000FF">&lt;</span><span style="color:#800000">bindingExtensions</span><span style="color:#0000FF">&gt;</span>
        <span style="color:#0000FF">&lt;</span><span style="color:#800000">add</span> <span style="color:#FF0000">name</span>=<span style="color:#0000FF">&quot;netTcpRelayBinding&quot;</span>
             <span style="color:#FF0000">type</span>=<span style="color:#0000FF">&quot;Microsoft.ServiceBus.Configuration.NetTcpRelayBindingCollectionElement, Microsoft.ServiceBus, Version=1.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;</span><span style="color:#0000FF">/&gt;</span>
      <span style="color:#0000FF">&lt;/</span><span style="color:#800000">bindingExtensions</span><span style="color:#0000FF">&gt;</span>
    <span style="color:#0000FF">&lt;/</span><span style="color:#800000">extensions</span><span style="color:#0000FF">&gt;</span>
  <span style="color:#0000FF">&lt;/</span><span style="color:#800000">system.serviceModel</span><span style="color:#0000FF">&gt;</span>
<span style="color:#0000FF">&lt;/</span><span style="color:#800000">configuration</span><span style="color:#0000FF">&gt;</span>
</code></pre></li>
<li><p>FI 公共服务利用 CRM 数据服务，现在 CRM 数据服务也需要在 Service Bus 上发布。要完成该服务的准备工作，请打开 <strong>FictionalInvestment.PublicServices</strong> 项目的 <strong>App.config</strong> 文件，配置 <strong>system.serviceModel</strong> 中的 <strong>client</strong> 节，将 [YOUR-NAMESPACE] 替换为已为此项目创建的服务命名空间。</p>

<p>（代码段 - <em>Service Remoting with Service Bus Lab - Ex02 ClientEndpoint</em>）</p>

<span class="codelanguage">XML</span><pre><code class="XML"><span style="color:#0000FF">&lt;</span><span style="color:#800000">configuration</span><span style="color:#0000FF">&gt;</span>
  <span style="color:#0000FF">&lt;</span><span style="color:#800000">system.serviceModel</span><span style="color:#0000FF">&gt;</span>
    ...
    <span style="color:#0000FF">&lt;</span><span style="color:#800000">client</span><span style="color:#0000FF">&gt;</span>
      <span style="color:#0000FF">&lt;</span><span style="color:#800000">endpoint</span> <span style="color:#FF0000">address</span>=<span style="color:#0000FF">&quot;sb://[YOUR-NAMESPACE].servicebus.windows.net/CrmDataService&quot;</span>
                <span style="color:#FF0000">binding</span>=<span style="color:#0000FF">&quot;netTcpRelayBinding&quot;</span>
                <span style="color:#FF0000">contract</span>=<span style="color:#0000FF">&quot;Common.Contracts.ICrmDataService&quot;</span>
                <span style="color:#FF0000">behaviorConfiguration</span>=<span style="color:#0000FF">&quot;serviceBusCredentialBehavior&quot;</span><span style="color:#0000FF">/&gt;</span>
    <span style="color:#0000FF">&lt;/</span><span style="color:#800000">client</span><span style="color:#0000FF">&gt;</span>
    ...
  <span style="color:#0000FF">&lt;/</span><span style="color:#800000">system.serviceModel</span><span style="color:#0000FF">&gt;</span>
<span style="color:#0000FF">&lt;/</span><span style="color:#800000">configuration</span><span style="color:#0000FF">&gt;</span>
</code></pre></li>
</ol>

<p><strong>验证</strong></p>

<p>开始之前，您需要确保已正确配置服务端点和颁发者凭据。根据实现当前解决方案的方式，其中某些值可能已事先设置好。请注意，这一点是必要的，因为这些设置特定于您的 Service Bus 项目。之后，您将在计算模拟器中运行 Windows Azure 项目并使用客户端应用程序测试该项目。</p>

<ol>
<li><p>打开 <strong>FictionalInvestment.PublicServices </strong>项目的 <strong>App.config</strong> 文件。在 <strong>system.ServiceModel</strong> 的 <strong>services</strong> 节中找到单个 <strong>endpoint</strong> 元素，将端点的 <strong>address</strong> 属性中标识为 <strong>[YOUR_NAMESPACE]</strong> 的占位符替换为您为项目定义的 Service Bus 命名空间。</p></li>
<li><p>对 <strong>system.ServiceModel</strong> 中的 <strong>client</strong> 节中定义的现有端点执行相同操作。</p></li>
<li><p>在 <strong>behaviors</strong> 节中，找到 <strong>transportClientEndpointBehavior</strong> 中的 <strong>sharedSecret</strong> 元素，然后使用 <em>fictionalInvestment</em> 的颁发者密钥更新 <strong>isssuerSecret</strong> 属性。回想一下，您已在练习 1 中为每个颁发者注册了密钥。</p></li>
<li><p>接下来，打开 <strong>FictionalInvestment.Crm.Data</strong> 项目的 <strong>App.config</strong> 文件，重复上述步骤，使用相同的值更新 <strong>services</strong> 节中端点的命名空间以及 <strong>behaviors</strong> 节中的凭据。</p></li>
<li><p>最后，打开 <strong>FictionalRetail.Crm.Client</strong> 项目的 <strong>App.config</strong> 文件。同样，使用您的服务命名空间更新 <strong>system.serviceModel</strong> 的 <strong>client</strong> 节。然后，更新 <strong>behaviors</strong> 节中的凭据，不过这次改用 <em>fictionalRetail</em> 的颁发者密钥。</p></li>
<li><p>现在，您已做好测试解决方案的准备。要在计算模拟器中启动云服务项目，在<strong>解决方案资源管理器</strong>中，右键单击 <strong>CloudService</strong>，指向<strong>“调试”</strong>，然后选择<strong>“启动新实例”</strong>。辅助角色启动，创建服务主机，然后开始侦听 Service Bus 端点。</p></li>
<li><p>要验证服务正在运行，请右键单击系统托盘中的“计算模拟器”图标，并选择<strong>“显示计算模拟器用户界面”</strong>。</p>

<p><img src="./Images/Showing-the-compute-emulator-UI.png?raw=true" alt="显示计算模拟器用户界面" title="显示计算模拟器用户界面" />
  </p>

<p><em>显示计算模拟器用户界面</em></p></li>
<li><p>在<strong>“服务部署”</strong>树视图中，展开正在运行的部署，然后选择 <strong>FictionalInvestment.PublicServices</strong> 节点以显示其诊断日志。</p>

<p><img src="./Images/FI-Public-Service-hosted-in-the-Compute-Emulator.png?raw=true" alt="计算模拟器中承载的 FI 公共服务" title="计算模拟器中承载的 FI 公共服务" />
  </p>

<p><em>计算模拟器中承载的 FI 公共服务</em></p></li>
<li><p>接下来，启动 CRM 数据服务。为此，在<strong>解决方案资源管理器</strong>中，右键单击 <strong>FictionalInvestment.Crm.Data</strong> 项目，指向<strong>“调试”</strong>，然后选择<strong>“启动新实例”</strong>。等待服务开始在 Service Bus 上的已配置端点上进行侦听。您可以看到控制台窗口中显示了当前正在侦听的服务所在的 URL。</p>

<p><img src="./Images/CRM-Data-Service-listening-on-the-Service-Bus.png?raw=true" alt="CRM 数据服务正在 Service Bus 上进行侦听" title="CRM 数据服务正在 Service Bus 上进行侦听" />
  </p>

<p><em>CRM 数据服务正在 Service Bus 上进行侦听</em></p></li>
<li><p>现在，启动客户端应用程序。再次在<strong>解决方案资源管理器</strong>中右键单击 <strong>FictionalRetail.Crm.Client</strong>，指向<strong>“调试”</strong>，然后选择<strong>“启动新实例”</strong>正如您前面看到的，用户界面将显示客户及其当前分配的实体的列表，这证实了客户端能够与服务通信。</p></li>
<li><p>从列表中选择一个或多个客户，然后单击 <strong>Move to Fictional Retail Bank</strong>（移到 Fictional Retail Bank）。如果在 CRM 数据服务的控制台窗口以及计算模拟器中辅助角色的事件日志看到状态消息，则确认调用成功。</p>

<p><img src="./Images/Using-the-FI-Public-Service-hosted-in-the-Compute-Emulator.png?raw=true" alt="使用计算模拟器中承载的 FI 公共服务" title="使用计算模拟器中承载的 FI 公共服务" />
  </p>

<p><em>使用计算模拟器中承载的 FI 公共服务</em></p></li>
</ol>

<p><a name="Summary"></a></p>

<h2 id="Summary">小结</h2>

<p>通过完成此动手实验，您了解了如何在对代码和配置进行最少量更改的情况下，利用现有服务并使用 Service Bus 实现从任意位置访问该服务。在此实验过程中，您学习了如何设置 Service Bus 帐户以及如何为服务配置命名空间。您利用了 Windows Azure 访问控制服务提供基于声明的身份验证，创建了一些规则将标识映射到确定允许颁发者执行哪些操作的声明。最后，将服务重定位到了 Windows Azure，看到其客户端未受更改的影响，这是因为无论服务是在本地还是云中承载，都会继续侦听同一 URL。</p>

<p><a name="AppendixA"></a></p>

<h2 id="Appendix_-_Using_the_SBaZTool_Command_Line_Tool">附录 - 使用 SBaZTool 命令行工具</h2>

<p>以下过程介绍使用 SBaZTool 命令行工具创建颁发者和规则所需的步骤。有关使用访问控制服务管理门户的替代方法，请参阅<a href="#Exercise1">练习 1：使用 Service Bus 远程承载服务</a>中的<strong>任务 3</strong>。请注意，如果您已创建颁发者并已使用访问控制服务管理门户设置访问控制服务规则，则无需完成此过程。</p>

<ol>
<li><p>从 <a href="http://code.msdn.microsoft.com/windowsazure/site/search?f%5B0%5D.Type=Technology&amp;f%5B0%5D.Value=Service%20Bus">Windows Azure 示例网站</a>下载 SBaZTool，然后将内容解压缩到硬盘上的任意文件夹中。</p></li>
<li><p>使用提升的权限打开 Visual Studio，然后打开位于 C# 文件夹中的授权解决方案。从 Visual Studio 菜单中依次选择<strong>“生成”</strong>和<strong>“重新生成解决方案”</strong>。</p></li>
<li><p>打开命令提示符窗口，然后将当前目录更改为解压缩示例的文件夹下的 C# 文件夹。若要为 Fictional Investment 实体创建颁发者，请输入以下命令，然后按 <strong>Enter</strong>。将 [YOUR-SB-NAMESPACE] 替换为 ServiceBus 命名空间的名称，并将 [YOUR-SB-NAMESAPECE-DEFAULTKEY] 替换为 ServiceBus 命名空间的默认密钥。SBaZTool 将为新创建的颁发者返回该密钥。记下该值，稍后将用到它。</p>

<span class="codelanguage">CommandPrompt</span><pre><code class="CommandPrompt">sbaztool.exe -n [YOUR-SB-NAMESPACE] -k [YOUR-SB-NAMESPACE-DEFAULT-KEY] makeid FictionalInvestment
</code></pre>

<p><img src="Images/Create-a-new-Issuer.png?raw=true" alt="创建新颁发者" /> <br/> <em>创建新颁发者</em></p></li>
<li><p>现在，为 Fictional Retail 实体创建一个颁发者，方法是：重复上一步并输入“fictionalRetail”作为颁发者名称。同样，SBaZTool 也将为新创建的颁发者返回该密钥。记下该值，稍后将用到它。</p></li>
<li><p>通过执行以下命令，创建一个规则将 <em>Listen</em> 权限授予 <em>fictionalInvestment</em> 颁发者。将 [YOUR-SB-NAMESPACE] 替换为 ServiceBus 命名空间的名称，并将 [YOUR-SB-NAMESAPECE-DEFAULTKEY] 替换为 ServiceBus 命名空间的默认密钥。</p>

<span class="codelanguage">CommandPrompt</span><pre><code class="CommandPrompt">sbaztool.exe -n [YOUR-SB-NAMESPACE] -k [YOUR-SB-NAMESPACE-DEFAULT-KEY] grant Listen / fictionalInvestment
</code></pre>

<p><img src="./Images/Granting-Listen-permissions-to-the-fictionalInvestemt-issuer.png?raw=true" alt="向 fictionalInvestemt 颁发者授予 Listen 权限" title="向 fictionalInvestemt 颁发者授予 Listen 权限" />
  </p>

<p><em>向 fictionalInvestemt 颁发者授予 Listen 权限</em></p></li>
<li><p>现在，通过执行以下命令，创建一个规则以将 <em>Send</em> 权限授予 <em>fictionalInvestment</em> 颁发者。将 [YOUR-SB-NAMESPACE] 替换为 ServiceBus 命名空间的名称，并将 [YOUR-SB-NAMESAPECE-DEFAULTKEY] 替换为 ServiceBus 命名空间的默认密钥。</p>

<span class="codelanguage">CommandPrompt</span><pre><code class="CommandPrompt">sbaztool.exe -n [YOUR-SB-NAMESPACE] -k [YOUR-SB-NAMESPACE-DEFAULT-KEY] grant Send / fictionalInvestment
</code></pre>

<p><img src="./Images/image-0.png?raw=true" alt="向 fictionalInvestemt 颁发者授予 Listen 权限" title="向 fictionalInvestemt 颁发者授予 Listen 权限" />
    </p>

<p><em>向 fictionalInvestment 颁发者授予 Send 权限</em></p></li>
<li><p>现在，通过执行以下命令，创建一个规则以将权限授予 <em>fictionalRetail</em> 颁发者。将 [YOUR-SB-NAMESPACE] 替换为 ServiceBus 命名空间的名称，并将 [YOUR-SB-NAMESAPECE-DEFAULTKEY] 替换为 ServiceBus 命名空间的默认密钥。</p>

<span class="codelanguage">CommandPrompt</span><pre><code class="CommandPrompt">sbaztool.exe -n [YOUR-SB-NAMESPACE] -k [YOUR-SB-NAMESPACE-DEFAULT-KEY] grant Send / fictionalRetail
</code></pre>

<p><img src="./Images/Granting-Listen-permissions-to-the-fictionalRetail-issuer.png?raw=true" alt="向 fictionalRetail 颁发者授予 Listen 权限" title="向 fictionalRetail 颁发者授予 Listen 权限" />
</p>

<p><em>向 fictionalRetail 颁发者授予 Listen 权限</em></p></li>
</ol>

<p>现在，您已为两个服务以及客户端应用程序创建了颁发者，为服务颁发者设置了用于向其授予 <em>Listen</em> 和 <em>Send</em> 权限的规则，为客户端应用程序设置了用于向其授予 <em>Send</em> 权限的规则。</p> </span>
		</div>
	<br/>
	<p><a href="#top">返回页首</a></p>


				</div>
			</section>
			<footer>
				<div class="footer-sitemap" style="border-top:0"></div>
				<div class="footer-bottom">
					<ul>
						<li class="footer-copyright"><a href="http://www.microsoft.com"><img alt="microsoft" src="images/microsoft.png" /></a></li>					
												<li><a href="https://github.com/WindowsAzure-TrainingKit/HOL-ServiceBusServiceRemoting/issues" target="_new">记录问题</a></li>
												<li><a href="mailto:azcfeed@microsoft.com?subject=Windows Azure Training Kit">联系我们</a></li>
						<li><a href="EULA.htm">使用条款</a></li>
						<li><a href=".\">浏览内容</a></li>
						<li>&copy; 2012 Microsoft</li>
					</ul>
				</div>
			</footer>
			</div>
        </div>
    </div>
</body>
</html>

