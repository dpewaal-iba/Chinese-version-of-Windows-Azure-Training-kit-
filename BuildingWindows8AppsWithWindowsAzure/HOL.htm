<!DOCTYPE html>

<html class="no-js" lang="en" class="js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths">
<head id="ContentPlaceHolderDefault_Head1">
    <meta http-equiv="X-UA-Compatible" content="IE=9,chrome=1" />
    <meta charset=UTF-8" />
    <title>Windows Azure 培训包 - 使用 Windows Azure 网站构建 Windows 8 应用程序</title>
    <link rel="Stylesheet" type="text/css" media="all" href="styles/master.css" />
</head>
<body id="top" class="page-">
    <div id="page">
        <div id="wrapper" class="landingPage getStartedPage">            
            <div class="header">								
				<img alt="Windows Azure" src="images/azure-logo.png" /> <span class="mainHomepageSubTitle">培训包 - 2012 年 12 月更新</span>								
			</div>			
			<div class="nav-menu-header">
				<nav>
					<ul>
						<li class="MenuLink-Selected">
							<a href="#">内容</a>
						</li>
												<li class="MenuLink">
							<a href="Source">设置</a>
						</li>
											</ul>
				
										
						<span id="github-btn" class="github-btn"> <a id="gh-btn" title="在 GitHub 中复制此存储库的分支" href="https://github.com/WindowsAzure-TrainingKit/HOL-BuildingWindows8AppsWithWindowsAzure" target="_blank" class="gh-btn"> <span class="gh-ico"></span> <span id="gh-text" class="gh-text">分支</span> </a> </span> <span id="github-btn" class="github-btn github-watchers"> <a id="gh-btn" title="在 GitHub 中关注此存储库" href="https://github.com/WindowsAzure-TrainingKit/HOL-BuildingWindows8AppsWithWindowsAzure" target="_blank" class="gh-btn"> <span class="gh-ico"></span> <span id="gh-text" class="gh-text">关注</span> </a> </span>
						
									
				</nav>
			</div>	        
		</span>
			<div id="content" class="textpage">
            <section id="content-container">
				<div id="content" class="textpage">
			    <a name="top"></a>
				
				

		<div class="content">
			<?xml version="1.0" encoding="iso-8859-1"?><span><p><a name="Title"></a></p>

<h1 id="Building_Windows_8_Applications_using_Windows_Azure_Web_Sites">使用 Windows Azure 网站构建 Windows 8 应用程序</h1>

<hr />

<p><a name="Overview"></a></p>

<h2 id="Overview">概述</h2>

<p>应用是 Windows 8 体验的核心，而流畅的操作和丰富的内容则是应用的精髓所在。用户沉浸于全屏环境、Windows 8 样式 UI 应用中，他们关注的是内容，而非操作系统。</p>

<p>在此动手实验中，您将学习如何将 Windows 8 应用程序的流畅性与 Windows Azure 的强大功能结合起来：从 Windows 8 样式 UI 应用程序中，您将使用在 Windows Azure 网站中发布的 ASP.NET MVC 4 Web API 服务，并且在 Windows Azure SQL Database 中存储您的数据。此外，您还将学习如何在您的应用中配置 Windows 推送通知服务 (WNS)，以便将 Toast 通知从您的服务发送到所有注册的客户端。</p>

<p><a name="Objectives"></a></p>

<h3 id="Objectives">目标</h3>

<p>在此动手实验中，您将学习如何使用 Visual Studio 2012 来完成以下任务：</p>

<ul>
<li>创建一个 ASP.NET MVC 4 Web API 服务</li>
<li>将该服务发布到 Windows Azure 网站</li>
<li>创建一个使用该 Web API 服务的 Windows 8 样式 UI 应用程序</li>
<li>通过使用 Windows Azure Toolkit for Windows 8，将推送通知添加到该 Windows 8 样式 UI 应用程序</li>
</ul>

<p><a name="Prerequisites"></a></p>

<h3 id="Prerequisites">先决条件</h3>

<p>下面是完成此动手实验需要满足的先决条件：</p>

<ul>
<li><a href="http://www.microsoft.com/visualstudio/">Visual Studio Express 2012 for Web</a> 或更高版本。</li>
<li><a href="http://msdn.microsoft.com/zh-CN/windows/apps/hh852659">Visual Studio 2012 Express for Windows 8</a> 或更高版本。</li>
<li>启用了网站预览的 Windows Azure 订阅 - <a href="http://aka.ms/WATK-FreeTrial">注册以免费试用</a></li>
</ul>
<blockquote>
<p><strong>注意：</strong>本实验设计为使用 Windows 8 操作系统。</p>
</blockquote>
<p><a name="Setup"></a></p>

<h3 id="Setup">设置</h3>

<p>为了执行此动手实验中的各项练习，需要对环境进行设置。</p>

<ol>
<li><p>打开 Windows 资源管理器窗口，浏览到此实验的 <strong>Source</strong> 文件夹。</p></li>
<li><p>右键单击 <strong>Setup.cmd</strong> 文件，然后单击<strong>“以管理员身份运行”</strong>。这将启动安装过程，该过程将配置环境并安装此实验的 Visual Studio 代码段。</p></li>
</ol>
<blockquote>
<p><strong>注意：</strong>请务必在运行安装程序前检查此实验的所有依赖项。</p>
</blockquote>
<p><a name="CodeSnippets"></a></p>

<h3 id="Using_the_Code_Snippets">使用代码段</h3>

<p>实验文档将指导您插入代码块。为方便起见，大部分代码是以 Visual Studio 代码段的形式提供的，您可以在 Visual Studio 2012 中使用而不必手动添加。</p>

<hr />

<p><a name="Exercises"></a></p>

<h2 id="Exercises">练习</h2>

<p>此动手实验包括以下练习：</p>

<ol>
<li><a href="#Exercise1">构建 ASP.NET Web API 并从 Windows 8 样式 UI 应用中使用该 API</a></li>
<li><a href="#Exercise2">使用 Windows Azure SQL Database 和实体框架 Code First 执行基本的数据绑定和数据访问</a></li>
<li><a href="#Exercise3">在您的 Windows 8 样式 UI 应用程序中添加推送通知支持</a></li>
</ol>
<blockquote>
<p><strong>注意：</strong>每个练习都附带一个起始解决方案，它位于练习的 Begin 文件夹中，允许您独立执行每个练习。请注意，在练习期间添加的代码段不包含在这些起始解决方案中，在您完成练习前，这些代码段不一定起作用。</p>

<p>在练习的源代码内，您还会看到一个 End 文件夹，其中包含在完成相应练习中的步骤之后所生成的 Visual Studio 解决方案代码。如果在进行此动手实验时需要更多帮助，可以使用这些解决方案作为指南。</p>
</blockquote>
<p><a name="Exercise1"></a></p>

<h3 id="Exercise_1_Building_and_Consuming_an_ASPNET_Web_API_from_a_Windows_8_Style_UI_App">练习 1：构建 ASP.NET Web API 并从 Windows 8 样式 UI 应用中使用该 API</h3>

<p>ASP.NET Web API 是 MVC 4 中的一个新框架，便于为范围广泛的客户端构建和使用 HTTP 服务。</p>

<p>在此练习中，您将学习从一个 Windows 8 样式 UI 应用程序使用在 Windows Azure 网站中托管的 ASP.NET MVC 4 Web API REST 服务的基础知识。</p>

<p>为了实现这个目的，您将首先在门户中创建一个新的 Azure 网站以便托管该服务。然后，您将创建一个新的 ASP.NET MVC 4 Web API 项目，然后从 Visual Studio 中将该项目发布到 Windows Azure 中。发布了默认服务后，您将创建一个基本的 Windows 8 样式 UI 客户端应用程序，该应用程序有一个简单的列表用以检索服务值。</p>
<blockquote>
<p><strong>注意：</strong>如果您使用的是 Visual Studio 2012 Professional 或更高版本，此实验的 <strong>Source/Ex1-BuildingWebAPI/End</strong> 文件夹中提供有一个名为 <strong>End.All.sln</strong> 的解决方案，还有相应的 Web Api 和 StyleUI 项目。</p>
</blockquote>
<p><a name="Ex1Task1"></a></p>

<h4 id="Task_1_-_Creating_a_New_Web_Site_Hosted_in_Windows_Azure">任务 1 - 创建在 Windows Azure 中托管的新网站</h4>

<ol>
<li><p>转到 <a href="https://manage.windowsazure.com">Windows Azure 管理门户</a>，使用您的订阅关联的 <strong>Microsoft 帐户</strong>凭据登录。</p>

<p><img src="Images/log-in-into-windows-azure-portal.png?raw=true" alt="登录到 Windows Azure 门户" title="登录到 Windows Azure 门户" />
</p>

<p><em>登录到 Windows Azure 门户</em></p></li>
<li><p>在命令栏上，单击<strong>“新建”</strong>。</p>

<p><img src="Images/creating-a-new-web-site.png?raw=true" alt="创建新网站" title="创建新网站" />
</p>

<p><em>创建新网站</em></p></li>
<li><p>依次单击<strong>“计算”</strong>、<strong>“网站”</strong>和<strong>“快速创建”</strong>。为新网站提供一个可用 URL（例如 <em>customers-website</em>），然后单击<strong>“创建网站”</strong>。</p>
<blockquote>
<p><strong>注意：</strong>Windows Azure 网站是一个宿主平台，您可以在该平台上控制和管理云中运行的 Web 应用程序。通过“快速创建”选项，可以从门户外将已完成的 Web 应用程序部署到 Windows Azure 网站。它不包含用于设置数据库的步骤。</p>
</blockquote>
<p><img src="Images/creating-a-new-web-site-using-quick-create-op.png?raw=true" alt="使用“快速创建”创建新网站" title="使用“快速创建”创建新网站" />
</p>

<p><em>使用“快速创建”创建新网站</em></p></li>
<li><p>等待新网站创建完成。</p>

<p><img src="Images/creating-new-web-site-status.png?raw=true" alt="创建新网站状态" title="创建新网站状态" />
</p>

<p><em>创建新网站 - 状态</em></p></li>
<li><p>创建了网站后，单击 <strong>URL</strong> 列下面的链接以便检查它是否工作正常。</p>

<p><img src="Images/browsing-to-new-site.png?raw=true" alt="浏览到新网站" title="浏览到新网站" />
</p>

<p><em>浏览到新网站</em></p>

<p><img src="Images/web-site-running.png?raw=true" alt="运行中的网站" title="运行中的网站" />
</p>

<p><em>运行中的网站</em></p></li>
<li><p>返回到门户，然后单击<strong>“名称”</strong>列下的网站名称以显示该网站的管理页。</p>

<p><img src="Images/selecting-the-dashboard-tab.png?raw=true" alt="打开网站管理页" title="打开网站管理页" />
</p>

<p><em>打开网站面板</em></p></li>
<li><p>在<strong>“面板”</strong>页中的<strong>“速览”</strong>部分下，单击<strong>“下载发布配置文件”</strong>链接并且将该文件保存到一个已知的位置。您将在后面使用这些设置从 Visual Studio 发布网站。</p>
<blockquote>
<p><strong>注意：</strong>对于启用的每种发布方法，<em>发布配置文件</em> 包含将 Web 应用程序发布到 Windows Azure 网站所需的全部信息。发布配置文件包含有启用了发布方法的每个端点的 URL，以及连接到这些端点和进行身份验证所需的用户凭据和数据库字符串。<strong>Microsoft Visual Studio</strong> 支持读取发布配置文件以便自动执行发布配置，从而将 Web 应用程序发布到 Windows Azure 网站。</p>
</blockquote>
<p><img src="Images/download-publish-profile.png?raw=true" alt="下载发布配置文件" title="下载发布配置文件" />
</p>

<p><em>下载发布配置文件</em></p></li>
</ol>

<p><a name="Ex1Task2"></a></p>

<h4 id="Task_2_-_Creating_an_MVC_4_Web_API_Service">任务 2 - 创建 MVC 4 Web API 服务</h4>

<p>在此任务中，您将创建一个新的 MVC 4 Web API 项目并且研究其中的组件。</p>
<blockquote>
<p><strong>注意：</strong>您可以从<a href="http://www.asp.net/web-api">此处</a>了解有关 ASP.NET Web API 的更多信息。</p>
</blockquote>
<ol>
<li><p>打开 <strong>Visual Studio Express 2012 for Web</strong>，选择<strong>“文件”|“新建项目...”</strong>以便开始一个新的解决方案。</p>

<p><img src="Images/new-project.png?raw=true" alt="新建项目" title="新建项目" />
</p>

<p><em>创建新项目</em></p></li>
<li><p>在<strong>“新建项目”</strong>对话框中，在 <strong>Visual C# | Web</strong> 选项卡下选择<strong>“ASP.NET MVC 4 Web 应用程序”</strong>。</p>

<p>请确保选择了 <strong>.NET Framework 4</strong>，将其命名为 <em>WebApi</em>，选择一个位置，然后单击<strong>“确定”</strong>。</p>
<blockquote>
<p><strong>注意：</strong>在编写此实验时，Windows Azure 网站尚不支持 .NET Framework 4.5。</p>
</blockquote>
<p><img src="Images/new-mvc4-project.png?raw=true" alt="新建 MVC 4 项目" title="新建 MVC 4 项目" />
</p>

<p><em>新建 MVC 4 项目</em></p></li>
<li><p>在新的<strong>“ASP.NET MVC 4 Web 应用程序”</strong>对话框中，选择 <strong>Web API</strong> 并且确保选择 <strong>Razor</strong> 作为视图引擎。</p>

<p><img src="Images/new-aspnet-mvc4-webapi-project.png?raw=true" alt="新建 ASP.NET MVC 4 Web API 项目" title="新建 ASP.NET MVC 4 Web API 项目" />
</p>

<p><em>新建 ASP.NET MVC 4 Web API 项目</em></p></li>
<li><p>您现在将研究 ASP.NET Web API 项目的结构。请注意，Web API 项目的结构类似于 MVC 4 Web 应用程序。</p>

<p><img src="Images/aspnet-webapi-project.png?raw=true" alt="ASP.NET Web API 项目" title="ASP.NET Web API 项目" />
</p>

<p><em>ASP.NET Web API 项目</em></p>

<ol>
<li><p><strong>控制器：</strong>控制器是用于处理 HTTP 请求的对象。如果您使用过 ASP.NET MVC，就会发现其中的控制器与 Web API 中的控制器工作方式非常相似，只不过 Web API 中的控制器是从 ApiController 派生的，而不是从 Controller 类派生的。第一个主要差异是，Web API 控制器上的操作返回的是数据，而不是视图。“新建项目”向导在创建项目时会为您创建另外两个控制器：Home 和 Values。</p>

<p>-<strong>Home</strong> 控制器负责支持网站的 HTML 页，不直接与 Web API 相关。</p>

<p>-<strong>Values</strong> 控制器是典型的 Web API 控制器。</p></li>
<li><p><strong>模型</strong>：在该文件夹中，您将放置表示应用程序中数据的类。ASP.NET Web API 可以自动将您的模型序列化为 JSON、XML 或其他某个格式，然后将序列化的数据写入 HTTP 响应消息的正文。</p></li>
<li><p><strong>路由：</strong>为了确定要调用的操作，该框架使用在 App_Start/RouteConfig.cs 中配置的路由表。项目模板创建一个名为 Default 的默认 HTTP 路由。</p>

<span class="codelanguage">C#</span><pre><code class="C#">routes.MapRoute( name: <span style="color:#8B0000">&quot;Default&quot;</span>, url: <span style="color:#8B0000">&quot;{controller}/{action}/{id}&quot;</span>, defaults: <span style="color:#0000FF">new</span> { controller = <span style="color:#8B0000">&quot;Home&quot;</span>, action = <span style="color:#8B0000">&quot;Index&quot;</span>, id = UrlParameter.Optional } );
</code></pre>

<p>当 Web API 框架收到一个 HTTP 请求时，它会尝试将该 URI 与路由表中的路由模板之一进行匹配。在找到匹配路由后，Web API 将选择该控制器和操作。例如，以下 URI 匹配默认路由：</p>

<p>-/api/values/</p>

<p>-/api/values/1</p>
<blockquote>
<p><strong>注意：</strong>在路由中使用“api”前缀的原因是为了避免与 ASP.NET MVC 路由冲突，后者在相同的命名空间中管理视图。这样，您可以同时具有一个 values 视图和一个 values 操作方法。不过，您可以更改默认前缀并且使用您自己的路由。</p>
</blockquote></li>
</ol></li>
<li><p>按下 <strong>F5</strong> 运行该解决方案，也可以单击工具栏上的<strong>“开始”</strong>按钮运行该解决方案。Web API 模板主页将打开。</p>
<blockquote>
<p><strong>注意：</strong>如果在部署后该 Web 应用程序不显示，请尝试刷新浏览器几次。</p>
</blockquote></li>
<li><p>在浏览器中，转到 <strong>/api/values</strong> 以便检索示例服务的 JSON 输出。</p>

<p>浏览器将会提示您下载一个文件。单击<strong>“打开”</strong>。如果提示，请选择使用文本编辑器打开该文件。</p>

<p><img src="Images/retrieving-the-default-webapi-values.png?raw=true" alt="检索默认值" title="检索默认值" />
</p>

<p><em>检索默认值</em></p></li>
</ol>

<p><a name="Ex1Task3"></a></p>

<h4 id="Task_3_-_Publishing_the_Web_API_Service_to_Windows_Azure_Web_Sites">任务 3 - 将 Web API 服务发布到 Windows Azure 网站</h4>

<ol>
<li><p>在解决方案资源管理器中，右键单击项目节点，然后选择<strong>“发布”</strong>以便打开“发布 Web”向导。</p>

<p><img src="Images/publishing-the-service.png?raw=true" alt="发布服务" title="发布服务" />
</p>

<p><em>发布服务</em></p></li>
<li><p>在<strong>“配置文件”</strong>页中，单击<strong>“导入”</strong>按钮并且选择您之前下载的发布配置文件。单击<strong>“下一步”</strong>。</p>

<p><img src="Images/publishing-profile-profile-selection.png?raw=true" alt="发布配置文件选择" />
</p>

<p><em>选择发布配置文件</em></p></li>
<li><p>在<strong>“连接”</strong>页中，保留导入的值，然后单击<strong>“下一步”</strong>。</p>

<p><img src="Images/publishing-profile-imported.png?raw=true" alt="导入的发布配置文件" title="导入的发布配置文件" />
</p>

<p><em>导入的发布配置文件</em></p></li>
<li><p>在<strong>“设置”</strong>页中，保留默认值，然后单击<strong>“下一步”</strong>。</p>

<p><img src="Images/publish-settings-page.png?raw=true" alt="发布设置页" title="发布设置页" />
</p>

<p><em>发布设置页</em></p></li>
<li><p>在<strong>“预览”</strong>页上，单击<strong>“发布”</strong>。</p>

<p><img src="Images/publishing-a-web-site.png?raw=true" alt="发布网站" title="发布网站" />
</p>

<p><em>发布网站</em></p></li>
<li><p>在该过程完成后，已发布的网站将在您的默认 Web 浏览器中打开。转到 <strong>/api/values</strong> 以便检索默认值，并且测试该 Web API 服务运行正常。</p>

<p><img src="Images/default-web-service-published.png?raw=true" alt="默认 Web 服务已发布" title="默认 Web 服务已发布" />
</p>

<p><em>默认 Web 服务 - 已发布</em></p></li>
</ol>

<p><a name="Ex1Task4"></a></p>

<h4 id="Task_4_-_Creating_a_Windows_8_Style_UI_Client_Application">任务 4 - 创建 Windows 8 样式 UI 客户端应用程序</h4>

<p>在此任务中，您将创建一个空白的 Windows 8 样式 UI 应用程序，该应用程序将使用您正在运行的服务。</p>

<ol>
<li><p>打开 <strong>Visual Studio Express 2012 for Windows 8</strong>，选择<strong>“文件”|“新建项目...”</strong>以便开始一个新的解决方案。</p></li>
<li><p>在<strong>“新建项目”</strong>对话框中的<strong>“Visual C#”|“Windows 应用商店”</strong>应用程序下，选择<strong>“空白”</strong>应用程序。将其命名为 <em>Win8Client</em>，然后单击<strong>“确定”</strong>。</p>

<p><img src="Images/add-new-style-ui-app-basic-client-project.png?raw=true" alt="添加新的 Windows 8 样式 UI 应用程序基本客户端项目" title="添加新的 Windows 8 样式 UI 应用程序基本客户端项目" />
</p>

<p><em>添加新的 Windows 8 样式 UI 应用程序基本客户端项目</em></p>
<blockquote>
<p><strong>注意：</strong>如果您是首次创建 Windows Syle UI 应用程序，系统将会提示您获取 Windows 8 开发者许可证以便开发此类型的应用程序。在“开发者许可证”窗口中，单击<strong>“我同意”</strong>。</p>

<p><img src="Images/getting-developer-license.png?raw=true" alt="获取开发者许可证" title="获取开发者许可证" />
</p>

<p>系统将要求您使用 Microsoft 凭据登录。然后，单击<strong>“登录”</strong>。现在您拥有了一个开发者许可证。</p>

<p><img src="Images/inserting-credentials-developer-license.png?raw=true" alt="插入凭据以便获取开发者许可证" title="插入凭据以便获取开发者许可证" />
</p>

<p><img src="Images/developer-license-succesfully-obtained.png?raw=true" alt="开发者许可证成功获取" title="开发者许可证成功获取" />
</p>
</blockquote></li>
<li><p>在解决方案资源管理器中，右键单击 <strong>MainPage.xaml</strong> 文件并选择<strong>“查看代码”</strong>。</p>

<p><img src="Images/main-page-view-code.png?raw=true" alt="查看 MainPage.xaml 中的代码" title="查看 MainPage.xaml 中的代码" />
</p>

<p><em>查看 MainPage.xaml 中的代码</em></p></li>
<li><p>在 <strong>MainPage.xaml.cs</strong> 中，添加对 Windows.Data.Json 程序集的引用：</p>

<!-- mark:1 -->

<span class="codelanguage">C#</span><pre><code class="C#"><strong class="markLine"><span style="color:#0000FF">using</span> Windows.Data.Json;</strong>
</code></pre></li>
<li><p>将以下方法添加到 <strong>MainPage.xaml.cs</strong> 类，以便执行对 Web API 服务的异步调用。</p>

<p>GetItem() 实例化一个 HttpClient 对象，该对象将一个 GET 消息发送到服务 URL 并且以异步方式检索响应。然后，JsonArray 对象将在生成值列表之前反序列化和读取该响应。</p>
<blockquote>
<p><strong>注意：</strong>如果您想要阅读与异步方法有关的详细信息，则可以查看<a href="http://msdn.microsoft.com/zh-CN/vstudio/async">此文章</a>。</p>
</blockquote>
<p>（代码段 - <em>Building Windows 8 Apps - Ex1 - GetItems</em>）</p>

<!-- mark:1-22 -->

<span class="codelanguage">C#</span><pre><code class="C#"><strong class="markLine"><span style="color:#0000FF">public</span> <span style="color:#0000FF">async</span> <span style="color:#0000FF">void</span> GetItems()</strong>
<strong class="markLine">{</strong>
<strong class="markLine">     <span style="color:#0000FF">var</span> serviceURI = <span style="color:#8B0000">&quot;[YOUR-WINDOWS-AZURE-SERVICE-URI]/api/values&quot;</span>;</strong>
<strong class="markLine"></strong>
<strong class="markLine">     <span style="color:#0000FF">using</span> (<span style="color:#0000FF">var</span> client = <span style="color:#0000FF">new</span> System.Net.Http.HttpClient())</strong>
<strong class="markLine">     <span style="color:#0000FF">using</span> (<span style="color:#0000FF">var</span> response = <span style="color:#0000FF">await</span> client.GetAsync(serviceURI))</strong>
<strong class="markLine">     {</strong>
<strong class="markLine">          <span style="color:#0000FF">if</span> (response.IsSuccessStatusCode)</strong>
<strong class="markLine">          {</strong>
<strong class="markLine">                <span style="color:#0000FF">var</span> data = <span style="color:#0000FF">await</span> response.Content.ReadAsStringAsync();</strong>
<strong class="markLine">                <span style="color:#0000FF">var</span> values = JsonArray.Parse(data);</strong>
<strong class="markLine"></strong>
<strong class="markLine">                <span style="color:#0000FF">var</span> valueList = from v <span style="color:#0000FF">in</span> values</strong>
<strong class="markLine">                                     select <span style="color:#0000FF">new</span></strong>
<strong class="markLine">                                     {</strong>
<strong class="markLine">                                          Name = v.GetString()</strong>
<strong class="markLine">                                     };</strong>
<strong class="markLine"></strong>
<strong class="markLine">                <span style="color:#0000FF">this</span>.listValues.ItemsSource = valueList;</strong>
<strong class="markLine">          }</strong>
<strong class="markLine">     }</strong>
<strong class="markLine">}</strong>
</code></pre></li>
<li><p>使用您的 Windows Azure 发布的网站 URL 替换占位符 <strong>[YOUR-WINDOWS-AZURE-SERVICE-URL]</strong> 的值。您可以在网站的面板中查看该值。</p>
<blockquote>
<p><strong>注意：</strong>如果您想要在本地测试该服务，则启动该服务项目，查看其 URL 以及端口（例如 http://localhost:3565/）并使用该值。</p>
</blockquote></li>
<li><p>然后，在 <strong>OnNavigateTo</strong> 方法中，添加对 GetItem 方法的调用并按 <strong>Ctrl+S</strong> 进行保存。</p>

<!-- mark:3 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">protected</span> <span style="color:#0000FF">override</span> <span style="color:#0000FF">void</span> OnNavigatedTo(NavigationEventArgs e) {
<strong class="markLine">    <span style="color:#0000FF">this</span>.GetItems();</strong>
}
</code></pre></li>
<li><p>打开 <strong>MainPage.xaml</strong> 并在网格中添加以下控件，以便显示服务值。</p>

<p>您将添加一个列表框，该列表框将绑定一个值列表。</p>

<!-- mark:2-9 -->

<span class="codelanguage">XML</span><pre><code class="XML"><span style="color:#0000FF">&lt;</span><span style="color:#800000">Grid</span> <span style="color:#FF0000">Background</span>=<span style="color:#0000FF">&quot;{StaticResource ApplicationPageBackgroundThemeBrush}&quot;</span><span style="color:#0000FF">&gt;</span>        
<strong class="markLine">  <span style="color:#0000FF">&lt;</span><span style="color:#800000">ListBox</span> <span style="color:#FF0000">x</span>:<span style="color:#FF0000">Name</span>=<span style="color:#0000FF">&quot;listValues&quot;</span> <span style="color:#FF0000">HorizontalAlignment</span>=<span style="color:#0000FF">&quot;Left&quot;</span> <span style="color:#FF0000">Width</span>=<span style="color:#0000FF">&quot;250&quot;</span> <span style="color:#FF0000">ScrollViewer</span>.<span style="color:#FF0000">VerticalScrollBarVisibility</span>=<span style="color:#0000FF">&quot;Visible&quot;</span><span style="color:#0000FF">&gt;</span></strong>
<strong class="markLine">        <span style="color:#0000FF">&lt;</span><span style="color:#800000">ListBox.ItemTemplate</span><span style="color:#0000FF">&gt;</span></strong>
<strong class="markLine">             <span style="color:#0000FF">&lt;</span><span style="color:#800000">DataTemplate</span><span style="color:#0000FF">&gt;</span></strong>
<strong class="markLine">                  <span style="color:#0000FF">&lt;</span><span style="color:#800000">TextBlock</span> <span style="color:#FF0000">Text</span>=<span style="color:#0000FF">&quot;{Binding Name}&quot;</span> <span style="color:#FF0000">Width</span>=<span style="color:#0000FF">&quot;200&quot;</span> <span style="color:#FF0000">Height</span>=<span style="color:#0000FF">&quot;25&quot;</span> <span style="color:#FF0000">FontSize</span>=<span style="color:#0000FF">&quot;18&quot;</span> <span style="color:#0000FF">/&gt;</span>         </strong>
<strong class="markLine">             <span style="color:#0000FF">&lt;/</span><span style="color:#800000">DataTemplate</span><span style="color:#0000FF">&gt;</span></strong>
<strong class="markLine">        <span style="color:#0000FF">&lt;/</span><span style="color:#800000">ListBox.ItemTemplate</span><span style="color:#0000FF">&gt;</span></strong>
<strong class="markLine">  <span style="color:#0000FF">&lt;/</span><span style="color:#800000">ListBox</span><span style="color:#0000FF">&gt;</span></strong>
<strong class="markLine">  <span style="color:#0000FF">&lt;</span><span style="color:#800000">TextBlock</span> <span style="color:#FF0000">HorizontalAlignment</span>=<span style="color:#0000FF">&quot;Left&quot;</span> <span style="color:#FF0000">Margin</span>=<span style="color:#0000FF">&quot;265,10,0,0&quot;</span> <span style="color:#FF0000">TextWrapping</span>=<span style="color:#0000FF">&quot;Wrap&quot;</span> <span style="color:#FF0000">Text</span>=<span style="color:#0000FF">&quot;Web API default service values&quot;</span> <span style="color:#FF0000">VerticalAlignment</span>=<span style="color:#0000FF">&quot;Top&quot;</span> <span style="color:#FF0000">FontSize</span>=<span style="color:#0000FF">&quot;25&quot;</span><span style="color:#0000FF">/&gt;</span></strong>
<span style="color:#0000FF">&lt;/</span><span style="color:#800000">Grid</span><span style="color:#0000FF">&gt;</span>
</code></pre></li>
<li><p>请确保该 Windows 8 样式 UI 应用程序是启动项目并按 <strong>F5</strong> 运行该解决方案。</p>

<p>您将看到从该服务检索的值在该列表框中列出</p>

<p><img src="Images/basic-service-output.png?raw=true" alt="基本的服务输出" title="基本的服务输出" />
</p>

<p><em>服务输出</em></p></li>
</ol>

<hr />

<p><a name="Exercise2"></a></p>

<h3 id="Exercise_2_Basic_Data_Binding_and_Data_Access_Using_Windows_Azure_SQL_Databases_and_Entity_Framework_Code_First">练习 2：使用 Windows Azure SQL Database 和实体框架 Code First 执行基本的数据绑定和数据访问</h3>

<p>在此练习中，您将学习如何将您的 Windows 8 样式 UI 应用程序绑定到一个 ASP.NET Web API 服务，该服务使用 Code First 从 SQL Database 中的模型生成数据库。</p>

<p>在此练习的开始，您将设置一个新的 SQL Database。然后，您将创建一个新的 ASP.NET Web API 服务，并且将实体框架基架与 Code First 一起使用以便在 SQL Database 中生成服务方法和一个数据库。最后，您将研究并且自定义您的 Windows 8 样式 UI 应用程序，以便使用该服务并显示客户列表。</p>
<blockquote>
<p><strong>注意：</strong>如果您使用的是 Visual Studio 2012 Professional 或更高版本，此实验的 <strong>Source/Ex2-DataAccess/Begin</strong> 和 <strong>Source/Ex2-DataAccess/End</strong> 文件夹中分别提供了名为 <strong>Begin.All.sln</strong> 和 <strong>End.All.sln</strong> 的两个解决方案，以及相应的 Web Api 和 StyleUI 项目。</p>
</blockquote>
<p><strong>关于实体框架 Code First</strong></p>

<p>实体框架 (EF) 是一种对象关系映射程序 (ORM)，使您能够通过对概念应用模型进行编程就可以创建数据访问应用程序，您再也不需要使用关系存储架构直接进行编程了。</p>

<p>通过实体框架 Code First 模型工作流，您可以使用自己的域类表示在执行查询、变更跟踪和更新函数时 EF 依赖的模型。使用 Code First 开发工作流，您不需要通过创建数据库或指定架构来开始您的应用程序！而是可以撰写标准 .NET 类，用它们来定义最合适您的应用程序的域模型对象，然后实体框架将为您创建数据库。</p>
<blockquote>
<p><strong>注意：</strong>您可以从<a href="http://www.asp.net/entity-framework">此处</a>了解有关实体框架的详细信息。</p>
</blockquote>
<p><a name="Ex2Task1"></a></p>

<h4 id="Task_1_-_Creating_a_SQL_Database_Server">任务 1 - 创建 SQL Database 服务器</h4>

<p>在此任务中，您将在 Windows Azure 中设置一个 SQL Database 服务器，用于存储您的服务数据。</p>
<blockquote>
<p><strong>注意：</strong>如果您已在 Windows Azure 帐户中设置了 SQL Database 服务器，则可以跳过此任务。</p>
</blockquote>
<ol>
<li><p>切换到 <a href="https://manage.windowsazure.com">Windows Azure 管理门户</a>并且在左侧窗格中选择<strong>“SQL 数据库”</strong>，单击<strong>“服务器”</strong>链接并且在该页面的底部选择<strong>“添加”</strong>，以便开始创建 SQL Database 服务器。</p>

<p><img src="Images/creating-a-new-sql-database-server.png?raw=true" alt="创建新的 SQL Database 服务器" title="创建新的 SQL Database 服务器" />
</p>

<p><em>创建新的 SQL Database 服务器</em></p></li>
<li><p>在<strong>“服务器设置”</strong>对话框中，输入登录名（例如 User）、密码和区域。保持选中默认选项，单击确认按钮以便开始创建该服务器。</p>

<p><img src="Images/server-settings-dialog.png?raw=true" alt="服务器设置对话框" title="服务器设置对话框" />
</p>

<p><em>服务器设置对话框</em></p></li>
<li><p>一旦创建该服务器后，进入服务器<strong>“面板”</strong>并且从<strong>“管理 URL”</strong>值复制服务器 URL。您将在此实验的后面使用该值来配置 Web API 服务数据源。</p>

<p><img src="Images/servers-dashboard.png?raw=true" alt="服务器面板" />
</p>

<p><em>服务器面板</em></p></li>
</ol>

<p><a name="Ex2Task2"></a></p>

<h4 id="Task_2_-_Creating_an_ASPNET_Web_API_Service_with_Entity_Framework_Code_First_and_Scaffolding">任务 2 - 使用实体框架 Code First 和基架创建 ASP.NET Web API 服务</h4>

<p>在此任务中，您要将实体框架基架和 Code First 添加到 ASP.NET Web API 服务。在此任务结束时，您将拥有一个基本的 API 服务，该服务执行在 Windows Azure 网站中实现和发布的 CRUD 操作（创建、读取、更新和删除）。</p>

<ol>
<li><p>打开 <strong>Visual Studio Express 2012 for Web</strong>，然后打开位于 <strong><em>Source/Ex2-DataAccess/Begin/WebApi</em></strong> 文件夹下的 <strong><em>WebApi.sln</em></strong> 解决方案。或者，也可以继续使用在完成前一个练习后得到的解决方案。</p></li>
<li><p>添加对 <em>System.Runtime.Serialization</em> 的引用。在解决方案资源管理器中，右键单击引用文件夹，然后选择<strong>“添加引用”</strong>。</p>

<p><img src="Images/adding-a-new-reference.png?raw=true" alt="添加新引用" title="添加新引用" />
</p>

<p><em>添加新引用</em></p></li>
<li><p>选择<strong>“程序集”</strong>部分，搜索 <em>System.Runtime.Serialization</em> 并选择它。再单击<strong>“确定”</strong>。</p>

<p><img src="Images/adding-a-reference.png?raw=true" alt="添加引用" title="添加引用" />
</p>

<p><em>添加对 System.Runtime.Serialization 的引用</em></p></li>
<li><p>在<strong>解决方案资源管理器</strong>中右键单击<strong>“模型”</strong>文件夹，然后选择<strong>“添加”|“类”</strong>。将其命名为 <strong>Customer.cs</strong>。</p>

<p><img src="Images/add-model-class.png?raw=true" alt="添加模型类" title="添加模型类" />
</p>

<p><em>添加模型类</em></p>
<blockquote>
<p><strong>注意：</strong>您将先创建一个 Customer 模型类，而系统会使用基架功能自动创建服务中的 CRUD 操作。</p>
</blockquote></li>
<li><p>使用以下代码替换 Customer.cs 类的内容。按 <strong>Ctrl + S</strong> 保存更改。</p>

<p>（代码段 - <em>Building Windows 8 Apps - Ex2 - Customer class</em>）</p>

<!-- mark:1-32 -->

<span class="codelanguage">C#</span><pre><code class="C#"><strong class="markLine"><span style="color:#0000FF">namespace</span> WebApi.Models</strong>
<strong class="markLine">{</strong>
<strong class="markLine">     <span style="color:#0000FF">using</span> System.Runtime.Serialization;</strong>
<strong class="markLine"></strong>
<strong class="markLine">     [DataContract]</strong>
<strong class="markLine">     <span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> Customer</strong>
<strong class="markLine">     {</strong>
<strong class="markLine">          [DataMember]</strong>
<strong class="markLine">          <span style="color:#0000FF">public</span> <span style="color:#0000FF">int</span> CustomerId { <span style="color:#0000FF">get</span>; <span style="color:#0000FF">set</span>; }</strong>
<strong class="markLine"></strong>
<strong class="markLine">          [DataMember]</strong>
<strong class="markLine">          <span style="color:#0000FF">public</span> <span style="color:#0000FF">string</span> Name { <span style="color:#0000FF">get</span>; <span style="color:#0000FF">set</span>; }</strong>
<strong class="markLine"></strong>
<strong class="markLine">          [DataMember]</strong>
<strong class="markLine">          <span style="color:#0000FF">public</span> <span style="color:#0000FF">string</span> Phone { <span style="color:#0000FF">get</span>; <span style="color:#0000FF">set</span>; }</strong>
<strong class="markLine"></strong>
<strong class="markLine">          [DataMember]</strong>
<strong class="markLine">          <span style="color:#0000FF">public</span> <span style="color:#0000FF">string</span> Address { <span style="color:#0000FF">get</span>; <span style="color:#0000FF">set</span>; }</strong>
<strong class="markLine"></strong>
<strong class="markLine">          [DataMember]</strong>
<strong class="markLine">          <span style="color:#0000FF">public</span> <span style="color:#0000FF">string</span> Company { <span style="color:#0000FF">get</span>; <span style="color:#0000FF">set</span>; }</strong>
<strong class="markLine"></strong>
<strong class="markLine">          [DataMember]</strong>
<strong class="markLine">          <span style="color:#0000FF">public</span> <span style="color:#0000FF">string</span> Title { <span style="color:#0000FF">get</span>; <span style="color:#0000FF">set</span>; }</strong>
<strong class="markLine"></strong>
<strong class="markLine">          [DataMember]</strong>
<strong class="markLine">          <span style="color:#0000FF">public</span> <span style="color:#0000FF">string</span> Email { <span style="color:#0000FF">get</span>; <span style="color:#0000FF">set</span>; }</strong>
<strong class="markLine"></strong>
<strong class="markLine">          [DataMember]</strong>
<strong class="markLine">          <span style="color:#0000FF">public</span> <span style="color:#0000FF">string</span> Image { <span style="color:#0000FF">get</span>; <span style="color:#0000FF">set</span>; }</strong>
<strong class="markLine">     }</strong>
<strong class="markLine">}</strong>
</code></pre>
<blockquote>
<p><strong>注意：</strong>您要将 <strong>DataContract</strong> 和 <strong>DataMember</strong> 注释添加到该类及其属性，因为该 Windows 8 样式 UI 客户端应用程序要使用 DataContractJSONSerializer 对象读取 customers 并将其序列化到 JSON。</p>
</blockquote></li>
<li><p>在解决方案资源管理器中，右键单击 WebApi 项目并选择<strong>“生成”</strong>。</p>
<blockquote>
<p><strong>注意：</strong>如果您生成整个解决方案，将会收到错误，因为该样式 UI 应用程序客户端尚未完成。</p>
</blockquote></li>
<li><p>在解决方案资源管理器中，右键单击该 Web API 项目的<strong>“控制器”</strong>文件夹，然后选择<strong>“添加”|“控制器”</strong>以便打开<strong>“添加控制器”</strong>对话框。</p></li>
<li><p>将控制器的名称设置为 <strong>CustomersController</strong>。在<strong>“基架选项”</strong>中，选择<strong>“包含读/写操作的 API 控制器(使用实体框架)”</strong>模板，并且选择 <strong>Customer</strong> 作为模型类。</p>

<p><img src="Images/adding-a-controller-with-scaffolding.png?raw=true" alt="添加具有基架的控制器" title="添加具有基架的控制器" />
</p>

<p><em>添加具有基架的控制器</em></p>
<blockquote>
<p><strong>注意：</strong>如果您没有可供选择的模型类，则需要生成该项目。</p>
</blockquote></li>
<li><p>在数据上下文类中，选择<strong>“新建数据上下文”</strong>。将新的数据上下文命名为 <em>CustomerContext</em>，然后单击<strong>“确定”</strong>。</p>

<p><img src="Images/new-customers-context.png?raw=true" alt="新建 customers 上下文" title="新建 customers 上下文" />
</p>

<p><em>新建 customers 上下文</em></p></li>
<li><p>单击<strong>“添加”</strong>以便添加控制器。通过使用“包含读/写操作的 API 控制器(使用实体框架)”模板，将在 Web API 服务中自动生成针对 customers 的 CRUD 操作。</p></li>
<li><p>在创建了具有基架的控制器后，打开 CustomersController。请注意，已添加以下 CRUD 操作：</p>

<p>-DeleteCustomer(int id)</p>

<p>-GetCustomer(int id)</p>

<p>-GetCustomers()</p>

<p>-PostCustomer(Customer customer)</p>

<p>-PutCustomer(int id, Customer customer)</p>

<p>请注意，每个操作都在名称中包含作为前缀的 HTTP 谓词（Delete、Get、Post 等）。</p></li>
<li><p>现在，您将在数据库上下文中添加数据库初始值设定项方法，以便使用初始数据填充该数据库。在 CustomerContext.cs 文件中将以下 <strong>CustomerContextInitializer</strong> 类添加到 CustomerContext 类的后面，并保存所做更改。</p>

<p>（代码段 - <em>Building Windows 8 Apps - Ex2 - Context Initializer</em>）</p>

<!-- mark:15-19 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">using</span> System.Data.Entity;

<span style="color:#0000FF">namespace</span> WebApi.Models {
     <span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> CustomerContext : DbContext {
          <span style="color:#0000FF">public</span> CustomerContext() : <span style="color:#0000FF">base</span>(<span style="color:#8B0000">&quot;name=CustomerContext&quot;</span>) { }

          <span style="color:#0000FF">public</span> DbSet&lt;Customer&gt; Customers { <span style="color:#0000FF">get</span>; <span style="color:#0000FF">set</span>; } }

     <span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> CustomerContextInitializer : DropCreateDatabaseIfModelChanges&lt;CustomerContext&gt;
<strong class="markLine">     {</strong>
<strong class="markLine">          <span style="color:#0000FF">protected</span> <span style="color:#0000FF">override</span> <span style="color:#0000FF">void</span> Seed(CustomerContext context)</strong>
<strong class="markLine">          {</strong>
<strong class="markLine">          }</strong>
<strong class="markLine">     }</strong>
}
</code></pre>
<blockquote>
<p><strong>注意：</strong>Code First 允许我们通过使用数据库初始值设定项和覆盖 Seed 方法插入我们的数据库。在该示例中，该类继承自 <strong>DropCreateDatabaseIfModelChanges&lt;TContext&gt;</strong>，其中，TContext 是 CustomerContext。</p>

<p><strong>DropCreateDatabaseIfModelChanges&lt;TContext&gt;</strong> 类是 <strong>IDatabaseInitializer&lt;TContext&gt;</strong> 的实现，将仅在创建了数据库后更改了模型的情况下删除、重新创建数据库，并且可以选择使用数据重设数据库的种子。这是通过在创建时将存储模型的哈希写入数据库、然后将该哈希与从当前模型生成的哈希进行比较而实现的。</p>

<p>或者，您还可以使用 <strong>CreateDatabaseIfNotExists&lt;TContext&gt;</strong>，它只在数据库不存在的情况下重新创建数据库并且可以选择使用数据重设数据库的种子；也可以使用 <strong>DropCreateDatabaseAlways&lt;TContext&gt;</strong>，它始终在首次在应用程序域中使用上下文时重新创建数据库并且可以选择使用数据重设数据库的种子。</p>
</blockquote></li>
<li><p>在 CustomerContextInitializer <strong>Seed</strong> 方法中，将以下客户添加到上下文以便使用客户填充数据库。</p>

<p>（代码段 - <em>Building Windows 8 Apps - Ex2 - Context Initializer Seed</em>）</p>

<!-- mark:3-102 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">protected</span> <span style="color:#0000FF">override</span> <span style="color:#0000FF">void</span> Seed(CustomerContext context) {
<strong class="markLine">    context.Customers.Add(<span style="color:#0000FF">new</span> Customer</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">         Name = <span style="color:#8B0000">&quot;Catherine Abel&quot;</span>, Email = <span style="color:#8B0000">&quot;catherine.abel@vannuys.com&quot;</span>,</strong>
<strong class="markLine">         Company = <span style="color:#8B0000">&quot;Van Nuys&quot;</span>, Phone = <span style="color:#8B0000">&quot;541 555 0100&quot;</span>,</strong>
<strong class="markLine">         Address = <span style="color:#8B0000">&quot;1 Microsoft Way, Redmond, WA, 98052&quot;</span>,</strong>
<strong class="markLine">         Image = <span style="color:#8B0000">&quot;Assets/CustomerPlaceholder.png&quot;</span>,</strong>
<strong class="markLine">         Title = <span style="color:#8B0000">&quot;Sales&quot;</span></strong>
<strong class="markLine">    });</strong>
<strong class="markLine"></strong>
<strong class="markLine">    context.Customers.Add(<span style="color:#0000FF">new</span> Customer</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">         Name = <span style="color:#8B0000">&quot;Kim Branch&quot;</span>, Email = <span style="color:#8B0000">&quot;kim.branch@contoso.com&quot;</span>,</strong>
<strong class="markLine">         Company = <span style="color:#8B0000">&quot;Contoso&quot;</span>, Phone = <span style="color:#8B0000">&quot;541 555 0100&quot;</span>,</strong>
<strong class="markLine">         Address = <span style="color:#8B0000">&quot;1 Microsoft Way, Redmond, WA, 98052&quot;</span>,</strong>
<strong class="markLine">         Image = <span style="color:#8B0000">&quot;Assets/CustomerPlaceholder.png&quot;</span>,</strong>
<strong class="markLine">         Title = <span style="color:#8B0000">&quot;Sales&quot;</span></strong>
<strong class="markLine">    });</strong>
<strong class="markLine"></strong>
<strong class="markLine">    context.Customers.Add(<span style="color:#0000FF">new</span> Customer</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">         Name = <span style="color:#8B0000">&quot;Frances Adams&quot;</span>, Email = <span style="color:#8B0000">&quot;frances.adams@contoso.com&quot;</span>,</strong>
<strong class="markLine">         Company = <span style="color:#8B0000">&quot;Contoso&quot;</span>, Phone = <span style="color:#8B0000">&quot;541 555 0100&quot;</span>,</strong>
<strong class="markLine">         Address = <span style="color:#8B0000">&quot; 1 Microsoft Way, Redmond, WA, 98052&quot;</span>,</strong>
<strong class="markLine">         Image = <span style="color:#8B0000">&quot;Assets/CustomerPlaceholder.png&quot;</span>,</strong>
<strong class="markLine">         Title = <span style="color:#8B0000">&quot;Sales&quot;</span></strong>
<strong class="markLine">    });</strong>
<strong class="markLine"></strong>
<strong class="markLine">    context.Customers.Add(<span style="color:#0000FF">new</span> Customer</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">         Name = <span style="color:#8B0000">&quot;Mark Harrington&quot;</span>, Email = <span style="color:#8B0000">&quot;mark.harrington@datum.com&quot;</span>,</strong>
<strong class="markLine">         Company = <span style="color:#8B0000">&quot;A. Datum Corporation&quot;</span>, Phone = <span style="color:#8B0000">&quot;541 555 0100&quot;</span>,</strong>
<strong class="markLine">         Address = <span style="color:#8B0000">&quot;1 Microsoft Way, Redmond, WA, 98052&quot;</span>,</strong>
<strong class="markLine">         Image = <span style="color:#8B0000">&quot;Assets/CustomerPlaceholder.png&quot;</span>,</strong>
<strong class="markLine">         Title = <span style="color:#8B0000">&quot;Sales&quot;</span></strong>
<strong class="markLine">    });</strong>
<strong class="markLine"></strong>
<strong class="markLine">    context.Customers.Add(<span style="color:#0000FF">new</span> Customer</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">         Name = <span style="color:#8B0000">&quot;Keith Harris&quot;</span>, Email = <span style="color:#8B0000">&quot;keith.harris@adventureworks.com&quot;</span>, </strong>
<strong class="markLine">         Company = <span style="color:#8B0000">&quot;Adventure Works&quot;</span>, Phone = <span style="color:#8B0000">&quot;541 555 0100&quot;</span>,</strong>
<strong class="markLine">         Address = <span style="color:#8B0000">&quot;1 Microsoft Way, Redmond, WA, 98052&quot;</span>,</strong>
<strong class="markLine">         Image = <span style="color:#8B0000">&quot;Assets/CustomerPlaceholder.png&quot;</span>,</strong>
<strong class="markLine">         Title = <span style="color:#8B0000">&quot;Sales&quot;</span></strong>
<strong class="markLine">    });</strong>
<strong class="markLine"></strong>
<strong class="markLine">    context.Customers.Add(<span style="color:#0000FF">new</span> Customer</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">         Name = <span style="color:#8B0000">&quot;Roger Harui&quot;</span>, Email = <span style="color:#8B0000">&quot;roger.harui@baldwinmuseum.com&quot;</span>,</strong>
<strong class="markLine">         Company = <span style="color:#8B0000">&quot;Baldwin Museum of Art&quot;</span>, Phone = <span style="color:#8B0000">&quot;541 555 0100&quot;</span>,</strong>
<strong class="markLine">         Address = <span style="color:#8B0000">&quot;1 Microsoft Way, Redmond, WA, 98052&quot;</span>,</strong>
<strong class="markLine">         Image = <span style="color:#8B0000">&quot;Assets/CustomerPlaceholder.png&quot;</span>,</strong>
<strong class="markLine">         Title = <span style="color:#8B0000">&quot;Sales&quot;</span></strong>
<strong class="markLine">    });</strong>
<strong class="markLine"></strong>
<strong class="markLine">    context.Customers.Add(<span style="color:#0000FF">new</span> Customer</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">         Name = <span style="color:#8B0000">&quot;Pilar Pinilla&quot;</span>, Email = <span style="color:#8B0000">&quot;pilar.pinilla@blueyonderairlines.com&quot;</span>,</strong>
<strong class="markLine">         Company = <span style="color:#8B0000">&quot;Blue Yonder Airlines&quot;</span>, Phone = <span style="color:#8B0000">&quot;541 555 0100&quot;</span>,</strong>
<strong class="markLine">         Address = <span style="color:#8B0000">&quot;1 Microsoft Way, Redmond, WA&quot;</span>,</strong>
<strong class="markLine">         Image = <span style="color:#8B0000">&quot;Assets/CustomerPlaceholder.png&quot;</span>,</strong>
<strong class="markLine">         Title = <span style="color:#8B0000">&quot;Sales&quot;</span></strong>
<strong class="markLine">    });</strong>
<strong class="markLine"></strong>
<strong class="markLine">    context.Customers.Add(<span style="color:#0000FF">new</span> Customer</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">         Name = <span style="color:#8B0000">&quot;Kari Hensien&quot;</span>, Email = <span style="color:#8B0000">&quot;kari.hensien@citypowerlight.com&quot;</span>,</strong>
<strong class="markLine">         Company = <span style="color:#8B0000">&quot;City Power &amp; Light&quot;</span>, Phone = <span style="color:#8B0000">&quot;541 555 0100&quot;</span>,</strong>
<strong class="markLine">         Address = <span style="color:#8B0000">&quot;1 Microsoft Way, Redmond, WA&quot;</span>,</strong>
<strong class="markLine">         Image = <span style="color:#8B0000">&quot;Assets/CustomerPlaceholder.png&quot;</span>,</strong>
<strong class="markLine">         Title = <span style="color:#8B0000">&quot;Sales&quot;</span></strong>
<strong class="markLine">    });</strong>
<strong class="markLine"></strong>
<strong class="markLine">    context.Customers.Add(<span style="color:#0000FF">new</span> Customer</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">         Name = <span style="color:#8B0000">&quot;Johny Porter&quot;</span>, Email = <span style="color:#8B0000">&quot;johny.porter@cohowinery.com&quot;</span>,</strong>
<strong class="markLine">         Company = <span style="color:#8B0000">&quot;Coho Winery&quot;</span>, Phone = <span style="color:#8B0000">&quot;541 555 0100&quot;</span>,</strong>
<strong class="markLine">         Address = <span style="color:#8B0000">&quot;1 Microsoft Way, Redmond, WA&quot;</span>,</strong>
<strong class="markLine">         Image = <span style="color:#8B0000">&quot;Assets/CustomerPlaceholder.png&quot;</span>,</strong>
<strong class="markLine">         Title = <span style="color:#8B0000">&quot;Sales&quot;</span></strong>
<strong class="markLine">    });</strong>
<strong class="markLine"></strong>
<strong class="markLine">    context.Customers.Add(<span style="color:#0000FF">new</span> Customer</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">         Name = <span style="color:#8B0000">&quot;Peter Brehm&quot;</span>, Email = <span style="color:#8B0000">&quot;peter.brehm@cohowinery.com&quot;</span>,</strong>
<strong class="markLine">         Company = <span style="color:#8B0000">&quot;Coho Winery&quot;</span>, Phone = <span style="color:#8B0000">&quot;541 555 0100&quot;</span>,</strong>
<strong class="markLine">         Address = <span style="color:#8B0000">&quot;1 Microsoft Way, Redmond, WA&quot;</span>,</strong>
<strong class="markLine">         Image = <span style="color:#8B0000">&quot;Assets/CustomerPlaceholder.png&quot;</span>,</strong>
<strong class="markLine">         Title = <span style="color:#8B0000">&quot;Sales&quot;</span></strong>
<strong class="markLine">    });</strong>
<strong class="markLine"></strong>
<strong class="markLine">    context.Customers.Add(<span style="color:#0000FF">new</span> Customer</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">         Name = <span style="color:#8B0000">&quot;John Smith&quot;</span>, Email = <span style="color:#8B0000">&quot;john.smith@contoso.com&quot;</span>,</strong>
<strong class="markLine">         Company = <span style="color:#8B0000">&quot;Contoso&quot;</span>, Phone = <span style="color:#8B0000">&quot;541 555 0100&quot;</span>,</strong>
<strong class="markLine">         Address = <span style="color:#8B0000">&quot;1 Microsoft Way, Redmond, WA&quot;</span>,</strong>
<strong class="markLine">         Image = <span style="color:#8B0000">&quot;Assets/CustomerPlaceholder.png&quot;</span>,</strong>
<strong class="markLine">         Title = <span style="color:#8B0000">&quot;Sales&quot;</span></strong>
<strong class="markLine">    });</strong>
<strong class="markLine"></strong>
<strong class="markLine">    context.SaveChanges();</strong>
}
</code></pre></li>
<li><p>打开 <strong>Global.asax.cs</strong> 并且添加对 <strong>WebApi.Models</strong> 和 <strong>System.Data.Entity</strong> 的引用。</p>

<!-- mark:1-2 -->

<span class="codelanguage">C#</span><pre><code class="C#"><strong class="markLine"><span style="color:#0000FF">using</span> WebApi.Models;</strong>
<strong class="markLine"><span style="color:#0000FF">using</span> System.Data.Entity;</strong>
</code></pre></li>
<li><p>在 Global.asax.cs 的 <strong>Application_Start</strong> 方法中添加数据库初始值设定项。</p>

<!-- mark:5 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">protected</span> <span style="color:#0000FF">void</span> Application_Start() { ...

<strong class="markLine">    Database.SetInitializer&lt;CustomerContext&gt;(<span style="color:#0000FF">new</span> CustomerContextInitializer());</strong>
}
</code></pre></li>
</ol>

<p><a name="Ex2Task3"></a></p>

<h4 id="Task_3_-_Publishing_the_Customers_Web_API_Service_to_Windows_Azure">任务 3 - 将 Customers Web API 服务发布到 Windows Azure</h4>

<p>在此任务中，您将首先替换连接字符串以便使用 SQL Database，然后在 Windows Azure 网站中发布已更新的 Web API 服务。</p>

<ol>
<li><p>打开 <strong>Web.Config</strong> 并且在 <strong>configuration</strong> 部分下找到 <strong>connectionStrings</strong> 部分。</p>

<p>在 Windows Azure 网站中发布该服务前，您将更改连接字符串并且使用您已在此练习的第一个任务中创建的 SQL Database。</p>

<p>现在您将替换默认的 CustomerContext 连接字符串（它使用 LocalDB）以便将目标设为您的 SQL Database 服务器。为此，使用以下值替换 <strong>CustomerContext</strong> 连接字符串的 <strong>connectionString</strong> 值。按如下所示替换占位符：</p>
<blockquote>
<p><strong>注意</strong>：LocalDB 是 SQL Server Express 的一个版本，默认与 Visual Studio 2012 一起安装并且是专门为开发人员而创建的。LocalDB 安装起来非常轻松并且无需管理，而它提供与常规 SQL Server Express 相同的 T-SQL 语言、编程图面和客户端提供程序。</p>
</blockquote>
<p>-<strong>服务器 URL：</strong>使用您的服务器 URL 完成该值。例如：eswngivxru.database.windows.net</p>

<p>-<strong>服务器名称</strong>：这是您的服务器名称。例如：eswngivxru</p>

<p>-<strong>服务器管理用户：</strong>使用您的服务器的管理员登录名。</p>

<p>-<strong>密码：</strong>使用服务器的管理员密码。</p>

<p>-<strong>数据库：</strong>确保初始目录值与服务器中任何现有数据库的名称<strong>不</strong>匹配。实体框架 Code First 将为您创建数据库。</p>

<span class="codelanguage">XML</span><pre><code class="XML">Server=tcp:[SERVER_URL],1433;Database=CustomersDB;User ID=[SERVER_ADMIN_LOGIN];Password=[SERVER_ADMIN_PASSWORD];Trusted_Connection=False;Encrypt=True;Connection Timeout=30;

</code></pre>

<p>例如：</p>

<span class="codelanguage">XML</span><pre><code class="XML"><span style="color:#0000FF">&lt;</span><span style="color:#800000">add</span> <span style="color:#FF0000">name</span>=<span style="color:#0000FF">&quot;CustomerContext&quot;</span> <span style="color:#FF0000">connectionString</span>=<span style="color:#0000FF">&quot;Server=tcp:[YOUR-SERVER-NAME].database.windows.net,1433;Database=CustomersDB;User ID=[YOUR-SERVER-USERNAME];Password=[YOUR-SERVER-PASSWORD];Trusted_Connection=False;Encrypt=True;Connection Timeout=30;&quot;</span>
  <span style="color:#FF0000">providerName</span>=<span style="color:#0000FF">&quot;System.Data.SqlClient&quot;</span> <span style="color:#0000FF">/&gt;</span>

</code></pre>
<blockquote>
<p><strong>注意：</strong>您可以从 Windows Azure 管理门户的 SQL Database 服务器<strong>“面板”</strong>中获取您的<strong>“服务器 URL”</strong>。出于简化目的，您使用您的服务器管理员用户连接到数据库，但在生产环境中，建议您创建其他的 SQL Server 用户。</p>

<p><img src="Images/servers-dashboard.png?raw=true" alt="服务器的面板" title="服务器的面板" />
</p>
</blockquote></li>
<li><p>按 <strong>Ctrl + S</strong> 保存更改。</p></li>
<li><p>现在，连接字符串以您的 SQL Database 为目标，您将在 Windows Azure 网站中发布该服务。</p></li>
<li><p>按照<a href="#Ex1Task1">练习 1 中的任务 1</a> 中的步骤，创建新的 Windows Azure 网站。如果需要，您可以删除在练习 1 中创建的网站。还要下载其发布配置文件。</p></li>
<li><p>回到 Visual Studio 中，在解决方案资源管理器中右键单击该 Web API 服务项目，然后选择<strong>“发布”</strong>。</p></li>
<li><p>单击<strong>“导入”</strong>，然后导入网站发布配置文件。</p></li>
<li><p>单击<strong>“发布”</strong>以便发布该 Web 服务，并等待该过程完成。</p></li>
<li><p>在打开的浏览器中，转到 <strong>/api/customers</strong> 以便检索客户的完整列表。</p>
<blockquote>
<p><strong>注意：</strong>实体框架将在您首次运行该应用程序时创建数据库。您还可以在 Windows Azure 门户中访问数据库表并且检查是否已添加数据。</p>
</blockquote></li>
</ol>

<p><a name="Ex2Task4"></a></p>

<h4 id="Task_4_-_Exploring_the_Windows_8_Style_UI_Application">任务 4 - 研究 Windows 8 样式 UI 应用程序</h4>

<p>在此任务中，您将研究使用 Windows 8 样式 UI 应用程序网格模板构建的 Customer 客户端应用程序。您将简要地执行一遍全过程并且了解样式 UI 网格应用程序的主要组件。</p>

<ol>
<li><p>打开 <strong>Visual Studio Express 2012 for Windows 8</strong>，然后打开位于 <strong>Source/Ex2-DataAccess/Begin/CustomerManager</strong> 文件夹下的 <strong>CustomerManager.sln</strong> 解决方案。</p></li>
<li><p>这是显示一个客户名单的客户端 Windows 8 样式 UI 应用程序。它基于 Visual Studio 网格模板。</p>
<blockquote>
<p><strong>注意：</strong>该网格应用程序是可用于 Windows 8 样式 UI 应用程序的 Visual Studio 2012 模板之一，它包含三页。第一页在网格布局中显示一组项。在单击某一组时，第二页将显示所选组的详细信息。最后，在选择某一项时，第三页将显示该项的详细信息。</p>
</blockquote>
<p>在这个解决方案中，您将找到一个简化的网格模板，它仅包含具有客户信息的自定义数据模型的组和详细信息页。</p>

<p><img src="Images/customermanager-styleui-app.png?raw=true" alt="CustomerManager Windows 8 样式 UI 应用程序" title="CustomerManager Windows 8 样式 UI 应用程序" />
</p>

<p><em>CustomerManager Windows 8 样式 UI 应用程序</em></p>

<p>主要的应用程序页如下所示：</p>

<p>-<em>GroupedCustomersPage：</em>在网格布局中显示客户信息</p>

<p>-<em>CustomerDetailPage：</em>显示客户的详细信息</p>

<p>-<em>NewCustomerPage：</em>添加新客户</p></li>
<li><p>展开 <strong>ViewModels</strong> 文件夹并打开 <strong>GroupedCustomersViewModel.cs</strong>。</p>

<p>此解决方案的 XAML 页绑定 ViewModels 类，这些类检索和准备将显示的所需数据。</p>

<p>GroupedCustomersViewModel 包含 CustomerViewModel 的 ObservableCollection 以及用于以异步方式检索客户的方法（在下一个练习中，您将完成 CustomersWebApiClient 调用）。</p>

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">class</span> GroupedCustomersViewModel : BindableBase {
    <span style="color:#0000FF">public</span> ObservableCollection&lt;CustomerViewModel&gt; CustomersList { <span style="color:#0000FF">get</span>; <span style="color:#0000FF">set</span>; }

    <span style="color:#0000FF">public</span> GroupedCustomersViewModel() {
        <span style="color:#0000FF">this</span>.CustomersList = <span style="color:#0000FF">new</span> ObservableCollection&lt;CustomerViewModel&gt;();

        <span style="color:#0000FF">this</span>.GetCustomers(); }

    <span style="color:#0000FF">private</span> <span style="color:#0000FF">async</span> <span style="color:#0000FF">void</span> GetCustomers() { IEnumerable&lt;Customer&gt; customers = <span style="color:#0000FF">await</span> CustomersWebApiClient.GetCustomers();

        <span style="color:#0000FF">foreach</span> (<span style="color:#0000FF">var</span> customer <span style="color:#0000FF">in</span> customers) {
            <span style="color:#0000FF">this</span>.CustomersList.Add(<span style="color:#0000FF">new</span> CustomerViewModel(customer)); } } }
</code></pre>
<blockquote>
<p><strong>注意：</strong>Windows 运行时现在支持使用 ObservableCollection 设置动态绑定，以便在集合中执行的插入或删除将自动更新 UI。</p>
</blockquote>
<p>GroupedCustomersPage.cs 中的代码以如下方式声明、初始化和绑定视图模型。</p>

<span class="codelanguage">C#</span><pre><code class="C#">...

<span style="color:#0000FF">private</span> GroupedCustomersViewModel ViewModel { <span style="color:#0000FF">get</span>; <span style="color:#0000FF">set</span>; }

<span style="color:#0000FF">public</span> GroupedCustomersPage() {            
    <span style="color:#0000FF">this</span>.InitializeComponent();
    <span style="color:#0000FF">this</span>.ViewModel = <span style="color:#0000FF">new</span> GroupedCustomersViewModel(); } ... 

<span style="color:#0000FF">protected</span> <span style="color:#0000FF">override</span> <span style="color:#0000FF">void</span> LoadState(Object navigationParameter, Dictionary&lt;String, Object&gt; pageState) {            
    <span style="color:#0000FF">this</span>.DataContext = <span style="color:#0000FF">this</span>.ViewModel; } ...
</code></pre>

<p>在此页的 XAML 代码中，每个集合都通过 CollectionViewSource 绑定到 ViewModel，从 ViewModel 指向客户列表。</p>

<span class="codelanguage">XML</span><pre><code class="XML"><span style="color:#0000FF">&lt;</span><span style="color:#800000">Page.Resources</span><span style="color:#0000FF">&gt;</span>
  <span style="color:#0000FF">&lt;</span><span style="color:#800000">CollectionViewSource</span>
        <span style="color:#FF0000">x</span>:<span style="color:#FF0000">Name</span>=<span style="color:#0000FF">&quot;groupedItemsViewSource&quot;</span>
        <span style="color:#FF0000">Source</span>=<span style="color:#0000FF">&quot;{Binding CustomersList}&quot;</span>            
        <span style="color:#FF0000">IsSourceGrouped</span>=<span style="color:#0000FF">&quot;false&quot;</span> <span style="color:#0000FF">/&gt;</span>
<span style="color:#0000FF">&lt;/</span><span style="color:#800000">Page.Resources</span><span style="color:#0000FF">&gt;</span>

... 
</code></pre>

<p>然后，每个页面元素（列表、网格等）都使用定义的集合视图源并且绑定到特定属性。</p>

<!-- mark:8,17 -->

<span class="codelanguage">XML</span><pre><code class="XML"><span style="color:#0000FF">&lt;</span><span style="color:#800000">GridView</span>
        <span style="color:#FF0000">x</span>:<span style="color:#FF0000">Name</span>=<span style="color:#0000FF">&quot;itemGridView&quot;</span>
        <span style="color:#FF0000">AutomationProperties</span>.<span style="color:#FF0000">AutomationId</span>=<span style="color:#0000FF">&quot;ItemGridView&quot;</span>
        <span style="color:#FF0000">AutomationProperties</span>.<span style="color:#FF0000">Name</span>=<span style="color:#0000FF">&quot;Grouped Items&quot;</span>
        <span style="color:#FF0000">Grid</span>.<span style="color:#FF0000">Row</span>=<span style="color:#0000FF">&quot;1&quot;</span>
        <span style="color:#FF0000">Margin</span>=<span style="color:#0000FF">&quot;0,-3,0,0&quot;</span>
        <span style="color:#FF0000">Padding</span>=<span style="color:#0000FF">&quot;116,0,40,46&quot;</span>
<strong class="markLine">        <span style="color:#FF0000">ItemsSource</span>=<span style="color:#0000FF">&quot;{Binding Source={StaticResource groupedItemsViewSource}}&quot;</span>            </strong>
        <span style="color:#FF0000">SelectionMode</span>=<span style="color:#0000FF">&quot;None&quot;</span>
        <span style="color:#FF0000">IsItemClickEnabled</span>=<span style="color:#0000FF">&quot;True&quot;</span>
        <span style="color:#FF0000">ItemClick</span>=<span style="color:#0000FF">&quot;CustomerItem_Click&quot;</span><span style="color:#0000FF">&gt;</span>

        <span style="color:#0000FF">&lt;</span><span style="color:#800000">GridView.ItemTemplate</span><span style="color:#0000FF">&gt;</span>
            <span style="color:#0000FF">&lt;</span><span style="color:#800000">DataTemplate</span><span style="color:#0000FF">&gt;</span>
                <span style="color:#0000FF">&lt;</span><span style="color:#800000">Grid</span> <span style="color:#FF0000">HorizontalAlignment</span>=<span style="color:#0000FF">&quot;Center&quot;</span> <span style="color:#FF0000">VerticalAlignment</span>=<span style="color:#0000FF">&quot;Center&quot;</span> <span style="color:#FF0000">Width</span>=<span style="color:#0000FF">&quot;300&quot;</span> <span style="color:#FF0000">Height</span>=<span style="color:#0000FF">&quot;225&quot;</span>  <span style="color:#FF0000">Margin</span>=<span style="color:#0000FF">&quot;0,0,0,0&quot;</span><span style="color:#0000FF">&gt;</span>
                    <span style="color:#0000FF">&lt;</span><span style="color:#800000">Border</span> <span style="color:#FF0000">Background</span>=<span style="color:#0000FF">&quot;{StaticResource ListViewItemPlaceholderBackgroundThemeBrush}&quot;</span><span style="color:#0000FF">&gt;</span>
<strong class="markLine">                        <span style="color:#0000FF">&lt;</span><span style="color:#800000">Image</span> <span style="color:#FF0000">Source</span>=<span style="color:#0000FF">&quot;{Binding Image}&quot;</span> <span style="color:#FF0000">Stretch</span>=<span style="color:#0000FF">&quot;None&quot;</span> <span style="color:#0000FF">/&gt;</span></strong>
</code></pre></li>
</ol>

<p><a name="Ex2Task5"></a></p>

<h4 id="Task_5_-_Integrating_the_Web_API_Service_with_the_Windows_8_Style_UI_Application">任务 5 - 将 Web API 服务与 Windows 8 样式 UI 应用程序集成</h4>

<p>在此任务中，您需要将您的 Windows 8 样式 UI 应用程序绑定到您客户的模型，以便从 Web API 服务检索数据。您需要先配置该绑定，然后修改该应用程序以便以异步方式调用该服务并且显示客户。</p>

<ol>
<li><p>在解决方案资源管理器中右键单击 <strong>DataModel</strong> 项目文件夹，然后选择<strong>“添加”|“现有项”</strong>。</p></li>
<li><p>浏览到 <strong>WebApi</strong> 项目，打开<strong>“模型”</strong>文件夹并选择 <strong>Customer.cs</strong>。单击<strong>“添加”</strong>按钮旁的箭头并单击<strong>“添加为链接”</strong>。</p>

<p><img src="Images/add-customercs-as-an-existing-item.png?raw=true" alt="将 Customer.cs 模型类作为链接添加" title="将 Customer.cs 模型类作为链接添加" />
</p>

<p><em>将 Customer.cs 模型类作为链接添加</em></p>

<p>通过将 Customer 类作为链接添加，您的应用程序将使用来自 Web API 服务的相同的模型类。该类将充当 Web API 服务和该样式 UI 应用程序之间的数据约定。</p></li>
<li><p>在解决方案资源管理器中右键单击 <strong>DataModel</strong> 项目文件夹，然后选择<strong>“添加”|“类”</strong>。将其命名为 <em>CustomersWebApiClient.cs</em>。</p>

<p>该类包含所需的方法，可以从已在 Windows Azure 上发布的 Web API 服务中检索客户。</p>

<p><img src="Images/adding-a-new-class.png?raw=true" alt="添加新类" title="添加新类" />
</p>

<p><em>添加新类</em></p></li>
<li><p>打开 <strong>CustomersWebApiClient.cs</strong> 类并添加以下 using 指令。</p>

<p>（代码段 - <em>Building Windows 8 Apps - Ex2 - CustomersWebApiClient namespace</em>）</p>

<!-- mark:1-4 -->

<span class="codelanguage">C#</span><pre><code class="C#"><strong class="markLine"><span style="color:#0000FF">using</span> System.IO;</strong>
<strong class="markLine"><span style="color:#0000FF">using</span> System.Net.Http;</strong>
<strong class="markLine"><span style="color:#0000FF">using</span> System.Runtime.Serialization.Json;</strong>
<strong class="markLine"><span style="color:#0000FF">using</span> WebApi.Models;</strong>
</code></pre>
<blockquote>
<p><strong>注意：</strong>WebApi.Models 引用您的服务模型，并且需要使用您已作为链接添加的 customer 类。</p>
</blockquote></li>
<li><p>在 CustomersWebApiClient 类中，添加以下 <strong>GetCustomers()</strong> 方法。</p>

<p>（代码段 - <em>Building Windows 8 Apps - Ex2 - CustomersWebApiClient GetCustomers Method</em>）</p>

<!-- mark:1-18 -->

<span class="codelanguage">C#</span><pre><code class="C#"><strong class="markLine"><span style="color:#0000FF">public</span> <span style="color:#0000FF">static</span> <span style="color:#0000FF">async</span> Task&lt;IEnumerable&lt;Customer&gt;&gt; GetCustomers()</strong>
<strong class="markLine">{            </strong>
<strong class="markLine">    <span style="color:#0000FF">object</span> serviceUrl;</strong>
<strong class="markLine">    App.Current.Resources.TryGetValue(<span style="color:#8B0000">&quot;ServiceUrl&quot;</span>, <span style="color:#0000FF">out</span> serviceUrl);</strong>
<strong class="markLine"></strong>
<strong class="markLine">    <span style="color:#0000FF">using</span> (HttpClient client = <span style="color:#0000FF">new</span> HttpClient())</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">         HttpResponseMessage response = <span style="color:#0000FF">await</span> client.GetAsync(serviceUrl <span style="color:#0000FF">as</span> <span style="color:#0000FF">string</span>);</strong>
<strong class="markLine"></strong>
<strong class="markLine">         response.EnsureSuccessStatusCode();</strong>
<strong class="markLine"></strong>
<strong class="markLine">         <span style="color:#0000FF">using</span> (<span style="color:#0000FF">var</span> stream = <span style="color:#0000FF">await</span> response.Content.ReadAsStreamAsync())</strong>
<strong class="markLine">         {                    </strong>
<strong class="markLine">              DataContractJsonSerializer serializer = <span style="color:#0000FF">new</span> DataContractJsonSerializer(<span style="color:#0000FF">typeof</span>(IEnumerable&lt;Customer&gt;));</strong>
<strong class="markLine">              <span style="color:#0000FF">return</span> serializer.ReadObject(stream) <span style="color:#0000FF">as</span> IEnumerable&lt;Customer&gt;;                                       </strong>
<strong class="markLine">         }                </strong>
<strong class="markLine">    }            </strong>
<strong class="markLine">}</strong>
</code></pre>

<p>此方法执行对 Web API 服务的异步调用。在检索数据后，该方法使用 <a href="http://msdn.microsoft.com/zh-CN/library/system.runtime.serialization.json.datacontractjsonserializer(v=vs.110).aspx">DataContractJSonSerializer</a> 通过定义的 Customers 数据约定来读取客户数组。</p>

<p>该 Web API 服务 URL 是从 App.xaml 中的资源字典检索的。</p></li>
<li><p>现在，添加 <strong>CreateCustomer</strong> 方法以便将新客户发布到该服务。</p>

<p>（代码段 - <em>Building Windows 8 Apps - Ex2 - CustomersWebApiClient CreateCustomer Method</em>）</p>

<!-- mark:1-21 -->

<span class="codelanguage">C#</span><pre><code class="C#"><strong class="markLine"><span style="color:#0000FF">public</span> <span style="color:#0000FF">static</span> <span style="color:#0000FF">async</span> <span style="color:#0000FF">void</span> CreateCustomer(Customer customer)</strong>
<strong class="markLine">{</strong>
<strong class="markLine">    <span style="color:#0000FF">object</span> serviceUrl;</strong>
<strong class="markLine">    App.Current.Resources.TryGetValue(<span style="color:#8B0000">&quot;ServiceUrl&quot;</span>, <span style="color:#0000FF">out</span> serviceUrl);</strong>
<strong class="markLine"></strong>
<strong class="markLine">    <span style="color:#0000FF">using</span> (HttpClient client = <span style="color:#0000FF">new</span> HttpClient())</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">        DataContractJsonSerializer serializer = <span style="color:#0000FF">new</span> DataContractJsonSerializer(<span style="color:#0000FF">typeof</span>(Customer));</strong>
<strong class="markLine"></strong>
<strong class="markLine">        <span style="color:#0000FF">using</span> (MemoryStream stream = <span style="color:#0000FF">new</span> MemoryStream())</strong>
<strong class="markLine">        {                    </strong>
<strong class="markLine">            serializer.WriteObject(stream, customer);                    </strong>
<strong class="markLine">            stream.Seek(0, SeekOrigin.Begin);</strong>
<strong class="markLine"></strong>
<strong class="markLine">            <span style="color:#0000FF">var</span> json = <span style="color:#0000FF">new</span> StreamReader(stream).ReadToEnd();</strong>
<strong class="markLine"></strong>
<strong class="markLine">            <span style="color:#0000FF">var</span> response = <span style="color:#0000FF">await</span> client.PostAsync(serviceUrl <span style="color:#0000FF">as</span> <span style="color:#0000FF">string</span>, <span style="color:#0000FF">new</span> StringContent(json, Encoding.UTF8, <span style="color:#8B0000">&quot;application/json&quot;</span>));</strong>
<strong class="markLine">            response.EnsureSuccessStatusCode();</strong>
<strong class="markLine">        }</strong>
<strong class="markLine">    }</strong>
<strong class="markLine">}</strong>
</code></pre>

<p>此方法执行异步发布，以发布到 Web API 服务，并且发送以 JSON 格式序列化的客户数据。</p></li>
<li><p>最后，您将使用您的 Web API 服务 URL 配置 ServiceUrl 值。打开 <strong>App.xaml</strong> 并找到 <strong>ServiceURL</strong> 键。使用您的服务站点 URL 更改该键值。</p>

<span class="codelanguage">XML</span><pre><code class="XML"><span style="color:#0000FF">&lt;</span><span style="color:#C71585">x</span>:<span style="color:#800000">String</span> <span style="color:#FF0000">x</span>:<span style="color:#FF0000">Key</span>=<span style="color:#0000FF">&quot;ServiceUrl&quot;</span><span style="color:#0000FF">&gt;</span>[YOUR-SERVICE-SITE-URL]/api/customers<span style="color:#0000FF">&lt;/</span><span style="color:#C71585">x</span>:<span style="color:#800000">String</span><span style="color:#0000FF">&gt;</span>
</code></pre>
<blockquote>
<p><strong>注意：</strong>您可以在您的 Windows Azure 网站的面板中找到您的服务 URL。</p>
</blockquote></li>
</ol>

<p><a name="Ex2Task6"></a></p>

<h4 id="Task_6_-_A_Lap_Around_the_Customer_Manager_Application">任务 6 - 执行一遍 Customer Manager 应用程序</h4>

<ol>
<li><p>按<strong>“F5”</strong>运行该解决方案。</p>

<p><img src="Images/customer-manager-grid.png?raw=true" alt="Customer Manager 网格" title="Customer Manager 网格" />
</p>

<p><em>Customer Manager - 网格</em></p></li>
<li><p>单击某个客户以便打开 <strong>Customer Details</strong>（客户详细信息）页。请注意，您可以使用屏幕右侧和左侧的箭头浏览客户。</p></li>
<li><p>单击左上部的箭头可返回。</p>

<p><img src="Images/customer-details.png?raw=true" alt="客户详细信息" title="客户详细信息" />
</p>

<p><em>客户详细信息</em></p></li>
<li><p>返回到主页中，右键单击以便显示应用程序栏，然后选择 <strong>Add</strong>（添加）以便转到新建客户页。</p>

<p><img src="Images/add-button.png?raw=true" alt="“Add”按钮" title="“Add”按钮" />
</p>

<p><em>“Add”按钮</em></p></li>
<li><p>完成新客户的数据，然后单击 <strong>Create</strong>（创建）。</p>

<p><img src="Images/new-customer.png?raw=true" alt="新建客户" title="新建客户" />
</p>

<p><em>新建客户</em></p></li>
<li><p>返回到主页中，您将看到新添加的客户。</p>
<blockquote>
<p><strong>注意：</strong>如果您看不到添加的新客户，则转到详细信息页并且返回到主页。因为 CreateCustomer 方法是异步的，所以，为了避免阻止 UI，GetCustomers 方法可能会在将新客户发布到该服务前执行。</p>
</blockquote></li>
</ol>

<hr />

<p><a name="Exercise3"></a></p>

<h3 id="Exercise_3_Adding_Push_Notification_Support_to_your_Windows_8_Style_UI_Application">练习 3：向您的 Windows 8 样式 UI 应用程序添加推送通知支持</h3>

<p>Windows 推送通知服务 (WNS) 使第三方开发人员可以从自己的网站发送 Toast、磁贴和徽章更新。这提供一个可以高效和可靠地向您的用户提供更新的机制。</p>

<p>发送通知的过程分为几个步骤：</p>

<ol>
<li><p><strong>请求通道。</strong>利用 WinRT API 从 WNS 请求通道 Uri。该通道 Uri 是您用来将通知发送到应用程序实例的唯一标识符。</p></li>
<li><p><strong>向您的 Windows Azure 网站注册该通道。</strong>一旦您有了通道，就可以存储您的通道并将其与任何应用程序特定的数据（例如用户配置文件等）相关联，直到您的服务确定将通知发送到给定通道的时机已到。</p></li>
<li><p><strong>向 WNS 进行身份验证。</strong>若要向您的通道 URI 发送通知，首先要求您使用 OAuth2 向 WNS 进行身份验证，以便检索要用于推送到 WNS 的每个后续通知的令牌。</p></li>
<li><p><strong>将通知推送到通道接收方。</strong>拥有通道、通知负载和 WNS 访问令牌后，您就可以执行 HttpWebRequest 将您的通知发布到 WNS，以便传递到您的客户端。</p>

<p><img src="Images/wns-flow-diagram.png?raw=true" alt="WNS 流程图" title="WNS 流程图" />
</p>

<p><em>WNS 流程图</em></p></li>
</ol>

<p>在此练习中，您将学习如何在添加新用户时将 Toast 通知从 Web API 服务（网站）发送到注册的客户端（Windows 8 样式 UI 应用程序）。</p>

<p>Toast 通知是一种发送给用户的暂时性消息，其中包含了有时效性的相关信息并且提供对应用中相关内容的快速访问途径。无论您是处于其他应用、开始屏幕、锁定屏幕还是桌面上，Toast 通知都可以出现。Toast 应该被视作一种邀请，请求您返回到应用程序中以便进一步了解感兴趣的内容。</p>
<blockquote>
<p><strong>注意：</strong>如果您使用的是 Visual Studio 2012 Professional 或更高版本，此实验的 <strong>Source/Ex3-Notifications/Begin</strong> 和 <strong>Source/Ex3-Notifications/End</strong> 文件夹中分别提供了名为 <strong>Begin.All.sln</strong> 和 <strong>End.All.sln</strong> 的两个解决方案，以及相应的 Web Api 和 StyleUI 项目。</p>
</blockquote>
<p><a name="Ex3Task1"></a></p>

<h4 id="Task_1_-_Registering_the_Customer_Manager_Application_for_Push_Notifications">任务 1 - 注册 Customer Manager 应用程序以便发送推送通知</h4>

<p>在您可以通过 WNS 发送通知前，必须向 Windows 开发人员中心注册您的应用程序，开发人员中心支持端到端过程以便在 Windows 应用商店中提交、认证和管理应用程序以进行销售。在您向面板注册应用程序时，会向您提供凭据（即一个包安全标识符 (SID) 和一个密钥），您的网站将使用这些凭据向 WNS 验证自己的身份。</p>

<p>在此任务中，您将获取使您的应用程序能够与 WNS 和 Live Connect 通信所需的信息。</p>

<ol>
<li><p>在 Visual Studio 中，继续使用在之前的练习中获得的解决方案。如果您没有执行之前的练习，则可以使用 <strong>Visual Studio Express 2012 for Web</strong> 打开 <strong>WebApi.sln</strong>，并且使用 <strong>Visual Studio Express 2012 for Windows 8</strong> 打开 <strong>CustomerManager.sln</strong>，这两个解决方案位于此实验的 <strong>Source/Ex3-Notifications/Begin</strong> 文件夹中。</p></li>
<li><p>如果您打开的是 <strong>WebApi</strong> 起始解决方案，则请打开 <strong>Web.config</strong> 并配置 <strong>CustomerContext</strong> 连接字符串使之指向 Windows Azure SQL Database。您可以使用下面的连接字符串替换占位符。<a href="#Ex2Task3">练习 2 - 任务 3</a> 提供了操作说明。</p>

<span class="codelanguage">XML</span><pre><code class="XML"><span style="color:#0000FF">&lt;</span><span style="color:#800000">add</span> <span style="color:#FF0000">name</span>=<span style="color:#0000FF">&quot;CustomerContext&quot;</span> <span style="color:#FF0000">connectionString</span>=<span style="color:#0000FF">&quot;Server=tcp:[SERVER_URL],1433;Database=CustomersDB;User ID=[SERVER_ADMIN_LOGIN];Password=[SERVER_ADMIN_PASSWORD];Trusted_Connection=False;Encrypt=True;Connection Timeout=30;&quot;</span> <span style="color:#FF0000">providerName</span>=<span style="color:#0000FF">&quot;System.Data.SqlClient&quot;</span> <span style="color:#0000FF">/&gt;</span>
</code></pre></li>
<li><p>生成解决方案。</p></li>
<li><p>打开包管理器控制台并执行以下命令，以将实体框架还原为以前的版本。MVC 4 使用实体框架 5，而 Windows Azure Toolkit for Windows 8 是为版本 4.3.1 设计的。</p>

<span class="codelanguage">PowerShell</span><pre><code class="PowerShell">Uninstall-Package EntityFramework Install-Package EntityFramework -version 4.3.1
</code></pre></li>
<li><p>现在，您需要在 Web.config 中删除实体框架自定义配置部分。打开该文件并删除靠近文件末尾的 <code>&lt;entityFramework&gt;</code> 部分。</p>

<span class="codelanguage">XML</span><pre><code class="XML"><span style="color:#0000FF">&lt;</span><span style="color:#800000">entityFramework</span><span style="color:#0000FF">&gt;</span>
<span style="color:#0000FF">&lt;</span><span style="color:#800000">defaultConnectionFactory</span> <span style="color:#FF0000">type</span>=<span style="color:#0000FF">&quot;System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework&quot;</span><span style="color:#0000FF">&gt;</span>
  <span style="color:#0000FF">&lt;</span><span style="color:#800000">parameters</span><span style="color:#0000FF">&gt;</span>
    <span style="color:#0000FF">&lt;</span><span style="color:#800000">parameter</span> <span style="color:#FF0000">value</span>=<span style="color:#0000FF">&quot;v11.0&quot;</span> <span style="color:#0000FF">/&gt;</span>
  <span style="color:#0000FF">&lt;/</span><span style="color:#800000">parameters</span><span style="color:#0000FF">&gt;</span>
<span style="color:#0000FF">&lt;/</span><span style="color:#800000">defaultConnectionFactory</span><span style="color:#0000FF">&gt;</span>
<span style="color:#0000FF">&lt;/</span><span style="color:#800000">entityFramework</span><span style="color:#0000FF">&gt;</span>
</code></pre></li>
<li><p>在 <strong>CustomerManager</strong> 起始解决方案中，打开 <strong>Package.appxmanifest</strong>。</p>
<blockquote>
<p><strong>注意：</strong>包清单是一个 XML 文档，其中包含系统部署、显示或更新 Windows 8 样式 UI 应用所需的信息。此信息包含包标识、包依赖项、必需的功能、可视化元素和可扩展点。每个应用程序包都必须包含一个包清单。</p>
</blockquote></li>
<li><p>在 Visual Studio 菜单中单击<strong>“应用商店”</strong>并选择<strong>“保留应用程序名称”</strong>。</p>

<p><img src="./Images/reserving-app-name.png?raw=true" alt="保留应用程序名称" />
</p>

<p><em>在 Windows 应用商店中保留应用程序名称</em></p></li>
<li><p>浏览器将显示 Windows 应用商店页，您将使用该页来获取您的 WNS 凭据。在“提交应用程序”部分中，单击<strong>“应用程序名称”</strong>。</p>
<blockquote>
<p><strong>注意：</strong>您需要使用 Microsoft 帐户登录才能访问 Windows 应用商店。</p>
</blockquote>
<p><img src="./Images/giving-app-name-windows-store.png?raw=true" alt="为您的应用程序提供唯一名称" />
</p>

<p><em>为您的应用程序提供唯一名称</em></p></li>
<li><p>在“应用程序名称”字段中，插入位于您的解决方案的 <strong>Package.appxmanifest</strong> 文件内的“Package Display Name”，然后单击<strong>“保留应用程序名称”</strong>。然后单击<strong>“保存”</strong>以确认保留操作。</p>

<p><img src="./Images/app-name-windows-store.png?raw=true" alt="保留应用程序名称" />
</p>

<p><em>保留应用程序名称</em></p>

<p><img src="./Images/name-reservation-successful-win-store.png?raw=true" alt="确认保留应用程序名称" />
</p>

<p><em>确认保留应用程序名称</em></p></li>
<li><p>现在，您将需要标识您的应用程序以便获取要插入 <strong>Package.appxmanifest</strong> 文件的名称和发布者。在“提交应用程序”页中，单击<strong>“高级功能”</strong>。</p>

<p><img src="./Images/app-name-reverved-completely-windows-store.png?raw=true" alt="为 Notifications.Client 应用配置推送通知" />
</p>

<p><em>为 Notifications.Client 应用配置推送通知</em></p></li>
<li><p>在“高级功能”页中，单击<strong>“推送通知和 Live Connect 服务信息”</strong>。</p>

<p><img src="./Images/push-notif-live-connect-service-info.png?raw=true" alt="“高级功能”页" />
</p>

<p><em>“高级功能”页</em></p></li>
<li><p>进入“推送通知和 Live Connect 服务信息”部分中后，单击<strong>“标识你的应用”</strong>。</p>

<p><img src="./Images/identifying-your-app.png?raw=true" alt="“推送通知概述”页" />
</p>

<p><em>“推送通知概述”页</em></p></li>
<li><p>现在，我们需要用 Windows 应用商店中的信息设置 <strong>Package.appxmanifest</strong> 文件的标识名称和发布者。返回到 Visual Studio，右键单击 <strong>Package.appxmanifest</strong> 并选择<strong>“查看代码”</strong>。使用在 Windows 应用商店中获取的项替换 Identity 元素的 Name 和 Publisher 属性。单击<strong>“正在对你的服务进行身份验证”</strong>。</p>

<p><img src="./Images/app-identification.png?raw=true" alt="设置标识名称和发布者" />
</p>

<p><em>设置标识名称和发布者</em></p></li>
<li><p>最后，我们获取了<strong>“程序包安全标识符(SID)”</strong>和<strong>“客户端密钥”</strong>，它们是我们更新通知应用程序服务器的 Web 配置所需的 WNS 凭据。</p>

<p><img src="./Images/sid-client-secret.png?raw=true" alt="程序包安全标识符 (SID) 和客户端密钥" />
</p>

<p><em>程序包安全标识符 (SID) 和客户端密钥</em></p>
<blockquote>
<p><strong>注意：</strong>若要将通知发送到此应用程序，您的网站必须准确使用这些凭据。您不能使用其他网站凭据向此应用程序发送通知，也不能使用这些凭据向其他应用发送通知。</p>
</blockquote></li>
</ol>

<p><a name="Ex3Task2"></a></p>

<h4 id="Task_2_-_Enabling_Push_Notifications">任务 2 - 启用推送通知</h4>

<p>在此任务中，您将配置您的应用程序以便能够引发 Toast 通知。然后，您将安装包含资产的 NuGet 包以便简化发送和接收推送通知所需的代码。</p>

<ol>
<li><p>返回到 Visual Studio，打开应用程序清单并选择 <strong>Application.UI</strong> 选项卡。</p></li>
<li><p>找到<strong>“通知”</strong>部分，并将<strong>“支持 Toast 通知”</strong>设为<strong>“是”</strong>。</p>

<p><img src="Images/enabling-toast-notifications.png?raw=true" alt="启用 Toast 通知" title="启用 Toast 通知" />
</p>

<p><em>启用 Toast 通知</em></p></li>
<li><p>切换到<strong>“功能”</strong>选项卡并标记以下功能：</p>

<ul>
<li>Internet (客户端)</li>
<li>Internet (客户端和服务器)</li>
<li>私有网络(客户端和服务器)</li>
</ul>

<p><img src="Images/enabling-network-capabilities.png?raw=true" alt="启用网络功能" title="启用网络功能" />
</p>

<p><em>启用网络功能</em></p>
<blockquote>
<p><strong>注意：</strong>在以下操作步骤中，您将向 Windows 应用商店关联您的应用程序。如果您已从 Windows 推送通知和 Live Connect 门户获得 WNS 凭据，则可以跳过后面 5 个步骤。</p>
</blockquote></li>
<li><p>在 Visual Studio 菜单中单击<strong>“应用商店”</strong>，然后选择<strong>“将应用程序与应用商店关联”</strong>。</p>

<p><img src="./Images/associating-app-with-store.png?raw=true" alt="将应用程序与应用商店关联" />
</p>

<p><em>将应用程序与应用商店关联</em></p></li>
<li><p>在“将应用程序与 Windows 应用商店关联”向导中，单击<strong>“登录”</strong>。</p>

<p><img src="./Images/associate-app-with-store.png?raw=true" alt="“将应用程序与应用商店关联”向导" />
</p>

<p><em>“将应用程序与应用商店关联”向导</em></p></li>
<li><p>输入您的凭据并单击<strong>“登录”</strong>。</p>

<p><img src="./Images/sign-in-for-association.png?raw=true" alt="插入您的凭据以便在 Windows 应用商店中关联您的应用程序" />
</p>

<p><em>插入您的凭据以便在 Windows 应用商店中关联您的应用程序</em></p></li>
<li><p>在“选择应用程序名称”步骤中，选择 <strong>Notifications.Client</strong> 并单击<strong>“下一步”</strong>。</p>

<p><img src="./Images/selecting-app-name.png?raw=true" alt="选择应用程序名称" />
</p>

<p><em>选择应用程序名称</em></p></li>
<li><p>查看将在清单文件中添加的值的摘要。单击<strong>“关联”</strong>。</p>

<p><img src="./Images/association-summary.png?raw=true" alt="将应用程序与 Windows 应用商店关联摘要" />
</p>

<p><em>将应用程序与 Windows 应用商店关联摘要</em></p></li>
<li><p>从<strong>“工具”|“库包管理器”</strong>菜单中打开<strong>“包管理器控制台”</strong>。</p></li>
<li><p>在<strong>“默认项目”</strong>中，确保选择了 <strong>CustomerManager.StyleUI</strong>。</p></li>
<li><p>执行以下命令以便在 Windows 8 样式 UI 应用程序中安装 <strong>Windows8.Notifications</strong> 包。</p>

<span class="codelanguage">PowerShell</span><pre><code class="PowerShell">Install-Package Windows8.Notifications
</code></pre>
<blockquote>
<p><strong>注意：</strong>Windows Push Notification Client Recipe (<strong>Windows8.Notifications</strong>) 提供一个客户端对象以便允许从某个设备打开通知通道，并且在特定的端点向通知服务注册该对象。</p>
</blockquote></li>
<li><p>转到 <strong>WebApi</strong> 解决方案并从<strong>“工具”|“库包管理器”</strong>菜单打开<strong>“包管理器控制台”</strong>。</p></li>
<li><p>在<strong>“默认项目”</strong>中，确保选择了 <strong>WebApi</strong>。</p></li>
<li><p>执行以下命令以便安装服务器项目所需的包。</p>

<span class="codelanguage">PowerShell</span><pre><code class="PowerShell">Install-Package WnsRecipe Install-Package WindowsAzure.Notifications.Sql
</code></pre>
<blockquote>
<p><strong>注意：</strong>WindowsAzure.Notifications.Sql 包依赖于 <strong>WindowsAzure.Notifications</strong>，它允许客户端设备注册（和撤消注册）接收推送通知消息。<strong>WindowsAzure.Notifications.Sql</strong> 包在 SQL Database 中为推送通知注册网站提供存储。</p>

<p>Windows Push Notification Service Recipe (<strong>WnsRecipe</strong>) 是一种推送通知服务器端帮助程序库，它提供简便的方法以便发送 Windows 推送通知服务 (WNS) 所支持的所有三种类型的推送通知消息：磁贴、Toast 和徽章。</p>
</blockquote></li>
</ol>

<p>这些 NuGet 包在 <a href="http://watwindows8.codeplex.com/" title="Windows Azure Toolkit for Windows 8">Windows Azure Toolkit for Windows 8</a> 中也提供。在此工具包中，您还可以找到与推送通知有关的其他示例和文档。尤其是，您可以找到以下有用的资源：</p>

<ul>
<li><a href="http://watwindows8.codeplex.com/wikipage?title=Project%20Templates%2c%20Samples%20and%20Libraries%20Source%20Code&amp;referringTitle=Documentation">Windows Azure Toolkit for Windows 8 内容</a></li>
<li><a href="http://watwindows8.codeplex.com/wikipage?title=Raw%20Notifications%20Sample">原始通知示例 - C# 和 JavaScript</a></li>
<li><a href="http://watwindows8.codeplex.com/wikipage?title=Notifications%20Sample%20%E2%80%93%20C%23%20and%20JavaScript">通知示例 - C# 和 JavaScript</a></li>
<li><a href="http://watwindows8.codeplex.com/wikipage?title=Push%20Notification%20Worker%20Sample&amp;referringTitle=Documentation">推送通知工作线程示例</a></li>
</ul>

<p><a name="Ex3Task3"></a></p>

<h4 id="Task_3_-_Sending_Push_Notifications">任务 3 - 发送推送通知</h4>

<p>若要发送通知，必须通过 WNS 对网站进行身份验证。此过程中的第一步在您使用 Windows 应用商店面板注册您的应用程序时发生。在注册过程中，您的应用程序将获得一个包安全标识符 (SID) 和一个加密密钥。您的网站使用这些信息向 WNS 进行身份验证。</p>

<p>该 WNS 身份验证架构使用来自 <a href="http://go.microsoft.com/fwlink/?linkid=226787">OAuth 2.0</a> 协议的客户端凭据配置文件实现。该网站通过提供其凭据（包 SID 和密钥）向 WNS 进行身份验证。它将因此接收一个访问令牌。该访问令牌允许网站发送通知。每个发送到 WNS 的通知请求都需要该令牌。</p>

<ol>
<li><p>从 WebApi 项目打开 <strong>CustomersController.cs</strong> 文件，并添加以下 using 指令。</p>

<p>（代码段 - <em>Building Windows 8 Apps - Ex3 - Send Notifications Namespaces</em>）</p>

<!-- mark:1-4 -->

<span class="codelanguage">C#</span><pre><code class="C#"><strong class="markLine"><span style="color:#0000FF">using</span> System.Configuration;</strong>
<strong class="markLine"><span style="color:#0000FF">using</span> NotificationsExtensions;</strong>
<strong class="markLine"><span style="color:#0000FF">using</span> NotificationsExtensions.ToastContent;</strong>
<strong class="markLine"><span style="color:#0000FF">using</span> WebApi.CloudServices.Notifications;</strong>
</code></pre></li>
<li><p>添加以下私有方法以发送与新客户有关的 Toast 通知。</p>

<p>（代码段 - <em>Building Windows 8 Apps - Ex3 - SendNotification</em>）</p>

<!-- mark:1-17 -->

<span class="codelanguage">C#</span><pre><code class="C#"><strong class="markLine"><span style="color:#0000FF">private</span> <span style="color:#0000FF">void</span> SendNotification(Customer customer)</strong>
<strong class="markLine">{</strong>
<strong class="markLine">    <span style="color:#0000FF">var</span> clientId = ConfigurationManager.AppSettings[<span style="color:#8B0000">&quot;ClientId&quot;</span>];</strong>
<strong class="markLine">    <span style="color:#0000FF">var</span> clientSecret = ConfigurationManager.AppSettings[<span style="color:#8B0000">&quot;ClientSecret&quot;</span>];</strong>
<strong class="markLine">    <span style="color:#0000FF">var</span> tokenProvider = <span style="color:#0000FF">new</span> WnsAccessTokenProvider(clientId, clientSecret);</strong>
<strong class="markLine">    <span style="color:#0000FF">var</span> notification = ToastContentFactory.CreateToastText02();</strong>
<strong class="markLine"></strong>
<strong class="markLine">    notification.TextHeading.Text = <span style="color:#8B0000">&quot;New customer added!&quot;</span>;</strong>
<strong class="markLine">    notification.TextBodyWrap.Text = customer.Name;</strong>
<strong class="markLine"></strong>
<strong class="markLine">    <span style="color:#0000FF">var</span> provider = NotificationServiceContext.Current.Configuration.StorageProvider;</strong>
<strong class="markLine"></strong>
<strong class="markLine">    <span style="color:#0000FF">foreach</span> (<span style="color:#0000FF">var</span> endpoint <span style="color:#0000FF">in</span> provider.All())</strong>
<strong class="markLine">    {</strong>
<strong class="markLine">        <span style="color:#0000FF">var</span> result = notification.Send(<span style="color:#0000FF">new</span> Uri(endpoint.ChannelUri), tokenProvider);</strong>
<strong class="markLine">    }</strong>
<strong class="markLine">}</strong>
</code></pre>
<blockquote>
<p><strong>注意：</strong>通道是在单个设备上表示单个应用程序或辅助磁贴的单个用户的唯一地址。使用通道 URI，网站可以在具有针对该用户的更新时发送通知。使用 <strong>NotificationServiceContext</strong>，我们可以获取向该网站注册的客户端端点的完整列表。</p>
</blockquote></li>
<li><p>找到 <strong>PostCustomer</strong> 函数并添加对 <strong>SendNotification</strong> 方法的调用。</p>

<!-- mark:9 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#008000">// POST api/Customers</span>
<span style="color:#0000FF">public</span> HttpResponseMessage PostCustomer(Customer customer) {
    <span style="color:#0000FF">if</span> (ModelState.IsValid) { db.Customers.Add(customer); db.SaveChanges();

<strong class="markLine">        <span style="color:#0000FF">this</span>.SendNotification(customer);</strong>

        HttpResponseMessage response = Request.CreateResponse(HttpStatusCode.Created, customer); response.Headers.Location = <span style="color:#0000FF">new</span> Uri(Url.Link(<span style="color:#8B0000">&quot;DefaultApi&quot;</span>, <span style="color:#0000FF">new</span> { id = customer.CustomerId }));
        <span style="color:#0000FF">return</span> response; }
    <span style="color:#0000FF">else</span>
    {
        <span style="color:#0000FF">return</span> Request.CreateResponse(HttpStatusCode.BadRequest); } }
</code></pre></li>
<li><p>打开 <strong>Web.config</strong> 文件并在 <code>appSettings</code> 部分中添加以下设置。使用您从 Windows 应用商店，或从 Windows 推送通知和 Live Connect 门户所获得的值替换占位符。</p>

<!-- mark:2-3 -->

<span class="codelanguage">XML</span><pre><code class="XML">  ...
<strong class="markLine">  <span style="color:#0000FF">&lt;</span><span style="color:#800000">add</span> <span style="color:#FF0000">key</span>=<span style="color:#0000FF">&quot;ClientId&quot;</span> <span style="color:#FF0000">value</span>=<span style="color:#0000FF">&quot;[Package Security Identifier (SID)]&quot;</span><span style="color:#0000FF">/&gt;</span></strong>
<strong class="markLine">  <span style="color:#0000FF">&lt;</span><span style="color:#800000">add</span> <span style="color:#FF0000">key</span>=<span style="color:#0000FF">&quot;ClientSecret&quot;</span> <span style="color:#FF0000">value</span>=<span style="color:#0000FF">&quot;[Client secret]&quot;</span><span style="color:#0000FF">/&gt;</span></strong>
<span style="color:#0000FF">&lt;/</span><span style="color:#800000">appSettings</span><span style="color:#0000FF">&gt;</span>
</code></pre>
<blockquote>
<p><strong>注意：</strong>出于演示目的，我们只是将这些值存储于 Web.config 文件中，但包安全标识符 SID 和客户端密钥应该安全地存储。如果此信息泄漏或失窃，可能会使攻击者能够在未经您允许或认可的情况下将通知发送给您的用户。</p>
</blockquote></li>
<li><p>打开 <strong>App_Start\NotificationServiceSql.cs</strong> 并用以下代码替换 <strong>PostStart</strong> 方法中的代码。</p>

<p>（代码段 - <em>Building Windows 8 Apps - Ex3 - Set Connection String</em>）</p>

<!-- mark:7 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">static</span> <span style="color:#0000FF">void</span> PostStart() {
    <span style="color:#008000">// Configure the SQL database as the storage for the Push Notifications Registration Service.</span>
    NotificationServiceContext.Current.Configure( c =&gt; {
<strong class="markLine">            <span style="color:#0000FF">var</span> connectionString = System.Configuration.ConfigurationManager.ConnectionStrings[<span style="color:#8B0000">&quot;DefaultConnection&quot;</span>].ConnectionString;</strong>
            c.StorageProvider = <span style="color:#0000FF">new</span> SqlEndpointRepository(connectionString); }); }
</code></pre></li>
<li><p>打开 <strong>Web.config</strong> 并将 <strong>DefaultConnection</strong> 连接字符串配置为指向 Windows Azure SQL Database。您可以使用下面的连接字符串替换占位符。<a href="#Ex2Task3">练习 2 - 任务 3</a> 提供了操作说明。</p>

<span class="codelanguage">XML</span><pre><code class="XML"><span style="color:#0000FF">&lt;</span><span style="color:#800000">add</span> <span style="color:#FF0000">name</span>=<span style="color:#0000FF">&quot;DefaultConnection&quot;</span> <span style="color:#FF0000">connectionString</span>=<span style="color:#0000FF">&quot;Server=tcp:[SERVER_URL],1433;Database=CustomersDB.Notifications;User ID=[SERVER_ADMIN_LOGIN];Password=[SERVER_ADMIN_PASSWORD];Trusted_Connection=False;Encrypt=True;Connection Timeout=30;&quot;</span> <span style="color:#FF0000">providerName</span>=<span style="color:#0000FF">&quot;System.Data.SqlClient&quot;</span> <span style="color:#0000FF">/&gt;</span>

</code></pre>
<blockquote>
<p><strong>注意：</strong>出于简化的目的，该服务使用两个不同的数据库分别存储应用程序数据（客户）和通知。但在生产环境中，您可能要通过合并两个不同的实体框架上下文来使用一个数据库。</p>
</blockquote></li>
<li><p>打开 <strong>App_Start\NotificationService.cs</strong> 并在 <strong>PreStart</strong> 方法中，按如下所示对配置存储提供程序的行加注释。在您使用 WindowsAzure.Notifications NuGet 的 SQL 版本（该版本在 SQL 数据库中存储通知数据）时，应该删除配置 Windows Azure 存储的这一行。</p>

<!-- mark:12 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> <span style="color:#0000FF">static</span> <span style="color:#0000FF">void</span> PreStart() { NotificationServiceContext.Current.Configure( c =&gt; { ...

              <span style="color:#008000">// TODO: Specify a rule for authorizing users when registring (register, unregister)</span>
              c.AuthorizeRegistrationRequest = AuthorizeUserRequest;

              <span style="color:#008000">// TODO: Replace with your own Windows Azure Storage account name and key, or read it from a configuration file</span>
<strong class="markLine">              <span style="color:#008000">//c.StorageProvider = new WindowsAzureEndpointRepository(CloudStorageAccount.DevelopmentStorageAccount);</span></strong>

              ... }); }
</code></pre></li>
<li><p>在 Windows Azure 中发布该客户 Web API 服务。为此，请按照<a href="#Ex2Task3">练习 2，任务 3</a> 中的步骤执行。</p></li>
</ol>

<p><a name="Ex3Task4"></a></p>

<h4 id="Task_4_-_Registering_the_Notifications_Client">任务 4 - 注册通知客户端</h4>

<p>能够接收推送通知的应用程序在运行时，须先请求一个通知通道。该应用程序在成功创建某一通道 URI 之后，会将该 URI 及应与其关联的所有应用程序特定元数据发送到应用程序网站。</p>

<p>在此任务中，您将使用 <strong>Windows8.Notifications</strong> 包提供的类库请求该通道，并且在应用程序启动时向该服务注册您的应用程序，在应用程序挂起时撤消注册。</p>

<ol>
<li><p>从 <strong>CustomerManager.StyleUI</strong> 项目打开 <strong>App.xaml.cs</strong>，并添加以下 using 指令。</p>

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">using</span> Windows8.Notifications;
</code></pre></li>
<li><p>向 App 类添加以下成员。根据已部署 Web API 项目的位置更新 <strong>ServiceEnpointsUrl</strong> 值。</p>

<p>（代码段 - <em>Building Windows 8 Apps - Ex3 - App Members</em>）</p>

<!-- mark:1-5 -->

<span class="codelanguage">C#</span><pre><code class="C#"><strong class="markLine"><span style="color:#0000FF">private</span> <span style="color:#0000FF">const</span> <span style="color:#0000FF">string</span> ServiceEnpointsUrl = <span style="color:#8B0000">&quot;[YOUR_WEB_API_URL]/endpoints&quot;</span>;</strong>
<strong class="markLine"><span style="color:#0000FF">private</span> <span style="color:#0000FF">const</span> <span style="color:#0000FF">string</span> ApplicationId = <span style="color:#8B0000">&quot;CustomerManager&quot;</span>;</strong>
<strong class="markLine"><span style="color:#0000FF">private</span> <span style="color:#0000FF">const</span> <span style="color:#0000FF">string</span> DeviceId = <span style="color:#8B0000">&quot;deviceId&quot;</span>;</strong>
<strong class="markLine"></strong>
<strong class="markLine"><span style="color:#0000FF">private</span> NotificationClient notificationClient;</strong>
</code></pre></li>
<li><p>在构造函数中初始化 <strong>notificationClient</strong> 成员。</p>

<p>（代码段 - <em>Building Windows 8 Apps - Ex3 - NotificationClient Initialization</em>）</p>

<!-- mark:3 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">public</span> App() {
<strong class="markLine">    <span style="color:#0000FF">this</span>.notificationClient = <span style="color:#0000FF">new</span> NotificationClient(ApplicationId, DeviceId, ServiceEnpointsUrl);</strong>
    <span style="color:#0000FF">this</span>.InitializeComponent();
    <span style="color:#0000FF">this</span>.Suspending += OnSuspending; }
</code></pre></li>
<li><p>从 <strong>OnLaunched</strong> 事件中的 <strong>notificationClient</strong> 成员调用 <strong>Register</strong> 函数。</p>

<p>（代码段 - <em>Building Windows 8 Apps - Ex3 - Register Notification Client</em>）</p>

<!-- mark:5 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">protected</span> <span style="color:#0000FF">override</span> <span style="color:#0000FF">async</span> <span style="color:#0000FF">void</span> OnLaunched(LaunchActivatedEventArgs args) { ...

<strong class="markLine">    <span style="color:#0000FF">await</span> <span style="color:#0000FF">this</span>.notificationClient.Register();</strong>
}
</code></pre></li>
<li><p>从 <strong>OnSuspending</strong> 事件中的 <strong>notificationClient</strong> 成员调用 <strong>Unregister</strong> 函数。</p>

<p>（代码段 - <em>Building Windows 8 Apps - Ex3 - Unregister Notification Client</em>）</p>

<!-- mark:7 -->

<span class="codelanguage">C#</span><pre><code class="C#"><span style="color:#0000FF">private</span> <span style="color:#0000FF">async</span> <span style="color:#0000FF">void</span> OnSuspending(<span style="color:#0000FF">object</span> sender, SuspendingEventArgs e) {
    <span style="color:#0000FF">var</span> deferral = e.SuspendingOperation.GetDeferral();
    <span style="color:#0000FF">await</span> SuspensionManager.SaveAsync(); deferral.Complete();

<strong class="markLine">    <span style="color:#0000FF">await</span> <span style="color:#0000FF">this</span>.notificationClient.Unregister();</strong>
}
</code></pre></li>
<li><p>打开 <strong>App.xaml</strong> 并找到 <strong>ServiceURL</strong> 键。请确保 <strong>ServiceUrl</strong> 键值具有已部署的 Web API 服务 URL 的 URL。</p>

<span class="codelanguage">XML</span><pre><code class="XML"><span style="color:#0000FF">&lt;</span><span style="color:#C71585">x</span>:<span style="color:#800000">String</span> <span style="color:#FF0000">x</span>:<span style="color:#FF0000">Key</span>=<span style="color:#0000FF">&quot;ServiceUrl&quot;</span><span style="color:#0000FF">&gt;</span>[YOUR-SERVICE-SITE-URL]/api/customers<span style="color:#0000FF">&lt;/</span><span style="color:#C71585">x</span>:<span style="color:#800000">String</span><span style="color:#0000FF">&gt;</span>
</code></pre></li>
<li><p>运行 Windows 8 样式 UI 应用程序。</p></li>
<li><p>创建一个新客户并查看 Toast 通知。</p>

<p><img src="Images/toast-notification.png?raw=true" alt="Toast 通知" title="Toast 通知" />
</p>

<p><em>Toast 通知</em></p></li>
</ol>

<hr />

<p><a name="Summary"></a></p>

<h2 id="Summary">小结</h2>

<p>通过此动手实验，您学习了如何使用 Visual Studio 2012 完成以下任务：</p>

<ul>
<li>创建一个 ASP.NET MVC 4 Web API 服务</li>
<li>将该服务发布到 Windows Azure 网站</li>
<li>创建一个使用该 Web API 服务的 Windows 8 样式 UI 应用程序</li>
<li>通过使用 Windows Azure Toolkit for Windows 8，将推送通知添加到该 Windows 8 样式 UI 应用程序</li>
</ul>

<hr /> </span>
		</div>
	<br/>
	<p><a href="#top">返回页首</a></p>


				</div>
			</section>
			<footer>
				<div class="footer-sitemap" style="border-top:0"></div>
				<div class="footer-bottom">
					<ul>
						<li class="footer-copyright"><a href="http://www.microsoft.com"><img alt="microsoft" src="images/microsoft.png" /></a></li>					
												<li><a href="https://github.com/WindowsAzure-TrainingKit/HOL-BuildingWindows8AppsWithWindowsAzure/issues" target="_new">记录问题</a></li>
												<li><a href="mailto:azcfeed@microsoft.com?subject=Windows Azure Training Kit">联系我们</a></li>
						<li><a href="EULA.htm">使用条款</a></li>
						<li><a href=".\">浏览内容</a></li>
						<li>&copy; 2012 Microsoft</li>
					</ul>
				</div>
			</footer>
			</div>
        </div>
    </div>
</body>
</html>

