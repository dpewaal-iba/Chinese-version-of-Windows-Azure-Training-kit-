<!DOCTYPE html>

<html class="no-js" lang="en" class="js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths">
<head id="ContentPlaceHolderDefault_Head1">
    <meta http-equiv="X-UA-Compatible" content="IE=9,chrome=1" />
    <meta charset=UTF-8" />
    <title>Windows Azure 培训包 - 在 Windows Azure 中部署云服务</title>
    <link rel="Stylesheet" type="text/css" media="all" href="styles/master.css" />
</head>
<body id="top" class="page-">
    <div id="page">
        <div id="wrapper" class="landingPage getStartedPage">            
            <div class="header">								
				<img alt="Windows Azure" src="images/azure-logo.png" /> <span class="mainHomepageSubTitle">培训包 - 2012 年 12 月更新</span>								
			</div>			
			<div class="nav-menu-header">
				<nav>
					<ul>
						<li class="MenuLink-Selected">
							<a href="#">内容</a>
						</li>
												<li class="MenuLink">
							<a href="Source">设置</a>
						</li>
											</ul>
				
										
						<span id="github-btn" class="github-btn"> <a id="gh-btn" title="在 GitHub 中复制此存储库的分支" href="https://github.com/WindowsAzure-TrainingKit/HOL-DeployingCloudServices" target="_blank" class="gh-btn"> <span class="gh-ico"></span> <span id="gh-text" class="gh-text">分支</span> </a> </span> <span id="github-btn" class="github-btn github-watchers"> <a id="gh-btn" title="在 GitHub 中关注此存储库" href="https://github.com/WindowsAzure-TrainingKit/HOL-DeployingCloudServices" target="_blank" class="gh-btn"> <span class="gh-ico"></span> <span id="gh-text" class="gh-text">关注</span> </a> </span>
						
									
				</nav>
			</div>	        
		</span>
			<div id="content" class="textpage">
            <section id="content-container">
				<div id="content" class="textpage">
			    <a name="top"></a>
				
				

		<div class="content">
			<?xml version="1.0" encoding="iso-8859-1"?><span><p><a name="HOLTop"></a></p>

<h1 id="Deploying_Cloud_Services_in_Windows_Azure">在 Windows Azure 中部署云服务</h1>

<hr />

<p><a name="Overview"></a></p>

<h2 id="Overview">概述</h2>

<p>在此动手实验中，您将学习如何在 Windows Azure 中部署您的第一个应用程序。此实验使用 myTODO（一款简单的列表创建和管理应用程序，采用 ASP.NET MVC 构建）演练操作过程。此实验演示在 Windows Azure 管理门户中设置必要组件、上载服务包和配置服务所需的步骤。您将学到：如何在过渡环境中测试应用程序，如何在应用程序能够正常运行后将其提升到生产环境。</p>

<p><img src="./Images/mytodo.png?raw=true" alt="在 Windows Azure 中运行的 myTODO 应用程序" title="在 Windows Azure 中运行的 myTODO 应用程序" />
</p>

<p><em>在 Windows Azure 中运行的 myTODO 应用程序</em></p>

<p>在此实验课程中，您还将考查如何借助服务管理 API 以编程方式部署、升级和配置 Windows Azure 应用程序。您将借助封装了管理 API 的 Windows Azure 服务管理工具执行实施这些操作的 Windows PowerShell 脚本。为全面考查部署选择，您还将借助 Windows Azure Tools 从 Visual Studio 直接部署应用程序。</p>

<p>在实验过程中，您还将学习如何为 Windows Azure 服务提供 SSL 连接。</p>
<blockquote>
<p><strong>注意：</strong>在最新版本的 <a href="http://bit.ly/WindowsAzureTK">Windows Azure 培训包</a>或 <a href="https://github.com/WindowsAzure-TrainingKit/HOL-DeployingCloudServices-VS2012">GitHub</a> 中可以找到此动手实验的 Visual Studio 2012 版本。</p>
</blockquote>
<p><a name="Objectives"></a></p>

<h3 id="Objectives">目标</h3>

<p>在此动手实验中，您将学习如何执行以下操作：</p>

<ul>
<li>使用 Windows Azure 管理门户创建存储帐户和云服务</li>
<li>使用 Windows Azure 管理门户用户界面部署服务组件包</li>
<li>更改已部署应用程序的配置设置</li>
<li>在部署至最终生产环境前，在单独的过渡环境中对部署进行测试</li>
<li>借助 Windows PowerShell 以编程方式部署、升级和配置 Windows Azure 服务</li>
<li>借助 Windows Azure Tools 从 Visual Studio 进行发布</li>
<li>使用 SSL 保护 Windows Azure 应用程序</li>
</ul>

<p><a name="Prerequisites"></a></p>

<h3 id="Prerequisites">先决条件</h3>

<p>下面是完成此动手实验需要满足的先决条件：</p>

<ul>
<li><a href="http://msdn.microsoft.com/vstudio/products/">Microsoft Visual Studio 2010</a></li>
<li><a href="http://www.asp.net/mvc/mvc4">ASP.NET MVC 4</a></li>
<li><a href="http://www.microsoft.com/windowsazure/sdk/">Windows Azure Tools for Microsoft Visual Studio 1.8</a></li>
<li>IIS 7（带有 ASP.NET、WCF HTTP 激活）</li>
<li><a href="http://msdn.microsoft.com/zh-CN/library/windowsazure/jj156055">Windows Azure PowerShell Cmdlet</a></li>
<li>Windows Azure 订阅 - <a href="http://aka.ms/WATK-FreeTrial">注册以免费试用</a></li>
</ul>
<blockquote>
<p><strong>注意：</strong>此动手实验针对 Windows 7 而设计。</p>
</blockquote>
<p><a name="Setup"></a></p>

<h3 id="Setup">设置</h3>

<p>为了执行此动手实验中的各项练习，需要对环境进行设置。</p>

<ol>
<li>打开 Windows 资源管理器窗口，浏览到此实验的 <strong>Source</strong> 文件夹。</li>
<li>使用管理员权限执行 <strong>Setup.cmd</strong> 文件以启动设置过程，该过程将配置您的环境。</li>
<li>如果显示“用户帐户控制”对话框，请确认操作以继续。</li>
</ol>
<blockquote>
<p><strong>注意：</strong>您首次启动 Visual Studio 时，必须选择一个预定义的设置集合。每个预定义的集合在设计上都对应于特定的开发风格，能够确定窗口布局、编辑器行为、IntelliSense 代码段和对话框选项。此实验中的过程介绍了在使用<strong>“常规开发设置”</strong>集合时，在 Visual Studio 中完成指定任务所需的操作。如果您为开发环境选择其他设置集合，需要考虑可能的过程差异。</p>
</blockquote>
<hr />

<p><a name="Exercises"></a></p>

<h2 id="Exercises">练习</h2>

<p>此动手实验包括以下练习：</p>

<ol>
<li><p><a href="#Exercise1">使用 Windows Azure 管理门户部署应用程序</a></p></li>
<li><p><a href="#Exercise2">使用 PowerShell 管理 Windows Azure 应用程序</a></p></li>
<li><p><a href="#Exercise3">使用 Visual Studio 发布应用程序</a></p></li>
<li><p><a href="#Exercise4">借助 SSL 保护 Windows Azure</a></p></li>
</ol>

<p>完成此实验的估计时间：<strong>90 分钟</strong>。</p>
<blockquote>
<p><strong>注意：</strong>每个练习都附带一个起始解决方案，它位于练习的 Begin 文件夹中，允许您独立执行每个练习。请注意，在练习期间添加的代码段不包含在这些起始解决方案中，在您完成练习前，这些代码段不一定起作用。在练习的源代码内，您还会看到一个 End 文件夹，其中包含在完成相应练习中的步骤之后所生成的 Visual Studio 解决方案代码。如果在进行此动手实验时需要更多帮助，可以使用这些解决方案作为指南。</p>
</blockquote>
<hr />

<p><a name="Exercise1"></a></p>

<h3 id="Exercise_1_Deploying_an_application_using_the_Windows_Azure_Management_Portal">练习 1：使用 Windows Azure 管理门户部署应用程序</h3>

<p>在本练习中，您将使用 Windows Azure 管理门户将 myTODO 应用程序部署至 Windows Azure。为此，需要在管理门户中设置必要的服务组件，将应用程序包上载到过渡环境中并进行配置。然后，在该测试环境中执行应用程序以验证其操作。当应用程序的运行达到预期后，将其提升到生产环境。</p>

<p><a name="Ex1Task1"></a></p>

<h4 id="Task_1_-_Creating_a_Storage_Account_and_a_Cloud_Service">任务 1 - 创建存储帐户和云服务</h4>

<p>在本练习中部署的应用程序需要云服务和存储帐户。在本任务中，您将创建一个新存储帐户以允许应用程序保留其数据。另外，您还将定义一个云服务以承载 Web 应用程序。</p>

<ol>
<li><p>使用 Web 浏览器导航到 <a href="http://manage.windowsazure.com"><a href="http://manage.windowsazure.com/">http://manage.windowsazure.com/</a></a>，然后使用与您的 Windows Azure 帐户关联的 Microsoft 帐户进行登录。</p>

<p><img src="./Images/signing-in-to-the-windows-azure-platform-mana.png?raw=true" alt="登录 Windows Azure 管理门户" />
</p>

<p><em>登录 Windows Azure 管理门户</em></p></li>
<li><p>首先，创建一个将在其中部署服务的<strong>地缘组</strong>。在 Windows Azure 菜单中，单击<strong>“网络”</strong>。</p>

<p><img src="./Images/networks.png?raw=true" alt="网络" title="网络" />
</p>

<p><em>选择“网络”</em></p></li>
<li><p>在<strong>“网络”</strong>页面中，单击<strong>“地缘组”</strong>。</p>

<p><img src="./Images/affinity-groups.png?raw=true" alt="“网络”页面" title="“网络”页面" />
</p>

<p><em>“网络”页面</em></p></li>
<li><p>单击<strong>“创建”</strong>，创建一个新的<strong>地缘组</strong>。</p>

<p><img src="./Images/create-affinity-group.png?raw=true" alt="创建地缘组" title="创建地缘组" />
</p>

<p><em>创建地缘组</em></p></li>
<li><p>在<strong>“创建地缘组”</strong>对话框中，为新组输入<strong>名称</strong>（如 <em>MyAffinityGroup</em>）和<strong>说明</strong>以及<strong>区域</strong>。然后单击<strong>勾号</strong>继续。</p>

<p><img src="./Images/affinity-group-details.png?raw=true" alt="地缘组详细信息" title="地缘组详细信息" />
</p>

<p><em>地缘组详细信息</em></p>
<blockquote>
<p><strong>注意：</strong>创建新地缘组是为了将云服务和存储帐户部署在同一个位置，以确保应用程序与其所需数据之间的高带宽和低延迟。</p>
</blockquote></li>
<li><p>接下来，创建应用程序用来存储数据的<strong>存储帐户</strong>。在 Windows Azure 管理门户中，单击<strong>“新建”</strong>|<strong>“数据服务”</strong>|<strong>“存储”</strong>|<strong>“快速创建”</strong>。</p></li>
<li><p>设置唯一 <strong>URL</strong>（如 <em>mytodostorage</em>），选择您以前创建的<em>地缘组</em>，然后单击<strong>勾号</strong>继续。</p>

<p><img src="./Images/creating-a-new-storage-account.png?raw=true" alt="创建新存储帐户" />
</p>

<p><em>创建新存储帐户</em></p>
<blockquote>
<p><strong>注意：</strong>用于存储帐户的 URL 对应一个 DNS 名称，遵守标准的 DNS 命名规则。此外，该名称公开可见，因而必须唯一。门户会检验名称是否遵循命名规则和当前是否可用，以确保名称有效。如果输入的名称不合规则，系统将显示验证错误。</p>

<p><img src="./Images/url-validation.png?raw=true" alt="URL 验证" />
</p>
</blockquote></li>
<li><p>请等待存储帐户创建完成。单击存储帐户，然后单击该页底部的<strong>“管理密钥”</strong>以显示该存储帐户的访问密钥。</p>

<p><img src="./Images/manage-storage-account-keys.png?raw=true" alt="管理存储帐户密钥" title="管理存储帐户密钥" />
</p>

<p><em>管理存储帐户密钥</em></p></li>
<li><p>复制<strong>“存储帐户名称”</strong>和<strong>“主访问密钥”</strong>的值。您随后将使用这些值来配置应用程序。</p>

<p><img src="./Images/retrieving-the-storage-access-keys.png?raw=true" alt="检索存储访问密钥" />
</p>

<p><em>检索存储访问密钥</em></p>
<blockquote>
<p><strong>注意：</strong><strong>主访问密钥</strong>和<strong>辅助访问密钥</strong>都提供可用于访问存储的共享密钥。辅助密钥提供与主密钥相同的访问权限，旨在用作备份。在任一密钥泄露时，可独立地重新生成每个密钥。</p>
</blockquote></li>
<li><p>接下来，创建用于执行应用程序代码的<strong>云服务</strong>。单击<strong>“新建”</strong>|<strong>“计算”</strong>|<strong>“云服务”</strong>|<strong>“快速创建”</strong>。</p></li>
<li><p>为云服务选择一个 <strong>URL</strong>（如 <em>mytodoservice</em>），然后选择创建了存储帐户的<strong>地缘组</strong>。单击<strong>“创建云服务”</strong>以继续。Windows Azure 使用该 URL 值来生成云服务的端点 URL。</p>

<p><img src="./Images/creating-a-new-cloud-service.png?raw=true" alt="创建新的云服务" title="创建新的云服务" />
</p>

<p><em>创建新的云服务</em></p>
<blockquote>
<p><strong>注意：</strong>请尽量为存储帐户和云服务选择相同名称。但是，如果所选名称不可用，则可能需要选择不同名称。</p>

<p>门户会检验名称是否遵循命名规则和当前是否可用，以确保名称有效。如果输入的名称不合规则，系统将显示验证错误。</p>

<p><img src="./Images/url-prefix-validation.png?raw=true" alt="URL 前缀验证" />
</p>

<p>选择存储帐户所用的地缘组可确保将云服务部署到同一个数据中心。</p>
</blockquote></li>
<li><p>请等到该云服务创建完毕后再继续。请不要关闭浏览器窗口，您需要在下一个任务中使用该门户。</p>

<p><img src="./Images/cloud-service-created.png?raw=true" alt="云服务已创建" title="云服务已创建" />
</p>

<p><em>云服务已创建</em></p></li>
</ol>

<p><a name="Ex1Task2"></a></p>

<h4 id="Task_2_-_Publishing_the_Application_to_the_Windows_Azure_Management_Portal">任务 2 - 将应用程序发布至 Windows Azure 管理门户</h4>

<p>云服务是在 Windows Azure 环境中承载您的代码的服务。它有两个独立的部署槽：过渡部署和生产部署。使用过渡部署槽，您可以在将应用程序部署到生产环境前，先在 Windows Azure 环境中对服务进行测试。</p>

<p>在此任务中，您需要为 myTODO 应用程序创建一个服务包，然后借助 Windows Azure 管理门户将其部署到过渡环境。</p>

<ol>
<li><p>以提升的管理员权限打开 <strong>Microsoft Visual Studio 2010</strong>。</p></li>
<li><p>在<strong>“文件”</strong>菜单中，选择<strong>“打开”</strong>，然后选择<strong>“项目/解决方案”</strong>。在<strong>“打开项目”</strong>对话框中，浏览到实验的 <strong>Source</strong> 文件夹中的 <strong>Ex1-DeployingWithWAZPortal\Begin</strong>，选择 <strong>MyTodo.sln</strong>，然后单击“打开”。</p>

<p>该解决方案包含以下项目：</p>

<table><thead>
<tr>
<td></td>
<td></td>
</tr>
</thead><tbody>
<tr>
<td>MyTodo</td>
<td>一个配置好的标准云服务项目，用于为名为 <strong>MyTodo.WebUx</strong> 的单个 Web 角色提供支持。</td>
</tr>
<tr>
<td>MyTodo.Data.WindowsAzure</td>
<td>一个类库项目，包含用于表存储的 <strong>MyTodo.WebUx</strong> 应用程序的数据协定。</td>
</tr>
<tr>
<td>AspProviders</td>
<td>一个针对 Windows Azure 存储的 ASP.NET 成员身份、角色和会话状态提供程序的实现。</td>
</tr>
<tr>
<td>MyTodo.WebUx</td>
<td>一个在 Windows Azure 中承载 MyTODO ASP.NET MVC 应用程序的 Web 角色。</td>
</tr>
</tbody></table></li>
<li><p>确保 <strong>System.Web.Mvc</strong> 程序集已包括在您部署到 Windows Azure 的服务包中。为此，请在<strong>解决方案资源管理器</strong>中展开 <strong>MyTodo.WebUx</strong> 项目的<strong>“引用”</strong>节点，右键单击 <strong>System.Web.Mvc</strong> 程序集，然后选择<strong>“属性”</strong>。</p>

<p>要将程序集添加到服务包中，请执行以下操作：在 <strong>System.Web.Mvc</strong> 程序集的<strong>“属性”</strong>窗口中，若<strong>“复制本地”</strong>设置为 <em>False</em>，请将其更改为 <em>True</em>。</p>

<p><img src="./Images/including-assemblies-in-the-service-package-d.png?raw=true" alt="将程序集包含在部署到 Windows Azure 的服务包" title="将程序集包含在部署到 Windows Azure 的服务包" />
</p>

<p><em>将程序集包含在部署到 Windows Azure 的服务包</em></p>
<blockquote>
<p><strong>注意：</strong>通常，对于默认情况下未在 Windows Azure 虚拟机上安装的所有程序集，请将<strong>“复制本地”</strong>设置为 True，以确保这些程序集能够随着您的应用程序一起部署。</p>
</blockquote></li>
<li><p>接下来，更改用于承载应用程序的虚拟机的大小。为此，请在<strong>解决方案资源管理器</strong>中展开 <strong>MyTodo</strong> 项目的<strong>“角色”</strong>节点，双击 <strong>MyTodo.WebUX</strong> 角色打开其属性窗口。在<strong>“配置”</strong>页面中，找到<strong>“实例”</strong>类别下的<strong>“VM 大小”</strong>设置并从下拉列表中选择<strong>“特小”</strong>。</p>

<p><img src="./Images/configuring-vm-depl-size.png?raw=true" alt="配置用于部署的虚拟机的大小" title="配置用于部署的虚拟机的大小" />
</p>

<p><em>配置用于部署的虚拟机 (VM) 的大小</em></p>
<blockquote>
<p><strong>注意：</strong>在创建服务模型时，可将虚拟机 (VM) 的大小指定为部署角色实例所需的大小（取决于其资源需求）。VM 大小决定 CPU 核心的数量、内存容量、分配给运行实例的本地文件系统大小和网络吞吐量。</p>
</blockquote></li>
<li><p>要在部署服务前配置存储，请打开位于 <strong>MyTodo</strong> 云服务中的 <strong>ServiceConfiguration.cscfg</strong> 文件。使用以前记录的值（在任务 1 中创建存储帐户时）替换 [YOUR_ACCOUNT_NAME] 和 [YOUR_ACCOUNT_KEY] 占位符。该占位符出现在两处：一处在 <em>DataConnectionString</em> 下，一处在 <em>Microsoft.WindowsAzure.Plugins.Diagnostics.ConnectionString</em> 下，两个都要替换，请勿遗漏。</p>

<p><img src="./Images/configuring-storage-account-connection.png?raw=true" alt="配置存储帐户连接字符串" title="配置存储帐户连接字符串" />
</p>

<p><em>配置存储帐户连接字符串</em></p></li>
<li><p>接下来，定义 Windows Azure 来宾操作系统（用于在虚拟机上运行服务）的版本。为此，需要编辑 <strong>ServiceConfiguration</strong> 根元素的 <strong>osVersion</strong> 属性，请将其值设置为 <em>WA-GUEST-OS-2.12_201208-02</em>，如下图所示。</p>

<p><img src="./Images/configuring-guestOS.png?raw=true" alt="配置用于在虚拟机中运行应用程序的来宾操作系统的版本" title="配置用于在虚拟机中运行应用程序的来宾操作系统的版本" />
</p>

<p><em>配置用于在虚拟机中运行应用程序的来宾操作系统的版本</em></p>
<blockquote>
<p><strong>注意：</strong>此处用于 <strong>osVersion</strong> 的值旨在说明可以选择使用哪个来宾操作系统版本来运行应用程序。您可以使用更高的版本。</p>

<p><strong>注意：</strong>Windows Azure 运行用于部署服务应用程序的来宾操作系统。此来宾操作系统会定期更新。更新后的来宾操作系统版本可能会在您的应用程序中引入重大更改（这虽然罕见，但确有可能）。设置 <strong>osVersion</strong> 属性可确保应用程序运行在与您开发应用程序时所用的 Windows Azure SDK 兼容的 Windows Azure 来宾操作系统版本上。这使得您有时间对每个新的 <strong>osVersion</strong> 进行测试，而后再将其应用至生产部署。</p>

<p>要配置操作系统版本，需直接编辑服务定义文件，这是因为当前版本的 Windows Azure Tools for Microsoft Visual Studio 尚不支持从其用户界面设置该属性。</p>

<p>Windows Azure 提供了一项自动升级功能，它可在出现新的操作系统版本时自动升级您的服务，以使用最新的操作系统版本，借以确保您的服务始终运行在包含最新安全修补程序的环境中。如果您在部署服务时忽略 <strong>osVersion</strong>，则此为默认模式。要将现有服务更改为自动升级模式，请将 <strong>osVersion</strong> 属性设置为 &quot;*&quot; 值。</p>

<p>有关 Windows Azure 来宾操作系统可用版本的信息，请参阅 <a href="http://msdn.microsoft.com/zh-CN/library/ee924680(v=MSDN.10).aspx">Windows Azure 来宾操作系统版本和 SDK 兼容性矩阵</a>。</p>
</blockquote></li>
<li><p>按 <strong>Ctrl+S</strong> 保存对服务模型的更改。</p></li>
<li><p>要创建服务包，请右键单击该云服务项目，然后选择<strong>“打包”</strong>。</p></li>
<li><p>在<strong>“打包 Windows Azure 应用程序”</strong>对话框中，单击<strong>“打包”</strong>，然后等待 Visual Studio 创建应用程序包。打包完成后，Visual Studio 会打开一个窗口，其中显示包含所生成文件的文件夹。请勿关闭该窗口，此任务稍后部分还将用到这些包。</p>

<p><img src="./Images/creating-a-service-package.png?raw=true" alt="在 Visual Studio 中创建服务包" title="在 Visual Studio 中创建服务包" />
</p>

<p><em>在 Visual Studio 中创建服务包</em></p></li>
<li><p>在门户上找到之前创建的云服务，单击其名称以转到<strong>“仪表板”</strong>页。</p></li>
<li><p>确保选中<strong>“过渡”</strong>选项卡，然后单击<strong>“上载新的过渡部署”</strong>。</p>

<p><img src="./Images/uploading-the-application-to-windows-azure.png?raw=true" alt="将应用程序上载至 Windows Azure" title="将应用程序上载至 Windows Azure" />
</p>

<p><em>将应用程序上载至 Windows Azure</em></p>
<blockquote>
<p><strong>注意：</strong>云服务是在 Windows Azure 环境中运行您的代码的服务。它有两个独立的部署槽：过渡部署和生产部署。使用过渡部署槽，您可以在将应用程序部署到生产环境前，先在 Windows Azure 环境中对服务进行测试。</p>
</blockquote></li>
<li><p>在<strong>“上载包”</strong>对话框的<strong>“部署名称”</strong>中输入一个用于标识部署的标签（如 <em>MyTodo-v1</em>）。</p>
<blockquote>
<p><strong>注意：</strong>管理门户会在其过渡部署和生产部署用户界面中显示该标签，以便您识别每个环境中当前部署的版本。</p>
</blockquote></li>
<li><p>单击<strong>“包”</strong>下的<strong>“从本地”</strong>，导航到之前步骤中 Visual Studio 生成的包所在的文件夹，然后选择 <strong>MyTodo.cspkg</strong>。</p>
<blockquote>
<p><strong>注意：</strong><em>.cspkg</em> 文件是一种存档文件，其中包含运行服务所需的二进制数据和文件。</p>
</blockquote></li>
<li><p>接下来，单击<strong>“配置”</strong>下的<strong>“从本地”</strong>，然后选择同一文件夹下的 <strong>ServiceConfiguration.cscfg</strong> 文件。</p>
<blockquote>
<p><strong>注意：</strong><em>.cscfg</em> 文件包含应用程序的配置设置，如 Web 角色的实例计数和配置、之前修改的存储帐户设置等。</p>
</blockquote></li>
<li><p>最后，选中<strong>“即使一个或多个角色包含单个实例也进行部署”</strong>。然后单击<strong>勾号</strong>开始部署。</p>

<p><img src="./Images/configuring-service-package-deployment.png?raw=true" alt="配置服务包部署" />
</p>

<p><em>配置服务包部署</em></p></li>
<li><p>请注意，此时会开始上载包，而门户会显示部署状态，以指示其进度。</p>

<p><img src="./Images/uploading-a-service-package-to-the-windows-az.png?raw=true" alt="将服务包上载至 Windows Azure 管理门户" />
</p>

<p><em>将服务包上载至 Windows Azure 管理门户</em></p></li>
<li><p>等待部署过程完成，这可能需要几分钟时间。至此，包已上载完毕，处于<strong>“就绪”</strong>状态。请注意，门户为部署分配一个包含唯一标识符的 <strong>DNS 名称</strong>。稍后，您将访问该 URL 以测试应用程序，并确定其是否能在 Windows Azure 环境中正常运行，但在此之前，需要先对其进行配置。</p>
<blockquote>
<p><strong>注意：</strong>在部署期间，Windows Azure 会分析配置文件并将服务复制到正确数量的虚拟机上，并启动所有实例。负载平衡器、网络设备和监视也在此时配置。</p>
</blockquote>
<p><img src="./Images/package-successfully-deployed.png?raw=true" alt="包已成功部署" title="包已成功部署" />
</p>

<p><em>包已成功部署</em></p></li>
</ol>

<p><a name="Ex1Task3"></a></p>

<h4 id="Task_3_-_Configuring_the_Application_to_Increase_Number_of_Instances">任务 3 - 配置应用程序以增加实例数</h4>

<p>在测试所部署的应用程序之前，需要先对其进行配置。在本任务中，您将更改已部署的服务配置，以增加实例数。</p>

<ol>
<li><p>在 <strong>Windows Azure 管理门户</strong>中，转到<strong>“云服务”</strong>页，单击 <strong>MyTodo</strong> 服务名称以打开服务<strong>“仪表板”</strong>。</p>

<p><img src="./Images/configuring-app-settings.png?raw=true" alt="配置应用程序设置" title="配置应用程序设置" />
</p>

<p><em>配置应用程序设置</em></p></li>
<li><p>单击<strong>“缩放”</strong>以增加应用程序的角色数。</p></li>
<li><p>在<strong>“缩放”</strong>页面中，请确保选中<strong>“过渡”</strong>选项卡，然后将角色数更新为 <em>2</em>。</p>

<p><img src="./Images/scaling-cloud-service.png?raw=true" alt="缩放云服务" title="缩放云服务" />
</p>

<p><em>缩放云服务</em></p>
<blockquote>
<p><strong>注意：</strong>初始的角色数量由任务 2 中部署包时上载的 <strong>ServiceConfiguration.cscfg</strong> 文件决定。</p>

<p><strong>注意：</strong><strong>Instances</strong> 设置控制 Windows Azure 启动的角色数，用于对服务进行缩放。对于基于代币的订阅（目前仅在未配置计费的国家或地区可用），该数量限制为最多两个实例。但是，在商业产品中，只要您愿意付费，可将其更改为任意数量。</p>
</blockquote></li>
<li><p>单击<strong>“保存”</strong>更新配置，等待<strong>云服务</strong>应用新的设置。</p>

<p><img src="./Images/updating-number-role-instances.png?raw=true" alt="更新角色实例数" title="更新角色实例数" />
</p>

<p><em>更新角色实例数</em></p>
<blockquote>
<p><strong>注意：</strong>在应用这些设置时，门户会显示一个“正在缩放...”图例。</p>
</blockquote></li>
</ol>

<p><a name="Ex1Task4"></a></p>

<h4 id="Task_4_-_Testing_the_Application_in_the_Staging_Environment">任务 4 - 在过渡环境中测试应用程序</h4>

<p>在本任务中，您将在过渡环境中运行应用程序并访问其网站 URL，以测试其能否正常运行。</p>

<ol>
<li><p>在<strong>“云服务”</strong>页中，转到 MyTodo 服务<strong>“仪表板”</strong>，然后单击<strong>“网站 URL”</strong>链接。</p>

<p><img src="./Images/running-app-staging.png?raw=true" alt="在过渡环境中运行应用程序" title="在过渡环境中运行应用程序" />
</p>

<p><em>在过渡环境中运行应用程序</em></p>
<blockquote>
<p><strong>注意：</strong>该地址 URL 显示为 <em>&lt;guid&gt;.cloudapp.net</em>，其中，&lt;<em>guid</em>&gt; 是一个随机标识符。这与应用程序在生产环境中运行时的地址不同。虽然应用程序是在与生产环境隔离的过渡区域中执行的，但是过渡环境与生产环境并无实际差别，只是负载平衡器连接至何处的问题。</p>

<p><strong>注意：</strong>将来您可在多个“虚拟”区域中执行测试、QA、预生产等操作。</p>
</blockquote></li>
<li><p>单击<strong>“开始”</strong>以准备首次使用应用程序（需要创建新的帐户）。为此，请导航到注册表菜单。</p>

<p><img src="./Images/application-running-staging.png?raw=true" alt="在过渡环境中运行的应用程序" title="在过渡环境中运行的应用程序" />
</p>

<p><em>在过渡环境中运行的应用程序</em></p></li>
<li><p>填写帐户详细信息，即输入用户名称、电子邮件地址和密码，然后单击 <strong>Register</strong>（注册）。</p>
<blockquote>
<p><strong>注意：</strong>帐户信息存储在之前创建的存储帐户中。数据不在待办事项列表间共享。</p>
</blockquote>
<p><img src="./Images/application-new-account.png?raw=true" alt="应用程序准备就绪" title="应用程序准备就绪" />
</p>

<p><em>创建新帐户</em></p></li>
<li><p>接下来，应用程序会枚举当前已定义的列表。因为是首次使用，所以不会显示任何列表。</p>

<p><img src="./Images/application-ready.png?raw=true" alt="应用程序准备就绪" title="应用程序准备就绪" />
</p>

<p><em>应用程序准备就绪</em></p></li>
<li><p>若想探索一下应用程序，可创建一个新的待办事项列表并输入一些项。</p></li>
</ol>

<p><a name="Ex1Task5"></a></p>

<h4 id="Task_5_-_Promoting_the_Application_to_Production">任务 5 - 将应用程序提升到生产环境</h4>

<p>现在，您已验证服务在过渡环境中运行正常，准备将其提升到最终生产环境。将应用程序部署至生产环境时，Windows Azure 会重新配置其负载平衡器，以便应用程序在其生产 URL 中可用。</p>

<ol>
<li><p>在<strong>“云服务”</strong>页中，单击 MyTodo 服务<strong>名称</strong>以打开<strong>“仪表板”</strong>。然后单击底部菜单中的<strong>“交换”</strong>。</p>

<p><img src="./Images/promoting-app-prod.png?raw=true" alt="将应用程序提升到生产槽" title="将应用程序提升到生产槽" />
</p>

<p><em>将应用程序提升到生产槽</em></p></li>
<li><p>在<strong>“VIP 交换”</strong>对话框中，单击<strong>“是”</strong>在过渡环境与生产环境间交换部署。</p>

<p><img src="./Images/promoting-app-deploy.png?raw=true" alt="将应用程序提升到生产部署" title="将应用程序提升到生产部署" />
</p>

<p><em>将应用程序提升到生产部署</em></p></li>
<li><p>转换完成后，转到<strong>“生产”</strong>选项卡并单击<strong>“网站 URL”</strong>链接，在浏览器窗口中打开生产网站。注意地址栏中的 URL。</p>

<p><img src="./Images/application-running-production.png?raw=true" alt="在生产环境中运行的应用程序" title="在生产环境中运行的应用程序" />
</p>

<p><em>在生产环境中运行的应用程序</em></p>
<blockquote>
<p><strong>注意：</strong>如果刚提升就访问生产网站，DNS 名称可能还未就绪。如果遇到 DNS 错误 (404)，请等几分钟再试。请注意，Windows Azure 是动态创建 DNS 名称条目的，因而更改可能要过几分钟才能生效。</p>

<p><strong>注意：</strong>即使部署处于挂起状态，Windows Azure 仍需要为每个实例分配一个虚拟机 (VM) 并针对其收费。当您完成应用程序测试后，需要将部署从 Windows Azure 移除，以免产生不必要的费用。要移除正在运行的部署，请转到云服务<strong>“仪表板”</strong>页，选择当前承载的部署槽（过渡或生产），然后单击底部菜单上的<strong>“停止”</strong>。待服务停止后，单击<strong>“删除”</strong>将其移除。</p>
</blockquote></li>
</ol>

<hr />

<p><a name="Exercise2"></a></p>

<h3 id="Exercise_2_Using_PowerShell_to_manage_Windows_Azure_Applications">练习 2：借助 PowerShell 管理 Windows Azure 应用程序</h3>

<p>通常情况下，应用程序在其整个生命周期中会经历需要重新部署的变更。在前面的练习中，您已了解如何使用 Windows Azure 管理门户部署应用程序。此外，也可借助服务管理 API 以编程方式访问管理门户提供的很多功能。借助服务管理 API，您可以管理存储帐户和云服务、服务部署，以及地缘组。</p>

<p>Windows Azure Service Management PowerShell Cmdlet 封装了 Windows Azure 服务管理 API。这些 Cmdlet 可自动化部署、升级和缩放 Windows Azure 应用程序，使得这些操作得以简化。通过管接命令，可编写出将某个命令的输出用作其他命令的输入的复杂脚本。</p>

<p>在本练习中，您将学习如何使用 Azure 服务管理 Cmdlet 部署和升级 Windows Azure 应用程序。</p>

<p><a name="Ex2Task1"></a></p>

<h4 id="Task_1_-_Downloading_and_Importing_a_Publish-settings_File">任务 1 - 下载和导入发布设置文件</h4>

<p>在本任务中，您将登录到 Windows Azure 门户并下载发布设置文件。此文件包含安全凭据以及有关在开发环境中使用的 Windows Azure 订阅的其他信息。然后，您将使用 Windows Azure Cmdlet 导入此文件，以便安装证书并获取帐户信息。</p>

<ol>
<li><p>打开 Internet Explorer 浏览器，转到 <a href="https://windows.azure.com/download/publishprofile.aspx">https://windows.azure.com/download/publishprofile.aspx</a>。</p></li>
<li><p>使用与您的 Windows Azure 帐户关联的 Microsoft 帐户登录。</p></li>
<li><p>将发布设置文件<strong>保存</strong>到本地计算机。</p>

<p><img src="./Images/downloading-publish-settings-file.png?raw=true" alt="下载发布设置文件" title="下载发布设置文件" />
</p>

<p><em>下载发布设置文件</em></p>
<blockquote>
<p><strong>注意：</strong>下载页面说明如何使用 Visual Studio 发布框导入发布设置文件。此实验将介绍如何使用 Windows Azure PowerShell Cmdlet 或 Visual Studio 发布框这两种方式进行导入。</p>
</blockquote></li>
<li><p>在<strong>“开始”|“所有程序”|“Windows Azure”</strong>下的“开始”菜单中，右键单击 <strong>Windows Azure PowerShell</strong>，然后选择<strong>“以管理员身份运行”</strong>。</p></li>
<li><p>将 PowerShell 执行策略更改为 <strong>RemoteSigned</strong>。在要求确认时，按 <strong>Y</strong>，然后按 <strong>Enter</strong>。</p>

<!-- mark:1 -->

<span class="codelanguage">PowerShell</span><pre><code class="PowerShell"><strong class="markLine">Set-ExecutionPolicy RemoteSigned</strong>
</code></pre>
<blockquote>
<p><strong>注意：</strong>通过 Set-ExecutionPolicy cmdlet 可以确定允许在计算机上运行的 Windows PowerShell 脚本（如果有）。Windows PowerShell 有四种不同的执行策略：</p>

<ul>
<li><em>Restricted</em> - 任何脚本都不能运行。Windows PowerShell 只能在交互模式中使用。</li>
<li><em>AllSigned</em> - 只有由受信任的发布者签名的脚本可以运行。</li>
<li><em>RemoteSigned</em> - 下载的脚本必须由受信任的发布者签名，才可以运行。</li>
<li><em>Unrestricted</em> - 没有限制，所有 Windows PowerShell 脚本都可以运行。</li>
</ul>

<p>有关执行策略的详细信息，请参阅 TechNet 文章：<a href="http://technet.microsoft.com/zh-CN/library/ee176961.aspx">http://technet.microsoft.com/zh-CN/library/ee176961.aspx</a></p>
</blockquote></li>
<li><p>下面的脚本导入发布设置文件并保存这些信息，以备后用。您将在实验过程中使用这些值来管理您的 Windows Azure 订阅。将占位符替换为发布设置文件的路径并执行脚本。</p>

<!-- mark:1 -->

<span class="codelanguage">PowerShell</span><pre><code class="PowerShell"><strong class="markLine">Import-AzurePublishSettingsFile '[YOUR-PUBLISH-SETTINGS-PATH]'</strong>
</code></pre></li>
<li><p>执行以下命令以确定您的订阅和存储帐户名称。</p>

<!-- mark:1-2 -->

<span class="codelanguage">PowerShell</span><pre><code class="PowerShell"><strong class="markLine">Get-AzureSubscription | select SubscriptionName</strong>
<strong class="markLine">Get-AzureStorageAccount | select StorageAccountName </strong>
</code></pre></li>
<li><p>执行以下命令以便设置您的订阅的当前存储帐户。</p>

<!-- mark:1 -->

<span class="codelanguage">PowerShell</span><pre><code class="PowerShell"><strong class="markLine">Set-AzureSubscription -SubscriptionName '[YOUR-SUBSCRIPTION-NAME]' -CurrentStorageAccount '[YOUR-STORAGE-ACCOUNT]' </strong>
</code></pre></li>
</ol>

<p><a name="anchor-name-here"></a></p>

<h4 id="Task_2_-_Configuring_the_Application">任务 2 - 配置应用程序</h4>

<p>在此任务中，您将使用存储帐户信息配置应用程序并生成一个包，以便使用 Windows Azure PowerShell CmdLet 进行发布。</p>

<ol>
<li><p>如果尚未打开，请以管理员身份启动 Microsoft Visual Studio 2010。为此，请在<strong>“开始”|“所有程序”|“Microsoft Visual Studio 2010”</strong>中，右键单击 <strong>Microsoft Visual Studio 2010</strong> 快捷方式，然后选择<strong>“以管理员身份运行”</strong>。</p></li>
<li><p>在<strong>“文件”</strong>菜单中，选择<strong>“打开”</strong>，然后选择<strong>“项目/解决方案”</strong>。在<strong>“打开项目”</strong>对话框中，浏览到实验的 <strong>Source</strong> 文件夹中的 <strong>Ex2-DeployingWithPowerShell\Begin</strong>，选择 <strong>MyTodo.sln</strong>，然后单击“打开”。</p></li>
<li><p>配置存储帐户连接字符串。为此，请展开 <strong>MyTodo</strong> 项目中的<strong>“角色”</strong>节点，双击 <strong>MyTodo.WebUX</strong> 角色。在角色属性窗口中，选择<strong>“设置”</strong>选项卡，然后选择 <em>DataConnectionString</em> 设置，确保将<strong>“类型”</strong>设置为“连接字符串”，然后单击带省略号标记的按钮。</p>

<p><img src="./Images/defining-connection-settings.png?raw=true" alt="定义存储帐户连接设置" title="定义存储帐户连接设置" />
</p>

<p><em>定义存储帐户连接设置</em></p></li>
<li><p>在<strong>“存储连接字符串”</strong>对话框中，选择<strong>“手动输入的凭据”</strong>选项。填写存储<strong>帐户名称</strong>和存储<strong>帐户密钥</strong>，然后单击<strong>“确定”</strong>。</p>

<p><img src="./Images/defining-connection-settings-2.png?raw=true" alt="配置存储帐户名称和帐户密钥" title="配置存储帐户名称和帐户密钥" />
</p>

<p><em>配置存储帐户名称和帐户密钥</em></p>
<blockquote>
<p><strong>注意：</strong>在 Windows Azure 管理门户的存储帐户<strong>“仪表板”</strong>部分，可以看到这些信息。在部署和配置应用程序时使用了与练习 1 相同的设置。在该练习中，因为是在 Windows Azure 中运行应用程序，所以在管理门户中更新了配置。</p>
</blockquote></li>
<li><p>重复之前的步骤，使用相同的帐户信息来配置 <em>Microsoft.WindowsAzure.Plugins.Diagnostics.ConnectionString</em> 设置。</p></li>
<li><p>要创建服务包，请右键单击该云服务项目，然后选择<strong>“打包”</strong>。在<strong>“打包 Windows Azure 应用程序”</strong>对话框中，单击<strong>“打包”</strong>，然后等待 Visual Studio 创建应用程序包。打包完成后，Visual Studio 会打开一个窗口，其中显示包含所生成文件的文件夹。</p></li>
</ol>

<p><a name="Ex2Task3"></a></p>

<h4 id="Task_3_-_Uploading_a_Service_Package_Using_Windows_PowerShell">任务 3 - 使用 Windows PowerShell 上载服务包</h4>

<p>在前面的练习中，使用了 Windows Azure 管理门户来上载 myTODO 应用程序的服务包。在本任务中，您将改用 Windows Azure Service Management PowerShell cmdlet 来部署包。</p>

<ol>
<li><p>如果尚未打开，请从<strong>“开始”|“所有程序”|“Windows Azure”|“Windows Azure PowerShell”</strong>打开 Windows Azure PowerShell 命令提示符。</p></li>
<li><p>将当前目录更改为在前一任务中生成 myTODO 应用程序服务包的位置。</p></li>
<li><p>接下来，输入如下所示的命令。在使用以下命令行参数时，请务必将参数占位符替换为适用于服务帐户的设置。</p>

<!-- mark:1-5 -->

<span class="codelanguage">PowerShell</span><pre><code class="PowerShell"><strong class="markLine">$serviceName = '[YOUR-SERVICE-NAME-LOWER-CASE]'</strong>
<strong class="markLine">$packageLocation = '[PACKAGE-LOCATION]'</strong>
<strong class="markLine">$configurationLocation = '[CONFIGURATION-LOCATION]'</strong>
<strong class="markLine">$deploymentLabel = 'MyTodo-v2'</strong>
<strong class="markLine">New-AzureDeployment -ServiceName $serviceName -Package $packageLocation -Configuration $configurationLocation -Slot 'Staging' -Label $deploymentLabel -DoNotStart</strong>
</code></pre>

<table><thead>
<tr>
<td></td>
<td></td>
</tr>
</thead><tbody>
<tr>
<td>[YOUR-SERVICE-NAME-LOWER-CASE]</td>
<td>在练习 1 中配置云服务 URL 时所选择的服务名称，而非其服务标签。</td>
</tr>
<tr>
<td>[PACKAGE-LOCATION]</td>
<td>包含服务包的本地文件的路径，或存储帐户中包含服务包的 Blob 的 URL。</td>
</tr>
<tr>
<td>[CONFIGURATION-LOCATION]</td>
<td>包含服务配置文件的本地文件的路径，或包含服务配置文件的 Blob 的公用 URL。</td>
</tr>
<tr>
<td>[YOUR-DEPLOYMENT-LABEL]</td>
<td>部署标签。</td>
</tr>
</tbody></table><blockquote>
<p><strong>注意：</strong>上面显示的命令使用 <strong>New-AzureDeployment</strong> cmdlet 上载服务包并在过渡环境中创建新的部署。它分配了一个“MyTodo-v2”标签，以标识部署。</p>

<p><strong>重要事项：</strong><strong>New-AzureDeployment</strong> cmdlet 假定计算服务名称与存储服务名称相同。若非如此，请另外指定一个参数 -<strong>StorageServicename &lt;YOUR_SERVICE_NAME_LOWER_CASE&gt;</strong>（将占位符替换为存储服务名称）。</p>
</blockquote>
<p><img src="./Images/new-azure-deployment-command-line.png?raw=true" alt="新 Azure 部署命令行" title="新 Azure 部署命令行" />
</p>

<p><em>New-AzureDeployment 命令行</em></p></li>
<li><p>按 <strong>Enter</strong> 执行命令并等待 <strong>New-AzureDeployment</strong> 命令完成。</p>

<p><img src="./Images/command-line-deploying-powershell.png?raw=true" alt="使用 PowerShell 将新服务包部署至 Windows Azure" title="使用 PowerShell 将新服务包部署至 Windows Azure" />
</p>

<p><em>使用 PowerShell 将新服务包部署至 Windows Azure</em></p></li>
<li><p>在 Windows Azure 管理门户中，打开云服务的<strong>“仪表板”</strong>页，注意过渡环境部署是如何显示其状态的（UI 中显示的“<strong>正在更新部署...</strong>”的消息）。刷新服务状态可能需要几秒钟时间。等待部署操作完成，且状态显示为<strong>“已停止”</strong>。</p>

<p><img src="./Images/deployment-stopped.png?raw=true" alt="部署已停止" title="部署已停止" />
</p>

<p><em>部署已停止</em></p>
<blockquote>
<p><strong>注意：</strong>通常，您不会使用管理门户查看状态和确定部署操作的结果。此处这样做是为了强调一个事实：可使用管理 API 执行与管理门户中相同的操作。在下一个任务中，您将学习如何使用 Cmdlet 等待操作完成并检索其状态。</p>
</blockquote></li>
<li><p>保持 Microsoft Visual Studio 和 PowerShell 控制台打开。在下一个任务中需要使用它们。</p></li>
</ol>

<p><a name="Ex2Task4"></a></p>

<h4 id="Task_4_-_Upgrading_a_Deployment_Using_Windows_PowerShell">任务 4 - 使用 Windows PowerShell 升级部署</h4>

<p>在本任务中，您将使用 Windows Azure PowerShell cmdlet 来升级现有部署。首先，对原解决方案的源代码进行少量更改，以生成应用程序的更新版本。接下来，生成应用程序并创建新服务包（包含更新后的二进制数据）。最后，使用管理 cmdlet 将包重新部署至 Windows Azure。</p>

<ol>
<li><p>返回到 Microsoft Visual Studio 2010。</p></li>
<li><p>打开应用程序的布局视图以进行编辑。为此，请在<strong>解决方案资源管理器</strong>中双击 <strong>MyTodo.WebUx</strong> 项目 <strong>Views\Shared</strong> 文件夹中的 <strong>_Layout.cshtml</strong>。切换到源代码模式。</p></li>
<li><p>在页面的页脚区域插入新标题。转到布局视图底部，将版权声明更新为文本“(<em>Deployed with PowerShell CmdLets</em>)”，如下所示。</p>

<!-- mark:6 -->

<span class="codelanguage">HTML</span><pre><code class="HTML">    ...
    <span style="color:#0000FF">&lt;/</span><span style="color:#800000">div</span><span style="color:#0000FF">&gt;</span>
    <span style="color:#0000FF">&lt;</span><span style="color:#800000">div</span> <span style="color:#FF0000">id</span>=<span style="color:#0000FF">&quot;footer&quot;</span><span style="color:#0000FF">&gt;</span>
        <span style="color:#0000FF">&lt;</span><span style="color:#800000">hr</span> <span style="color:#0000FF">/&gt;</span>
        <span style="color:#0000FF">&lt;</span><span style="color:#800000">p</span> <span style="color:#FF0000">class</span>=<span style="color:#0000FF">&quot;copyright&quot;</span><span style="color:#0000FF">&gt;</span>
<strong class="markLine">            &amp;copy; 2012 Microsoft Corporation. All rights reserved. (Deployed with PowerShell CmdLets)<span style="color:#0000FF">&lt;/</span><span style="color:#800000">p</span><span style="color:#0000FF">&gt;</span></strong>
        <span style="color:#0000FF">&lt;/</span><span style="color:#800000">div</span><span style="color:#0000FF">&gt;</span>
        @RenderSection(&quot;ScriptsContent&quot;, required: false)
    <span style="color:#0000FF">&lt;/</span><span style="color:#800000">div</span><span style="color:#0000FF">&gt;</span>
<span style="color:#0000FF">&lt;/</span><span style="color:#800000">body</span><span style="color:#0000FF">&gt;</span>
<span style="color:#0000FF">&lt;/</span><span style="color:#800000">html</span><span style="color:#0000FF">&gt;</span>
</code></pre></li>
<li><p>生成新服务包。为此，在<strong>解决方案资源管理器</strong>中右键单击云服务项目并选择<strong>“打包”</strong>。在<strong>“打包 Windows Azure 应用程序”</strong>对话框中，单击<strong>“打包”</strong>，然后等待 Visual Studio 创建应用程序包。打包完成后，Visual Studio 会打开一个窗口，其中显示包含所生成文件的文件夹。</p></li>
<li><p>切换到 PowerShell 控制台并输入以下命令，在占位符参数指示的位置指定适用于服务帐户的设置。</p>

<!-- mark:1-4 -->

<span class="codelanguage">PowerShell</span><pre><code class="PowerShell"><strong class="markLine">$packageLocation = '[PACKAGE-LOCATION]'</strong>
<strong class="markLine">$configurationLocation = '[CONFIGURATION-LOCATION]'</strong>
<strong class="markLine">$deploymentLabel = 'MyTodo-v21'</strong>
<strong class="markLine">Get-AzureService -ServiceName $serviceName | Get-AzureDeployment -Slot staging | Set-AzureDeployment -Package $packageLocation -Configuration $configurationLocation -Upgrade -Label $deploymentLabel</strong>
</code></pre>
<blockquote>
<p><strong>注意：</strong>上面显示的命令行串接了一系列 cmdlet。首先，使用 <strong>Get-AzureService</strong> 获取对云服务的引用，然后使用 <strong>Get-AzureDeployment</strong> 检索其<em>过渡</em> 环境，最后使用 <strong>Set-AzureDeployment</strong> 上载包。这是为了说明如何使用 PowerShell 管道组成复杂的命令。事实上，就本例而言，也可向 <strong>Set-AzureDeployment</strong> 提供所有必需信息来获得相同的结果。例如：</p>
<blockquote>
<p>Set-AzureDeployment -Upgrade -ServiceName $serviceName -Package $packageLocation -Configuration $configurationLocation -Slot 'Staging' -Label $deploymentLabel</p>
</blockquote></blockquote></li>
<li><p>按 <strong>Enter</strong> 执行命令。等待部署过程完成，这可能需要几分钟时间。操作结束时，系统会显示一条包含操作结果的消息；如果部署完成且没有错误，您会看到消息“已成功”。</p>

<p><img src="./Images/command-line-powershell-status.png?raw=true" alt="显示包部署操作状态的 PowerShell 控制台" title="显示包部署操作状态的 PowerShell 控制台" />
</p>

<p><em>显示包部署操作状态的 PowerShell 控制台</em></p>
<blockquote>
<p><strong>注意：</strong>使用上述步骤部署包不会更改其状态。如果服务在部署前未运行，则将保持原状态。要启动服务，需要使用 <strong>Set-AzureDeployment</strong> cmdlet 更新其部署状态。</p>
</blockquote></li>
<li><p>要将服务的状态更改为运行状态，请在 <strong>PowerShell</strong> 控制台中输入下面的命令。</p>

<!-- mark:1 -->

<span class="codelanguage">PowerShell</span><pre><code class="PowerShell"><strong class="markLine">Set-AzureDeployment -Status -ServiceName $serviceName -NewStatus 'Running' -Slot 'Staging'</strong>
</code></pre></li>
<li><p>最后，交换过渡环境与生产环境中的部署。为此，在 <strong>PowerShell</strong> 控制台中使用 <strong>Get-Deployment</strong> 和 <strong>Move-Deployment</strong> cmdlet，如下所示。</p>

<!-- mark:1 -->

<span class="codelanguage">PowerShell</span><pre><code class="PowerShell"><strong class="markLine">Get-AzureService -ServiceName $serviceName | Get-AzureDeployment -Slot staging | Move-AzureDeployment</strong>
</code></pre></li>
</ol>

<p><a name="Ex2Verification"></a></p>

<h4 id="Verification">验证</h4>

<p>更新后的解决方案已部署至 Window Azure，可以对其进行测试了。您将启动该应用程序以确定部署是否成功，确保服务正常运行并且其生产 URL 可用。</p>

<ol>
<li><p>在管理门户的云服务<strong>“仪表板”</strong>页中，单击<strong>“网站 URL”</strong>链接在浏览器窗口中打开生产站点。注意页面的页脚。它应显示您在上一任务中输入的更新文本。</p>

<p><img src="./Images/new-deployment.png?raw=true" alt="显示更新后的页脚文本的新部署" title="显示更新后的页脚文本的新部署" />
</p>

<p><em>显示更新后的页脚文本的新部署</em></p>
<blockquote>
<p><strong>注意：</strong>如果刚提升就访问生产网站，DNS 名称可能还未就绪。如果遇到 DNS 错误 (404)，请等几分钟再试。请注意，Windows Azure 是动态创建 DNS 名称条目的，因而更改可能要过几分钟才能生效。</p>
</blockquote></li>
</ol>

<hr />

<p><a name="Exercise3"></a></p>

<h3 id="Exercise_3_Using_Visual_Studio_to_Publish_Applications">练习 3：使用 Visual Studio 发布应用程序</h3>

<p>在此之前，您已学习如何使用管理门户或一组 PowerShell cmdlet 将应用程序部署至 Windows Azure。如果您是开发人员，可能会发现在开发周期中从 Visual Studio 直接部署应用程序会更方便。</p>

<p>首次使用 Visual Studio 向 Windows Azure 发布服务时，需要创建访问帐户所需的凭据。为此，需要使用在前面练习中下载的 PublishSettings 文件。</p>

<p>在 Visual Studio 中设置帐户信息后，单击几次鼠标，即可在后台发布当前的解决方案。</p>

<p>在本练习中，将设置用于验证 Windows Azure 管理服务的凭据，然后从 Visual Studio 发布 MyTodo 应用程序。</p>

<p><a name="Ex3Task1"></a></p>

<h4 id="Task_1_-_Preparing_the_Solution_for_Publish">任务 1 - 准备要发布的解决方案</h4>

<p>在使用 Visual Studio 发布服务时，Windows Azure Tools 会上载服务包，然后自动启动它。在服务启动之前，您无法更新配置设置。因此，必须在发布服务之前配置所有必要的设置。</p>

<p>在此任务中，您将更新存储连接字符串以指向您的存储帐户。</p>

<ol>
<li><p>以管理员身份打开 Microsoft Visual Studio 2010。为此，请在<strong>“开始”|“所有程序”|“Microsoft Visual Studio 2010”</strong>中，右键单击 <strong>Microsoft Visual Studio 2010</strong> 快捷方式，然后选择<strong>“以管理员身份运行”</strong>。</p></li>
<li><p>在<strong>“文件”</strong>菜单中，选择<strong>“打开”</strong>，然后选择<strong>“项目/解决方案”</strong>。在<strong>“打开项目”</strong>对话框中，浏览到实验的 <strong>Source</strong> 文件夹中的 <strong>Ex3-DeployingWithVisualStudio\Begin</strong>，选择 <strong>MyTodo.sln</strong>，然后单击<strong>“打开”</strong>。</p>
<blockquote>
<p><strong>注意：</strong>这与之前部署的解决方案相同，只有一点除外：页脚区域中的图例指示解决方案是通过 <strong>Visual Studio</strong> 部署的。</p>
</blockquote></li>
<li><p>在<strong>解决方案资源管理器</strong>中展开 <strong>MyTodo</strong> 云项目的<strong>“角色”</strong>节点，然后双击 <strong>MyTodo.WebUx</strong> 角色。</p></li>
<li><p>在 <strong>MyTodo.WebUx [Role]</strong> 窗口中，切换到<strong>“设置”</strong>选项卡并配置所需的存储帐户详细信息，用您的存储帐户名称替换 [YOUR_ACCOUNT_NAME]，用共享密钥替换 [YOUR_ACCOUNT_KEY]。为 <em>DataConnectionString</em> 和 <em>Microsoft.WindowsAzure.Plugins.Diagnostics.ConnectionString</em> 设置执行此操作。这些值与您在上一练习中配置应用程序时使用的值相同。</p></li>
<li><p>按 <strong>Ctrl+S</strong> 保存更改。</p></li>
</ol>

<p><a name="Ex3Task2"></a></p>

<h4 id="Task_2_-_Publishing_a_Service_with_the_Windows_Azure_Tools">任务 2 - 使用 Windows Azure Tools 发布服务</h4>

<p>在此任务中，您将配置一组凭据，它们提供对 Windows Azure 帐户的访问。Visual Studio 保存这些信息，在需要发布服务时，您可以重用这些凭据，无需再次输入。</p>

<p>然后，您将使用这些凭据从 Visual Studio 直接发布 MyTODO 应用程序。</p>

<ol>
<li><p>在<strong>解决方案资源管理器</strong>中，右键单击 <strong>MyTodo</strong> 云项目，然后选择<strong>“发布”</strong>。</p></li>
<li><p>在<strong>“发布 Windows Azure 应用程序”</strong>对话框中，单击<strong>“导入”</strong>。</p></li>
<li><p>浏览到在前面练习中下载的 PublishSettings 文件，选中该文件并单击<strong>“打开”</strong>。</p></li>
<li><p>返回到<strong>“发布 Windows Azure 应用程序”</strong>对话框，选择从 <em>PublishSettings</em> 文件创建的订阅，然后单击<strong>“下一步”</strong>。</p>

<p><img src="./Images/waz-sign-in.png?raw=true" alt="登录" title="登录" />
</p>

<p><em>登录</em></p></li>
<li><p>请注意，在<strong>“通用设置”</strong>选项卡上，该对话框会使用在您的 Windows Azure 帐户中配置的所有服务的信息来填充<strong>“云服务”</strong>下拉列表。在该列表中选择要将应用程序部署到的云服务。</p></li>
<li><p>确保将<strong>“环境”</strong>设置为<em>“生产”</em>，并将<strong>“生成配置”</strong>设置为<em>“发布”</em>。此外，将<strong>“服务配置”</strong>设置为<em>默认</em> 值。</p>

<p><img src="./Images/deployment-common-settings.png?raw=true" alt="部署通用设置" title="部署通用设置" />
</p>

<p><em>部署通用设置</em></p></li>
<li><p>单击<strong>“高级设置”</strong>选项卡。将<strong>“部署标签”</strong>更新为 <em>MyTodo-v3</em>，并选中标记为<strong>“追加日期和时间”</strong>的复选框，以便在开发人员门户 UI 中标识该部署。</p></li>
<li><p>与云服务一样，该对话框使用您的 Windows Azure 帐户中已配置的所有存储服务来填充标记为<strong>“存储帐户”</strong>的下拉列表。为了发布服务，Visual Studio 首先将服务包上载并存储在 Windows Azure 中，然后从那里发布服务。选择要用于该目的的存储服务，然后单击<strong>“下一步”</strong>。</p>

<p><img src="./Images/deployment-advanced-settings.png?raw=true" alt="部署高级设置" title="部署高级设置" />
</p>

<p><em>部署高级设置</em></p>
<blockquote>
<p><strong>注意：</strong>尽管超出了此实验的范围，还是说明一下：您可以使用 IntelliTrace 选项捕捉在云中运行的服务的详细跟踪日志，并将其下载到桌面上执行历史调试。这些信息对于诊断角色启动期间所发生的问题极为有用。请注意，IntelliTrace 需要 .NET Framework 4，此组件仅在 Visual Studio Ultimate 版本中可用。</p>
</blockquote></li>
<li><p>查看摘要信息。如果一切正常，单击<strong>“发布”</strong>以启动部署过程。</p>

<p><img src="./Images/start-deployment.png?raw=true" alt="启动部署" title="启动部署" />
</p>

<p><em>启动部署</em></p>
<blockquote>
<p><strong>注意：</strong>在对话框的顶部，有一个“目标配置文件”下拉列表。配置完部署设置后，可将其另存为一个新的配置文件，以备日后使用而不必重新填写所有字段。</p>
</blockquote></li>
<li><p>如果选择的槽已由上一个部署占用，Visual Studio 会发出警告，并在替换前要求确认。如果确定不再需要当前部署且可以覆盖，请单击<strong>“替换”</strong>。否则，单击<strong>“取消”</strong>并重复该操作以选择其他部署槽。</p>

<p><img src="./Images/overwrite-existing-deployment.png?raw=true" alt="覆盖现有部署" />
</p>

<p><em>覆盖现有部署</em></p></li>
<li><p>启动部署之后，可以检查 Windows Azure 活动日志窗口以确定操作状态。如果未显示此窗口，则在<strong>“视图”</strong>菜单中，指向<strong>“其他窗口”</strong>，然后选择<strong>“Windows Azure 活动日志”</strong>。</p></li>
<li><p>默认情况下，日志会显示说明信息及指示部署操作状态的进度条。</p>

<p><img src="./Images/waz-activity-summary.png?raw=true" alt="在 Windows Azure 活动日志中查看摘要信息" title="在 Windows Azure 活动日志中查看摘要信息" />
</p>

<p><em>在 Windows Azure 活动日志中查看摘要信息</em></p></li>
<li><p>要查看正在进行的部署操作的详细信息，请双击活动日志项左侧的绿色箭头。注意，所提供的额外信息包括部署槽（<strong>“生产”</strong>或<strong>“过渡”</strong>）、<strong>“网站 URL”</strong>、<strong>“部署 ID”</strong>及显示状态更改（包括每次更改的发生时间）的<strong>“历史记录”</strong>日志。</p>

<p><img src="./Images/detailed-deployment-information.png?raw=true" alt="查看有关部署操作的详细信息" title="查看有关部署操作的详细信息" />
</p>

<p><em>查看有关部署操作的详细信息</em></p></li>
<li><p>等待部署操作完成，这可能需要几分钟时间。在此期间，您可以检查右侧的<strong>“历史记录”</strong>面板以确定部署状态。对于成功的部署，它应该类似于下面的序列。</p>

<p><img src="./Images/deployment-operation-log.png?raw=true" alt="部署操作历史记录日志" title="部署操作历史记录日志" />
</p>

<p><em>部署操作历史记录日志</em></p></li>
<li><p>待部署操作完成后，在<strong>“Windows Azure 活动日志”</strong>窗口中，单击已完成操作的<strong>“网站 URL”</strong>链接在浏览器中打开应用程序并确保其正常运行。注意页面底部版权声明中的图例，它指示该版本是用 Visual Studio 部署的。</p>

<p><img src="./Images/running-deployment.png?raw=true" alt="运行使用 Visual Studio 部署的应用程序" title="运行使用 Visual Studio 部署的应用程序" />
</p>

<p><em>运行使用 Visual Studio 部署的应用程序</em></p></li>
</ol>

<hr />

<p><a name="Exercise4"></a></p>

<h3 id="Exercise_4_Securing_Windows_Azure_with_SSL">练习 4：使用 SSL 保护 Windows Azure</h3>

<p>在此练习中，您需要启用 SSL 来保护 myTODO 应用程序。为此，需要创建用于服务器身份验证的自签名证书并将其上载至 Windows Azure 门户。待证书就位后，向服务模型添加一个新的 HTTPS 端点，并将证书分配给该端点。再次将应用程序部署到 Windows Azure，然后使用其 HTTPS 端点访问应用程序，就完成了此练习。</p>

<p><a name="Ex4Task1"></a></p>

<h4 id="Task_1_-_Adding_an_HTTPS_Endpoint_to_the_Application">任务 1 - 向应用程序添加 HTTPS 端点</h4>

<p>在此任务中，将更新 MyTODO 的服务模型以添加 HTTPS 端点，然后在计算模拟器中测试应用程序。</p>

<ol>
<li><p>如果尚未打开，则在提升的管理员模式下启动 Microsoft Visual Studio 2010。为此，请在<strong>“开始”|“所有程序”|“Microsoft Visual Studio 2010”</strong>中，右键单击 <strong>Microsoft Visual Studio 2010</strong> 快捷方式，然后选择<strong>“以管理员身份运行”</strong>。</p></li>
<li><p>在<strong>“文件”</strong>菜单中，选择<strong>“打开”</strong>，然后选择<strong>“项目/解决方案”</strong>。在<strong>“打开项目”</strong>对话框中，浏览到实验的 <strong>Source</strong> 文件夹中的 <strong>Ex4-SecuringAppWithSSL\Begin</strong>，选择 <strong>MyTodo.sln</strong>，然后单击<strong>“打开”</strong>。</p></li>
<li><p>展开 <strong>MyTodo</strong> 项目中的<strong>“角色”</strong>节点，双击 <strong>MyTodo.WebUx</strong> 角色打开其属性窗口。</p></li>
<li><p>在 <strong>MyTodo.WebUx [Role]</strong> 窗口中，切换到<strong>“设置”</strong>选项卡并配置所需的存储帐户详细信息，用您的存储帐户名称替换 [YOUR_ACCOUNT_NAME]，用共享密钥替换 [YOUR_ACCOUNT_KEY]。为 <em>DataConnectionString</em> 和 <em>Microsoft.WindowsAzure.Plugins.Diagnostics.ConnectionString</em> 设置执行此操作。这些值与您在上一练习中配置应用程序时使用的值相同。请记住在离开此屏幕后对于这两个设置将“类型”设置为“连接字符串”。</p></li>
<li><p>接下来，切换到<strong>“端点”</strong>选项卡，选择 <strong>HTTPS</strong> 选项，在“公用端口”中填入值 443，保持<strong>“名称”</strong>字段不变。现在不选择 SSL 证书；此操作将在此练习后面的步骤中进行。</p>

<p><img src="./Images/adding-http-endpoint.png?raw=true" alt="向应用程序添加 HTTPS 端点" title="向应用程序添加 HTTPS 端点" />
</p>

<p><em>向应用程序添加 HTTPS 端点</em></p></li>
<li><p>现在，选择该 HTTPS 端点作为在浏览器中启动应用程序并对其进行调试时所用的端点。为此，右键单击 <strong>MyTodo</strong> 项目中的 <strong>MyTodo.WebUx</strong> 角色，指向<strong>“在浏览器中启动”</strong>并确保只选中 <strong>HTTPS</strong>。</p>

<p><img src="./Images/choosing-debug-endpoint.png?raw=true" alt="选择用于调试应用程序的端点" title="选择用于调试应用程序的端点" />
</p>

<p><em>选择用于调试应用程序的端点</em></p></li>
<li><p>接下来，在本地测试应用程序。按 <strong>F5</strong> 在计算模拟器中生成并启动应用程序。注意浏览器指示证书存在问题。忽略警告，单击<strong>“继续浏览此网站”</strong>。</p>

<p><img src="./Images/certificate-error-computer-emulator.png?raw=true" alt="在计算模拟器中测试时遇到证书错误" title="在计算模拟器中测试时遇到证书错误" />
</p>

<p><em>在计算模拟器中测试时遇到证书错误</em></p>
<blockquote>
<p><strong>注意：</strong>在本地开发环境中使用 SSL 测试应用程序时，无需配置证书。计算模拟器使用自己的证书处理此要求。但是，它所用的证书的证书颁发机构不受信任，因而导致出现警告。在本地测试应用程序时可安全地忽略这一警告。</p>

<p>如果愿意，可将该证书安装到<strong>受信任的根证书颁发机构</strong>证书存储区中来消除警告。但是需要注意，在继续之前，请评估这样做所带来的安全隐患。</p>

<p>要去掉警告，请通过单击<strong>“开始”</strong>按钮并在搜索框中键入 &quot;MMC&quot; 以打开<strong>“Microsoft 管理控制台”</strong>。添加一个<strong>“证书”</strong>管理单元实例，将其配置为管理<strong>“计算机”</strong>帐户的证书。展开<strong>个人\证书</strong>存储区，找到颁发给 127.0.0.1 的证书。要确保证书正确，请查看其属性，验证<strong>“使用者”</strong>和<strong>“颁发机构”</strong>字段，确认证书属于计算模拟器。要信任该证书，只需将其从<strong>个人</strong>证书存储区拖放到<strong>受信任的根证书颁发机构</strong>证书存储区中。</p>

<p><img src="./Images/computer-emulator-certificate.png?raw=true" alt="计算模拟器实现 SSL 所用的证书" title="计算模拟器实现 SSL 所用的证书" />
</p>

<p><em>计算模拟器实现 SSL 所用的证书</em></p>
</blockquote></li>
<li><p>访问主页时，注意地址栏显示您正在访问 HTTPS 端点。</p>

<p><img src="./Images/accessing-endpoints.png?raw=true" alt="在计算模拟器中访问 HTTPS 端点" title="在计算模拟器中访问 HTTPS 端点" />
</p>

<p><em>在计算模拟器中访问 HTTPS 端点</em></p></li>
<li><p>关闭浏览器窗口。现在，将创建自签名证书并将应用程序部署到 Windows Azure。</p></li>
<li><p>不要关闭 Visual Studio 中的项目。稍后还会用到它。</p></li>
</ol>

<p><a name="Ex4Task2"></a></p>

<h4 id="Task_2_-_Creating_a_Self-Signed_Certificate">任务 2 - 创建自签名证书</h4>

<p>在本任务中，将创建可上载至 Windows Azure 开发人员门户的自签名证书，从而为应用程序配置 SSL 端点。</p>
<blockquote>
<p><strong>注意：</strong>如果您所在的环境无法使用 Internet Information Services (IIS) 管理器，可跳过本任务。您可在实验资源中找到可用的自签名证书。</p>

<p>要安装证书，请打开 Windows 资源管理器，浏览到此实验的 <strong>Source</strong> 文件夹中的 <strong>Assets</strong>，然后双击 <strong>MyTodoCertificate.pfx</strong> 文件，使用<strong>证书导入向导</strong>安装证书。使用“password1”（不包含引号）作为密码。所有其他选项均使用默认值。</p>

<p><strong>重要事项：</strong>此证书仅用于完成本练习中的步骤。请勿在生产部署中使用此证书。</p>
</blockquote>
<ol>
<li><p>启动 Internet Information Services 管理器。为此，请单击<strong>“开始”</strong>按钮并在搜索框中键入 &quot;iis&quot;，然后单击已安装程序列表中的<strong>“Internet Information Services (IIS) 管理器”</strong>。</p>

<p><img src="./Images/iis-manager-launch.png?raw=true" alt="启动 Internet Information Services (IIS) 管理器" title="启动 Internet Information Services \(IIS\) 管理器" />
</p>

<p><em>启动 Internet Information Services (IIS) 管理器</em></p></li>
<li><p>在 Internet Information Services (IIS) 管理器控制台的<strong>“连接”</strong>窗格中，选择计算机所对应的顶层节点。然后，在中间窗格中找到 <strong>IIS</strong> 类别，双击<strong>“服务器证书”</strong>。</p>

<p><img src="./Images/iis-managing-certificates.png?raw=true" alt="使用 Internet Information Services (IIS) 管理器管理证书" title="使用 Internet Information Services \(IIS\) 管理器管理证书" />
</p>

<p><em>使用 Internet Information Services (IIS) 管理器管理证书</em></p></li>
<li><p>在<strong>“服务器证书”</strong>页面中，单击<strong>“操作”</strong>窗格中的<strong>“创建自签名证书”</strong>。</p>

<p><img src="./Images/iis-creating-self-signed-certificate.png?raw=true" alt="在 Internet Information Services (IIS) 管理器中创建自签名证书" title="在 Internet Information Services \(IIS\) 管理器中创建自签名证书" />
</p>

<p><em>在 Internet Information Services (IIS) 管理器中创建自签名证书</em></p></li>
<li><p>在<strong>“创建自签名证书”</strong>向导的<strong>“指定友好名称”</strong>页中，输入一个用于识别证书的名称（可以是任意名称，如 <strong>MyTodoCertificate</strong>，此处您用自己的名称替换了占位符），然后单击<strong>“确定”</strong>。</p>

<p><img src="./Images/iis-specifying-certificate-name.png?raw=true" alt="为证书指定名称" title="为证书指定名称" />
</p>

<p><em>为证书指定名称</em></p></li>
<li><p>现在，右键单击新创建的证书，选择<strong>“导出”</strong>将证书存储在文件中。</p>

<p><img src="./Images/iis-server-certificates.png?raw=true" alt="显示新自签名证书的服务器证书页面" title="显示新自签名证书的服务器证书页面" />
</p>

<p><em>显示新自签名证书的服务器证书页面</em></p></li>
<li><p>在<strong>“导出证书”</strong>对话框中，输入用于存储要导出的证书的文件名，键入密码并确认，然后单击<strong>“确定”</strong>。记下密码。在稍后将证书上载至门户时，将用到该密码。</p>

<p><img src="./Images/iis-exporting-certificate.png?raw=true" alt="将证书导出到文件中" />
</p>

<p><em>将证书导出到文件中</em></p></li>
</ol>

<p><a name="Ex4Task3"></a></p>

<h4 id="Task_3_-_Adding_the_Certificate_to_the_Service_Model_of_the_Application">任务 3 - 将证书添加到应用程序的服务模型中</h4>

<p>之前，在本地环境中测试对应用程序的 SSL 访问时，之所以不指定证书也能正常操作，是因为使用了由计算模拟器管理的证书。在本任务中，将对应用程序进行配置，以使用在 Internet Information Services (ISS) 管理器中创建的自签名证书。</p>

<ol>
<li><p>重新回到 Visual Studio。如果关闭了项目，则需要从此实验的 <strong>Source</strong> 文件夹中的 <strong>Ex4-SecuringAppWithSSL\Begin</strong> 重新打开它。</p></li>
<li><p>在<strong>解决方案资源管理器</strong>中展开 <strong>MyTodo</strong> 项目中的<strong>“角色”</strong>节点，双击 <strong>MyTodo.WebUx</strong> 角色打开其属性窗口，然后切换到<strong>“证书”</strong>选项卡。</p></li>
<li><p>在<strong>“证书”</strong>页面中，单击<strong>“添加证书”</strong>。在<strong>“名称”</strong>字段中填入用于标识要添加的证书的值，如 <em>SSL</em>。确保将<strong>“存储位置”</strong>设置为 <em>LocalMachine</em>，将<strong>“存储名称”</strong>设置为 <em>My</em>。单击<strong>“指纹”</strong>列右侧的省略号按钮。</p></li>
<li><p>在<strong>“选择证书”</strong>对话框中，选择之前创建的自签名证书，然后单击<strong>“确定”</strong>。</p>

<p><img src="./Images/selecting-certificate.png?raw=true" alt="为服务选择证书" title="为服务选择证书" />
</p>

<p><em>为服务选择证书</em></p></li>
<li><p>注意对话框在<strong>“指纹”</strong>列中填入了证书中的相应值。</p>

<p><img src="./Images/adding-certificate-service-model.png?raw=true" alt="向应用程序的服务模型添加证书" title="向应用程序的服务模型添加证书" />
</p>

<p><em>向应用程序的服务模型添加证书</em></p></li>
<li><p>现在，切换到<strong>“端点”</strong>选项卡，在 <strong>HTTPS</strong> 输入端点部分，展开<strong>“SSL 证书名称”</strong>下拉列表，选择在前一步骤中添加至服务的证书。</p>

<p><img src="./Images/choosing-certificate-https-endpoint.png?raw=true" alt="选择用于 HTTPS 端点的证书" title="选择用于 HTTPS 端点的证书" />
</p>

<p><em>选择用于 HTTPS 端点的证书</em></p></li>
<li><p>按 <strong>Ctrl+S</strong> 保存对配置的更改。</p></li>
</ol>

<p><a name="Ex4Task4"></a></p>

<h4 id="Task_4_-_Uploading_the_Certificate_to_the_Windows_Azure_Management_Portal">任务 4 - 将证书上载至 Windows Azure 管理门户</h4>

<p>在此任务中，您将在前一步骤中创建的自签名证书上载至 Windows Azure 管理门户。</p>

<ol>
<li><p>使用 Web 浏览器导航到 <a href="http://manage.windowsazure.com"><a href="http://manage.windowsazure.com/">http://manage.windowsazure.com/</a></a>，然后使用 Microsoft 帐户登录。</p></li>
<li><p>在<strong>“云服务”</strong>页中，单击云服务的<strong>名称</strong>以转到该服务的<strong>“仪表板”</strong>。</p></li>
<li><p>依次单击<strong>“证书”</strong>和<strong>“上载证书”</strong>。</p>

<p><img src="./Images/adding-a-new-certificate.png?raw=true" alt="添加新证书" title="添加新证书" />
</p>

<p><em>添加新证书</em></p></li>
<li><p>在<strong>“上载证书”</strong>对话框中，单击<strong>“浏览”</strong>，然后导航到在前面任务中导出的证书的存储位置。输入导出证书时指定的密码并确认，然后单击<strong>勾号</strong>。</p>

<p><img src="./Images/creating-certificate-service.png?raw=true" alt="为服务创建证书" title="为服务创建证书" />
</p>

<p><em>为服务创建证书</em></p></li>
</ol>

<p><a name="Ex4Verification"></a></p>

<h4 id="Verification">验证</h4>

<p>在此任务中，您将应用程序部署到 Windows Azure 并访问其 HTTPS 端点，以验证是否成功启用了 SSL。</p>

<ol>
<li><p>使用您喜欢的方式（选择 Windows Azure 开发人员门户、Windows Azure Service Management PowerShell Cmdlet 或 Windows Azure Tools for Visual Studio）将应用程序再次发布和部署到 Windows Azure 环境。有关如何使用这些方式进行部署的说明，请参阅练习 1、2 和 3。</p>
<blockquote>
<p><strong>注意：</strong>现在，服务配置指定了另一个 HTTPS 端点，因此，不能只是简单地升级当前部署，而需要重新部署应用程序。只要更改了服务拓扑，就必须这样做。</p>
</blockquote></li>
<li><p>部署应用程序后，启动应用程序并等待其状态显示为<strong>“就绪”</strong>（使用 Visual Studio 部署时，部署状态显示为<strong>“已完成”</strong>）。</p></li>
<li><p>现在，浏览到 HTTPS 端点（如 <em><a href="https://mytodoservice.cloudapp.net">https://mytodoservice.cloudapp.net</a></em>）。将再次出现证书错误，这是因为自签名证书的证书颁发机构不受信任。您可以忽略此错误。</p>

<p><img src="./Images/accessing-https-endpoint.png?raw=true" alt="访问 Windows Azure 中的 HTTPS 端点" title="访问 Windows Azure 中的 HTTPS 端点" />
</p>

<p><em>访问 Windows Azure 中的 HTTPS 端点</em></p>
<blockquote>
<p><strong>注意：</strong>对于生产部署，可以从受信任的颁发机构为应用程序购买证书并改用该证书。</p>
</blockquote></li>
</ol>

<p><a name="Ex4Task5"></a></p>

<h4 id="Task_5_-_Configuring_a_CNAME_Entry_for_DNS_Resolution_Optional">任务 5 - 为 DNS 解析配置 CNAME 条目（可选）</h4>

<p>在部署应用程序时，Windows Azure fabric 为其分配一个 URL，形式为 <em>http://[mytodoservice].cloudapp.net</em>，其中，[<em>mytodoservice</em>] 是在创建云服务时为其选择的公用名称。尽管此 URL 完全正常可用，但是出于很多原因，您可能更愿意使用自己域中的 URL 来访问服务。换句话说，不通过 <em><a href="http://mytodoservice.cloudapp.net">http://mytodoservice.cloudapp.net</a></em> 访问服务，而是用贵组织的域名（如 <em><a href="http://mytodoservice.fabrikam.com">http://mytodoservice.fabrikam.com</a></em>）访问服务。</p>

<p>将应用程序映射到您自己的域的方法之一是：在自有 DNS 系统中设置一条指向 Azure 中主机名的 CNAME 记录。CNAME 为任意主机记录（包括不同域中的主机）提供别名。因此，要将应用程序映射到 <em>fabrikam.com</em> 域，您可以在自己的 DNS 中创建以下记录。</p>

<table><thead>
<tr>
<td><strong>组织域</strong></td>
<td><strong>别名</strong></td>
<td><strong>应用程序域</strong></td>
</tr>
</thead><tbody>
<tr>
<td>mytodoservice.fabrikam.com</td>
<td>CNAME</td>
<td>mytodoservice.cloudapp.net</td>
</tr>
</tbody></table>
<p>执行此操作的流程因 DNS 基础结构细节的差异而有所不同。对于外部域注册商，您可以查询其文档，找出设置 CNAME 的正确流程。有关此主题的其他信息，请参阅 <a href="http://blog.smarx.com/posts/custom-domain-names-in-windows-azure">Windows Azure 中的自定义域名</a>。作为示例，本任务仅简要说明如何在 Windows Server 2008 上使用 Microsoft DNS 设置别名。</p>
<blockquote>
<p><strong>注意：</strong>Windows DNS 服务器应安装在 Windows Server 2008 上。您可以在服务器管理器上启用 DNS 服务器角色。</p>
</blockquote>
<ol>
<li><p>从<strong>“开始”|“管理工具”|“DNS”</strong>打开 DNS 管理器。</p></li>
<li><p>在 DNS 管理器中，展开<strong>“正向查找区域”</strong>节点，然后右键单击要设置别名的区域并选择<strong>“新建别名(CNAME)”</strong>。注意，如果没有任何区域，则必须先创建一个，然后才能创建别名。</p>

<p><img src="./Images/creating-alias.png?raw=true" alt="更新查找区域以创建别名" title="更新查找区域以创建别名" />
</p>

<p><em>更新查找区域以创建别名</em></p></li>
<li><p>在<strong>“新建资源记录”</strong>对话框中，输入要用于访问在 Azure 中承载的应用程序的别名，如 <em>mytodoservice</em>。然后，键入 Azure 为应用程序分配的应用程序完全限定域名，如 <em>[mytodoservice].cloudapp.net</em>。单击<strong>“确定”</strong>创建记录。</p>

<p><img src="./Images/creating-alias-app.png?raw=true" alt="为 Azure 中的 myTODO 应用程序创建别名" title="为 Azure 中的 myTODO 应用程序创建别名" />
</p>

<p><em>为 Azure 中的 myTODO 应用程序创建别名</em></p></li>
<li><p>在 DNS 管理器控制台中，查看更新区域的内容，找到新创建的 CNAME 记录。</p>

<p><img src="./Images/lookup-zone-alias.png?raw=true" alt="显示应用程序新别名的更新查找区域" title="显示应用程序新别名的更新查找区域" />
</p>

<p><em>显示应用程序新别名的更新查找区域</em></p></li>
<li><p>现在，打开命令提示符并键入下面的命令，以验证该别名设置正确且映射至 Windows Azure 中应用程序的地址。</p>

<!--mark: 1 -->

<span class="codelanguage">CommandPrompt</span><pre><code class="CommandPrompt"><strong class="markLine">nslookup &lt;youralias&gt;</strong>
</code></pre>

<p><img src="./Images/command-prompt-alias-verification.png?raw=true" alt="验证域别名" title="验证域别名" />
</p>

<p><em>验证域别名</em></p>

<p>现在，您可以使用该别名访问应用程序了。</p></li>
</ol>

<hr />

<p><a name="Summary"></a></p>

<h2 id="Summary">小结</h2>

<p>通过完成此动手实验，您学习了如何在 Windows Azure 管理门户中创建存储帐户和云服务。使用管理门户，您部署了一个包含应用程序二进制数据的服务包，配置了其存储，并定义了要运行的实例数。</p>

<p>此外，您还学习了如何使用服务管理 API 以编程方式达成这一目的，具体来说，就是如何使用 Windows Azure Service Management cmdlet 部署、更新应用程序，以及如何使用 Windows PowerShell 管理应用程序。</p>

<p>作为开发人员，您学习了如何在 Visual Studio 中使用 Windows Azure Tools 在后台发布解决方案，同时继续进行开发任务。最后，您学习了如何使用管理门户上载证书，以及如何使用 SSL 保护您的 Windows Azure 应用程序。</p> </span>
		</div>
	<br/>
	<p><a href="#top">返回页首</a></p>


				</div>
			</section>
			<footer>
				<div class="footer-sitemap" style="border-top:0"></div>
				<div class="footer-bottom">
					<ul>
						<li class="footer-copyright"><a href="http://www.microsoft.com"><img alt="microsoft" src="images/microsoft.png" /></a></li>					
												<li><a href="https://github.com/WindowsAzure-TrainingKit/HOL-DeployingCloudServices/issues" target="_new">记录问题</a></li>
												<li><a href="mailto:azcfeed@microsoft.com?subject=Windows Azure Training Kit">联系我们</a></li>
						<li><a href="EULA.htm">使用条款</a></li>
						<li><a href=".\">浏览内容</a></li>
						<li>&copy; 2012 Microsoft</li>
					</ul>
				</div>
			</footer>
			</div>
        </div>
    </div>
</body>
</html>

